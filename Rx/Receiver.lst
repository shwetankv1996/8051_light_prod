                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.4 #11418 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module Receiver
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _isr_timer0
                                     13 	.globl _TF2
                                     14 	.globl _EXF2
                                     15 	.globl _RCLK
                                     16 	.globl _TCLK
                                     17 	.globl _EXEN2
                                     18 	.globl _TR2
                                     19 	.globl _C_T2
                                     20 	.globl _CP_RL2
                                     21 	.globl _T2CON_7
                                     22 	.globl _T2CON_6
                                     23 	.globl _T2CON_5
                                     24 	.globl _T2CON_4
                                     25 	.globl _T2CON_3
                                     26 	.globl _T2CON_2
                                     27 	.globl _T2CON_1
                                     28 	.globl _T2CON_0
                                     29 	.globl _PT2
                                     30 	.globl _ET2
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _TH2
                                    107 	.globl _TL2
                                    108 	.globl _RCAP2H
                                    109 	.globl _RCAP2L
                                    110 	.globl _T2CON
                                    111 	.globl _B
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _IP
                                    115 	.globl _P3
                                    116 	.globl _IE
                                    117 	.globl _P2
                                    118 	.globl _SBUF
                                    119 	.globl _SCON
                                    120 	.globl _P1
                                    121 	.globl _TH1
                                    122 	.globl _TH0
                                    123 	.globl _TL1
                                    124 	.globl _TL0
                                    125 	.globl _TMOD
                                    126 	.globl _TCON
                                    127 	.globl _PCON
                                    128 	.globl _DPH
                                    129 	.globl _DPL
                                    130 	.globl _SP
                                    131 	.globl _P0
                                    132 	.globl _auto_flag
                                    133 	.globl _ac_state
                                    134 	.globl _off
                                    135 	.globl _state
                                    136 	.globl _time_delay
                                    137 	.globl _timerCount
                                    138 	.globl _data_r
                                    139 	.globl _start
                                    140 	.globl _startup
                                    141 	.globl _delay
                                    142 	.globl _UART_Init
                                    143 	.globl _Transmit_data
                                    144 	.globl _handshake
                                    145 	.globl _check_data
                                    146 	.globl _InitTimer0
                                    147 	.globl _check_ac
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000F0   173 _B	=	0x00f0
                           0000C8   174 _T2CON	=	0x00c8
                           0000CA   175 _RCAP2L	=	0x00ca
                           0000CB   176 _RCAP2H	=	0x00cb
                           0000CC   177 _TL2	=	0x00cc
                           0000CD   178 _TH2	=	0x00cd
                                    179 ;--------------------------------------------------------
                                    180 ; special function bits
                                    181 ;--------------------------------------------------------
                                    182 	.area RSEG    (ABS,DATA)
      000000                        183 	.org 0x0000
                           000080   184 _P0_0	=	0x0080
                           000081   185 _P0_1	=	0x0081
                           000082   186 _P0_2	=	0x0082
                           000083   187 _P0_3	=	0x0083
                           000084   188 _P0_4	=	0x0084
                           000085   189 _P0_5	=	0x0085
                           000086   190 _P0_6	=	0x0086
                           000087   191 _P0_7	=	0x0087
                           000088   192 _IT0	=	0x0088
                           000089   193 _IE0	=	0x0089
                           00008A   194 _IT1	=	0x008a
                           00008B   195 _IE1	=	0x008b
                           00008C   196 _TR0	=	0x008c
                           00008D   197 _TF0	=	0x008d
                           00008E   198 _TR1	=	0x008e
                           00008F   199 _TF1	=	0x008f
                           000090   200 _P1_0	=	0x0090
                           000091   201 _P1_1	=	0x0091
                           000092   202 _P1_2	=	0x0092
                           000093   203 _P1_3	=	0x0093
                           000094   204 _P1_4	=	0x0094
                           000095   205 _P1_5	=	0x0095
                           000096   206 _P1_6	=	0x0096
                           000097   207 _P1_7	=	0x0097
                           000098   208 _RI	=	0x0098
                           000099   209 _TI	=	0x0099
                           00009A   210 _RB8	=	0x009a
                           00009B   211 _TB8	=	0x009b
                           00009C   212 _REN	=	0x009c
                           00009D   213 _SM2	=	0x009d
                           00009E   214 _SM1	=	0x009e
                           00009F   215 _SM0	=	0x009f
                           0000A0   216 _P2_0	=	0x00a0
                           0000A1   217 _P2_1	=	0x00a1
                           0000A2   218 _P2_2	=	0x00a2
                           0000A3   219 _P2_3	=	0x00a3
                           0000A4   220 _P2_4	=	0x00a4
                           0000A5   221 _P2_5	=	0x00a5
                           0000A6   222 _P2_6	=	0x00a6
                           0000A7   223 _P2_7	=	0x00a7
                           0000A8   224 _EX0	=	0x00a8
                           0000A9   225 _ET0	=	0x00a9
                           0000AA   226 _EX1	=	0x00aa
                           0000AB   227 _ET1	=	0x00ab
                           0000AC   228 _ES	=	0x00ac
                           0000AF   229 _EA	=	0x00af
                           0000B0   230 _P3_0	=	0x00b0
                           0000B1   231 _P3_1	=	0x00b1
                           0000B2   232 _P3_2	=	0x00b2
                           0000B3   233 _P3_3	=	0x00b3
                           0000B4   234 _P3_4	=	0x00b4
                           0000B5   235 _P3_5	=	0x00b5
                           0000B6   236 _P3_6	=	0x00b6
                           0000B7   237 _P3_7	=	0x00b7
                           0000B0   238 _RXD	=	0x00b0
                           0000B1   239 _TXD	=	0x00b1
                           0000B2   240 _INT0	=	0x00b2
                           0000B3   241 _INT1	=	0x00b3
                           0000B4   242 _T0	=	0x00b4
                           0000B5   243 _T1	=	0x00b5
                           0000B6   244 _WR	=	0x00b6
                           0000B7   245 _RD	=	0x00b7
                           0000B8   246 _PX0	=	0x00b8
                           0000B9   247 _PT0	=	0x00b9
                           0000BA   248 _PX1	=	0x00ba
                           0000BB   249 _PT1	=	0x00bb
                           0000BC   250 _PS	=	0x00bc
                           0000D0   251 _P	=	0x00d0
                           0000D1   252 _F1	=	0x00d1
                           0000D2   253 _OV	=	0x00d2
                           0000D3   254 _RS0	=	0x00d3
                           0000D4   255 _RS1	=	0x00d4
                           0000D5   256 _F0	=	0x00d5
                           0000D6   257 _AC	=	0x00d6
                           0000D7   258 _CY	=	0x00d7
                           0000AD   259 _ET2	=	0x00ad
                           0000BD   260 _PT2	=	0x00bd
                           0000C8   261 _T2CON_0	=	0x00c8
                           0000C9   262 _T2CON_1	=	0x00c9
                           0000CA   263 _T2CON_2	=	0x00ca
                           0000CB   264 _T2CON_3	=	0x00cb
                           0000CC   265 _T2CON_4	=	0x00cc
                           0000CD   266 _T2CON_5	=	0x00cd
                           0000CE   267 _T2CON_6	=	0x00ce
                           0000CF   268 _T2CON_7	=	0x00cf
                           0000C8   269 _CP_RL2	=	0x00c8
                           0000C9   270 _C_T2	=	0x00c9
                           0000CA   271 _TR2	=	0x00ca
                           0000CB   272 _EXEN2	=	0x00cb
                           0000CC   273 _TCLK	=	0x00cc
                           0000CD   274 _RCLK	=	0x00cd
                           0000CE   275 _EXF2	=	0x00ce
                           0000CF   276 _TF2	=	0x00cf
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable bit register bank
                                    284 ;--------------------------------------------------------
                                    285 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        286 bits:
      000000                        287 	.ds 1
                           008000   288 	b0 = bits[0]
                           008100   289 	b1 = bits[1]
                           008200   290 	b2 = bits[2]
                           008300   291 	b3 = bits[3]
                           008400   292 	b4 = bits[4]
                           008500   293 	b5 = bits[5]
                           008600   294 	b6 = bits[6]
                           008700   295 	b7 = bits[7]
                                    296 ;--------------------------------------------------------
                                    297 ; internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area DSEG    (DATA)
      000000                        300 _start::
      000000                        301 	.ds 1
      000001                        302 _data_r::
      000001                        303 	.ds 1
      000002                        304 _timerCount::
      000002                        305 	.ds 2
      000004                        306 _time_delay::
      000004                        307 	.ds 2
      000006                        308 _state::
      000006                        309 	.ds 2
      000008                        310 _off::
      000008                        311 	.ds 2
      00000A                        312 _ac_state::
      00000A                        313 	.ds 1
                                    314 ;--------------------------------------------------------
                                    315 ; overlayable items in internal ram 
                                    316 ;--------------------------------------------------------
                                    317 	.area	OSEG    (OVR,DATA)
                                    318 	.area	OSEG    (OVR,DATA)
                                    319 ;--------------------------------------------------------
                                    320 ; Stack segment in internal ram 
                                    321 ;--------------------------------------------------------
                                    322 	.area	SSEG
      000000                        323 __start__stack:
      000000                        324 	.ds	1
                                    325 
                                    326 ;--------------------------------------------------------
                                    327 ; indirectly addressable internal ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area ISEG    (DATA)
                                    330 ;--------------------------------------------------------
                                    331 ; absolute internal ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area IABS    (ABS,DATA)
                                    334 	.area IABS    (ABS,DATA)
                                    335 ;--------------------------------------------------------
                                    336 ; bit data
                                    337 ;--------------------------------------------------------
                                    338 	.area BSEG    (BIT)
      000000                        339 _auto_flag::
      000000                        340 	.ds 1
                                    341 ;--------------------------------------------------------
                                    342 ; paged external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area PSEG    (PAG,XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XSEG    (XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; absolute external ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XABS    (ABS,XDATA)
                                    353 ;--------------------------------------------------------
                                    354 ; external initialized ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area XISEG   (XDATA)
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT0 (CODE)
                                    359 	.area GSINIT1 (CODE)
                                    360 	.area GSINIT2 (CODE)
                                    361 	.area GSINIT3 (CODE)
                                    362 	.area GSINIT4 (CODE)
                                    363 	.area GSINIT5 (CODE)
                                    364 	.area GSINIT  (CODE)
                                    365 	.area GSFINAL (CODE)
                                    366 	.area CSEG    (CODE)
                                    367 ;--------------------------------------------------------
                                    368 ; interrupt vector 
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
      000000                        371 __interrupt_vect:
      000000 02r00r00         [24]  372 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  373 	reti
      000004                        374 	.ds	7
      00000B 02r00r00         [24]  375 	ljmp	_isr_timer0
                                    376 ;--------------------------------------------------------
                                    377 ; global & static initialisations
                                    378 ;--------------------------------------------------------
                                    379 	.area HOME    (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 	.area GSFINAL (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.globl __sdcc_gsinit_startup
                                    384 	.globl __sdcc_program_startup
                                    385 	.globl __start__stack
                                    386 	.globl __mcs51_genXINIT
                                    387 	.globl __mcs51_genXRAMCLEAR
                                    388 	.globl __mcs51_genRAMCLEAR
                                    389 ;	Receiver.c:33: char start=0;
      000000 75*00 00         [24]  390 	mov	_start,#0x00
                                    391 ;	Receiver.c:35: volatile int timerCount = 0;
      000003 E4               [12]  392 	clr	a
      000004 F5*02            [12]  393 	mov	_timerCount,a
      000006 F5*03            [12]  394 	mov	(_timerCount + 1),a
                                    395 ;	Receiver.c:36: volatile int time_delay = 15;
      000008 75*04 0F         [24]  396 	mov	_time_delay,#0x0f
                                    397 ;	1-genFromRTrack replaced	mov	(_time_delay + 1),#0x00
      00000B F5*05            [12]  398 	mov	(_time_delay + 1),a
                                    399 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  400 	ljmp	__sdcc_program_startup
                                    401 ;--------------------------------------------------------
                                    402 ; Home
                                    403 ;--------------------------------------------------------
                                    404 	.area HOME    (CODE)
                                    405 	.area HOME    (CODE)
      00000E                        406 __sdcc_program_startup:
      00000E 02r02r48         [24]  407 	ljmp	_main
                                    408 ;	return from main will return to caller
                                    409 ;--------------------------------------------------------
                                    410 ; code
                                    411 ;--------------------------------------------------------
                                    412 	.area CSEG    (CODE)
                                    413 ;------------------------------------------------------------
                                    414 ;Allocation info for local variables in function 'isr_timer0'
                                    415 ;------------------------------------------------------------
                                    416 ;	Receiver.c:40: void isr_timer0(void) __interrupt 1   // It is called after every 5msec
                                    417 ;	-----------------------------------------
                                    418 ;	 function isr_timer0
                                    419 ;	-----------------------------------------
      000000                        420 _isr_timer0:
                           000007   421 	ar7 = 0x07
                           000006   422 	ar6 = 0x06
                           000005   423 	ar5 = 0x05
                           000004   424 	ar4 = 0x04
                           000003   425 	ar3 = 0x03
                           000002   426 	ar2 = 0x02
                           000001   427 	ar1 = 0x01
                           000000   428 	ar0 = 0x00
      000000 C0*00            [24]  429 	push	bits
      000002 C0 E0            [24]  430 	push	acc
      000004 C0 F0            [24]  431 	push	b
      000006 C0 82            [24]  432 	push	dpl
      000008 C0 83            [24]  433 	push	dph
      00000A C0 07            [24]  434 	push	(0+7)
      00000C C0 06            [24]  435 	push	(0+6)
      00000E C0 05            [24]  436 	push	(0+5)
      000010 C0 04            [24]  437 	push	(0+4)
      000012 C0 03            [24]  438 	push	(0+3)
      000014 C0 02            [24]  439 	push	(0+2)
      000016 C0 01            [24]  440 	push	(0+1)
      000018 C0 00            [24]  441 	push	(0+0)
      00001A C0 D0            [24]  442 	push	psw
      00001C 75 D0 00         [24]  443 	mov	psw,#0x00
                                    444 ;	Receiver.c:42: TH0  = 0Xee;         // ReLoad the timer value for 5ms
      00001F 75 8C EE         [24]  445 	mov	_TH0,#0xee
                                    446 ;	Receiver.c:43: TL0  = 0X00;
      000022 75 8A 00         [24]  447 	mov	_TL0,#0x00
                                    448 ;	Receiver.c:44: timerCount++;
      000025 AE*02            [24]  449 	mov	r6,_timerCount
      000027 AF*03            [24]  450 	mov	r7,(_timerCount + 1)
      000029 74 01            [12]  451 	mov	a,#0x01
      00002B 2E               [12]  452 	add	a,r6
      00002C F5*02            [12]  453 	mov	_timerCount,a
      00002E E4               [12]  454 	clr	a
      00002F 3F               [12]  455 	addc	a,r7
      000030 F5*03            [12]  456 	mov	(_timerCount + 1),a
                                    457 ;	Receiver.c:45: rst_out=!rst_out;
      000032 B2 96            [12]  458 	cpl	_P1_6
                                    459 ;	Receiver.c:47: if(state!=20)
      000034 74 14            [12]  460 	mov	a,#0x14
      000036 B5*06 07         [24]  461 	cjne	a,_state,00257$
      000039 E4               [12]  462 	clr	a
      00003A B5*07 03         [24]  463 	cjne	a,(_state + 1),00257$
      00003D 02r01rEF         [24]  464 	ljmp	00153$
      000040                        465 00257$:
                                    466 ;	Receiver.c:49: if(timerCount < (time_delay*30)) // count for LED-ON delay
      000040 85*04*00         [24]  467 	mov	__mulint_PARM_2,_time_delay
      000043 85*05*01         [24]  468 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      000046 90 00 1E         [24]  469 	mov	dptr,#0x001e
      000049 12r00r00         [24]  470 	lcall	__mulint
      00004C AE 82            [24]  471 	mov	r6,dpl
      00004E AF 83            [24]  472 	mov	r7,dph
      000050 C3               [12]  473 	clr	c
      000051 E5*02            [12]  474 	mov	a,_timerCount
      000053 9E               [12]  475 	subb	a,r6
      000054 E5*03            [12]  476 	mov	a,(_timerCount + 1)
      000056 64 80            [12]  477 	xrl	a,#0x80
      000058 8F F0            [24]  478 	mov	b,r7
      00005A 63 F0 80         [24]  479 	xrl	b,#0x80
      00005D 95 F0            [12]  480 	subb	a,b
      00005F 40 03            [24]  481 	jc	00258$
      000061 02r01r47         [24]  482 	ljmp	00150$
      000064                        483 00258$:
                                    484 ;	Receiver.c:51: switch(state)
      000064 E5*07            [12]  485 	mov	a,(_state + 1)
      000066 30 E7 03         [24]  486 	jnb	acc.7,00259$
      000069 02r01rEF         [24]  487 	ljmp	00153$
      00006C                        488 00259$:
      00006C C3               [12]  489 	clr	c
      00006D 74 09            [12]  490 	mov	a,#0x09
      00006F 95*06            [12]  491 	subb	a,_state
      000071 74 80            [12]  492 	mov	a,#(0x00 ^ 0x80)
      000073 85*07 F0         [24]  493 	mov	b,(_state + 1)
      000076 63 F0 80         [24]  494 	xrl	b,#0x80
      000079 95 F0            [12]  495 	subb	a,b
      00007B 50 03            [24]  496 	jnc	00260$
      00007D 02r01rEF         [24]  497 	ljmp	00153$
      000080                        498 00260$:
      000080 E5*06            [12]  499 	mov	a,_state
      000082 24 0B            [12]  500 	add	a,#(00261$-3-.)
      000084 83               [24]  501 	movc	a,@a+pc
      000085 F5 82            [12]  502 	mov	dpl,a
      000087 E5*06            [12]  503 	mov	a,_state
      000089 24 0E            [12]  504 	add	a,#(00262$-3-.)
      00008B 83               [24]  505 	movc	a,@a+pc
      00008C F5 83            [12]  506 	mov	dph,a
      00008E E4               [12]  507 	clr	a
      00008F 73               [24]  508 	jmp	@a+dptr
      000090                        509 00261$:
      000090rA4                     510 	.db	00101$
      000091rB6                     511 	.db	00104$
      000092rC7                     512 	.db	00107$
      000093rD8                     513 	.db	00110$
      000094rE9                     514 	.db	00113$
      000095rFA                     515 	.db	00116$
      000096r0B                     516 	.db	00119$
      000097r1C                     517 	.db	00122$
      000098r25                     518 	.db	00123$
      000099r36                     519 	.db	00126$
      00009A                        520 00262$:
      00009As00                     521 	.db	00101$>>8
      00009Bs00                     522 	.db	00104$>>8
      00009Cs00                     523 	.db	00107$>>8
      00009Ds00                     524 	.db	00110$>>8
      00009Es00                     525 	.db	00113$>>8
      00009Fs00                     526 	.db	00116$>>8
      0000A0s01                     527 	.db	00119$>>8
      0000A1s01                     528 	.db	00122$>>8
      0000A2s01                     529 	.db	00123$>>8
      0000A3s01                     530 	.db	00126$>>8
                                    531 ;	Receiver.c:53: case 0:	P0_1 =!P0_1;P0_0 =0;P2_6=!P2_6;
      0000A4                        532 00101$:
      0000A4 B2 81            [12]  533 	cpl	_P0_1
                                    534 ;	assignBit
      0000A6 C2 80            [12]  535 	clr	_P0_0
      0000A8 B2 A6            [12]  536 	cpl	_P2_6
                                    537 ;	Receiver.c:54: if(auto_flag)	auto_led=1;
      0000AA 30*00 02         [24]  538 	jnb	_auto_flag,00103$
                                    539 ;	assignBit
      0000AD D2 A1            [12]  540 	setb	_P2_1
      0000AF                        541 00103$:
                                    542 ;	Receiver.c:55: up_led=0;	down_led=0;
                                    543 ;	assignBit
      0000AF C2 A7            [12]  544 	clr	_P2_7
                                    545 ;	assignBit
      0000B1 C2 A4            [12]  546 	clr	_P2_4
                                    547 ;	Receiver.c:56: break;	
      0000B3 02r01rEF         [24]  548 	ljmp	00153$
                                    549 ;	Receiver.c:57: case 1:	P0_1 =!P0_1;P0_0 =0;P2_6=0;
      0000B6                        550 00104$:
      0000B6 B2 81            [12]  551 	cpl	_P0_1
                                    552 ;	assignBit
      0000B8 C2 80            [12]  553 	clr	_P0_0
                                    554 ;	assignBit
      0000BA C2 A6            [12]  555 	clr	_P2_6
                                    556 ;	Receiver.c:58: if(auto_flag)
      0000BC 20*00 03         [24]  557 	jb	_auto_flag,00264$
      0000BF 02r01rEF         [24]  558 	ljmp	00153$
      0000C2                        559 00264$:
                                    560 ;	Receiver.c:59: up_led=1;
                                    561 ;	assignBit
      0000C2 D2 A7            [12]  562 	setb	_P2_7
                                    563 ;	Receiver.c:60: break;
      0000C4 02r01rEF         [24]  564 	ljmp	00153$
                                    565 ;	Receiver.c:61: case 2:	P0_1 =!P0_1;P0_0 =0;P2_6=0;
      0000C7                        566 00107$:
      0000C7 B2 81            [12]  567 	cpl	_P0_1
                                    568 ;	assignBit
      0000C9 C2 80            [12]  569 	clr	_P0_0
                                    570 ;	assignBit
      0000CB C2 A6            [12]  571 	clr	_P2_6
                                    572 ;	Receiver.c:62: if(auto_flag)
      0000CD 20*00 03         [24]  573 	jb	_auto_flag,00265$
      0000D0 02r01rEF         [24]  574 	ljmp	00153$
      0000D3                        575 00265$:
                                    576 ;	Receiver.c:63: up_led=1;
                                    577 ;	assignBit
      0000D3 D2 A7            [12]  578 	setb	_P2_7
                                    579 ;	Receiver.c:64: break;
      0000D5 02r01rEF         [24]  580 	ljmp	00153$
                                    581 ;	Receiver.c:65: case 3:	P0_1 =!P0_1;P0_0 =!P0_0;P2_6=0;
      0000D8                        582 00110$:
      0000D8 B2 81            [12]  583 	cpl	_P0_1
      0000DA B2 80            [12]  584 	cpl	_P0_0
                                    585 ;	assignBit
      0000DC C2 A6            [12]  586 	clr	_P2_6
                                    587 ;	Receiver.c:66: if(auto_flag)
      0000DE 20*00 03         [24]  588 	jb	_auto_flag,00266$
      0000E1 02r01rEF         [24]  589 	ljmp	00153$
      0000E4                        590 00266$:
                                    591 ;	Receiver.c:67: up_led=1;
                                    592 ;	assignBit
      0000E4 D2 A7            [12]  593 	setb	_P2_7
                                    594 ;	Receiver.c:68: break;
      0000E6 02r01rEF         [24]  595 	ljmp	00153$
                                    596 ;	Receiver.c:69: case 4:	P0_1 =0;P0_0 =!P0_0;P2_6=!P2_6;
      0000E9                        597 00113$:
                                    598 ;	assignBit
      0000E9 C2 81            [12]  599 	clr	_P0_1
      0000EB B2 80            [12]  600 	cpl	_P0_0
      0000ED B2 A6            [12]  601 	cpl	_P2_6
                                    602 ;	Receiver.c:70: if(auto_flag)
      0000EF 20*00 03         [24]  603 	jb	_auto_flag,00267$
      0000F2 02r01rEF         [24]  604 	ljmp	00153$
      0000F5                        605 00267$:
                                    606 ;	Receiver.c:71: down_led=1;
                                    607 ;	assignBit
      0000F5 D2 A4            [12]  608 	setb	_P2_4
                                    609 ;	Receiver.c:72: break;
      0000F7 02r01rEF         [24]  610 	ljmp	00153$
                                    611 ;	Receiver.c:73: case 5:	P0_1 =0;P0_0 =0;P2_6=!P2_6;
      0000FA                        612 00116$:
                                    613 ;	assignBit
      0000FA C2 81            [12]  614 	clr	_P0_1
                                    615 ;	assignBit
      0000FC C2 80            [12]  616 	clr	_P0_0
      0000FE B2 A6            [12]  617 	cpl	_P2_6
                                    618 ;	Receiver.c:74: if(auto_flag)
      000100 20*00 03         [24]  619 	jb	_auto_flag,00268$
      000103 02r01rEF         [24]  620 	ljmp	00153$
      000106                        621 00268$:
                                    622 ;	Receiver.c:75: down_led=1;
                                    623 ;	assignBit
      000106 D2 A4            [12]  624 	setb	_P2_4
                                    625 ;	Receiver.c:76: break;
      000108 02r01rEF         [24]  626 	ljmp	00153$
                                    627 ;	Receiver.c:77: case 6:	P0_1 =0;P0_0 =0;P2_6=!P2_6;
      00010B                        628 00119$:
                                    629 ;	assignBit
      00010B C2 81            [12]  630 	clr	_P0_1
                                    631 ;	assignBit
      00010D C2 80            [12]  632 	clr	_P0_0
      00010F B2 A6            [12]  633 	cpl	_P2_6
                                    634 ;	Receiver.c:78: if(auto_flag)
      000111 20*00 03         [24]  635 	jb	_auto_flag,00269$
      000114 02r01rEF         [24]  636 	ljmp	00153$
      000117                        637 00269$:
                                    638 ;	Receiver.c:79: down_led=1;
                                    639 ;	assignBit
      000117 D2 A4            [12]  640 	setb	_P2_4
                                    641 ;	Receiver.c:80: break;
      000119 02r01rEF         [24]  642 	ljmp	00153$
                                    643 ;	Receiver.c:81: case 7:	P0_1 =0;P0_0 =!P0_0;P2_6=0;break;
      00011C                        644 00122$:
                                    645 ;	assignBit
      00011C C2 81            [12]  646 	clr	_P0_1
      00011E B2 80            [12]  647 	cpl	_P0_0
                                    648 ;	assignBit
      000120 C2 A6            [12]  649 	clr	_P2_6
      000122 02r01rEF         [24]  650 	ljmp	00153$
                                    651 ;	Receiver.c:82: case 8:	P0_1 =!P0_1;P0_0 =0;P2_6=0;
      000125                        652 00123$:
      000125 B2 81            [12]  653 	cpl	_P0_1
                                    654 ;	assignBit
      000127 C2 80            [12]  655 	clr	_P0_0
                                    656 ;	assignBit
      000129 C2 A6            [12]  657 	clr	_P2_6
                                    658 ;	Receiver.c:83: if(auto_flag)
      00012B 20*00 03         [24]  659 	jb	_auto_flag,00270$
      00012E 02r01rEF         [24]  660 	ljmp	00153$
      000131                        661 00270$:
                                    662 ;	Receiver.c:84: up_led=1;
                                    663 ;	assignBit
      000131 D2 A7            [12]  664 	setb	_P2_7
                                    665 ;	Receiver.c:85: break;
      000133 02r01rEF         [24]  666 	ljmp	00153$
                                    667 ;	Receiver.c:86: case 9:	P0_1 =0;P0_0 =0;P2_6=!P2_6;
      000136                        668 00126$:
                                    669 ;	assignBit
      000136 C2 81            [12]  670 	clr	_P0_1
                                    671 ;	assignBit
      000138 C2 80            [12]  672 	clr	_P0_0
      00013A B2 A6            [12]  673 	cpl	_P2_6
                                    674 ;	Receiver.c:87: if(auto_flag)
      00013C 20*00 03         [24]  675 	jb	_auto_flag,00271$
      00013F 02r01rEF         [24]  676 	ljmp	00153$
      000142                        677 00271$:
                                    678 ;	Receiver.c:88: down_led=1;
                                    679 ;	assignBit
      000142 D2 A4            [12]  680 	setb	_P2_4
                                    681 ;	Receiver.c:89: break;
      000144 02r01rEF         [24]  682 	ljmp	00153$
                                    683 ;	Receiver.c:91: }	
      000147                        684 00150$:
                                    685 ;	Receiver.c:95: else if((timerCount > time_delay) &&(timerCount<time_delay*60)) // count for LED-ON delay
      000147 C3               [12]  686 	clr	c
      000148 E5*04            [12]  687 	mov	a,_time_delay
      00014A 95*02            [12]  688 	subb	a,_timerCount
      00014C E5*05            [12]  689 	mov	a,(_time_delay + 1)
      00014E 64 80            [12]  690 	xrl	a,#0x80
      000150 85*03 F0         [24]  691 	mov	b,(_timerCount + 1)
      000153 63 F0 80         [24]  692 	xrl	b,#0x80
      000156 95 F0            [12]  693 	subb	a,b
      000158 40 03            [24]  694 	jc	00272$
      00015A 02r01rEA         [24]  695 	ljmp	00146$
      00015D                        696 00272$:
      00015D 85*04*00         [24]  697 	mov	__mulint_PARM_2,_time_delay
      000160 85*05*01         [24]  698 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      000163 90 00 3C         [24]  699 	mov	dptr,#0x003c
      000166 12r00r00         [24]  700 	lcall	__mulint
      000169 AE 82            [24]  701 	mov	r6,dpl
      00016B AF 83            [24]  702 	mov	r7,dph
      00016D C3               [12]  703 	clr	c
      00016E E5*02            [12]  704 	mov	a,_timerCount
      000170 9E               [12]  705 	subb	a,r6
      000171 E5*03            [12]  706 	mov	a,(_timerCount + 1)
      000173 64 80            [12]  707 	xrl	a,#0x80
      000175 8F F0            [24]  708 	mov	b,r7
      000177 63 F0 80         [24]  709 	xrl	b,#0x80
      00017A 95 F0            [12]  710 	subb	a,b
      00017C 40 03            [24]  711 	jc	00273$
      00017E 02r01rEA         [24]  712 	ljmp	00146$
      000181                        713 00273$:
                                    714 ;	Receiver.c:97: switch(state)
      000181 E5*07            [12]  715 	mov	a,(_state + 1)
      000183 30 E7 03         [24]  716 	jnb	acc.7,00274$
      000186 02r01rEF         [24]  717 	ljmp	00153$
      000189                        718 00274$:
      000189 C3               [12]  719 	clr	c
      00018A 74 09            [12]  720 	mov	a,#0x09
      00018C 95*06            [12]  721 	subb	a,_state
      00018E 74 80            [12]  722 	mov	a,#(0x00 ^ 0x80)
      000190 85*07 F0         [24]  723 	mov	b,(_state + 1)
      000193 63 F0 80         [24]  724 	xrl	b,#0x80
      000196 95 F0            [12]  725 	subb	a,b
      000198 50 03            [24]  726 	jnc	00275$
      00019A 02r01rEF         [24]  727 	ljmp	00153$
      00019D                        728 00275$:
      00019D E5*06            [12]  729 	mov	a,_state
      00019F 24 0B            [12]  730 	add	a,#(00276$-3-.)
      0001A1 83               [24]  731 	movc	a,@a+pc
      0001A2 F5 82            [12]  732 	mov	dpl,a
      0001A4 E5*06            [12]  733 	mov	a,_state
      0001A6 24 0E            [12]  734 	add	a,#(00277$-3-.)
      0001A8 83               [24]  735 	movc	a,@a+pc
      0001A9 F5 83            [12]  736 	mov	dph,a
      0001AB E4               [12]  737 	clr	a
      0001AC 73               [24]  738 	jmp	@a+dptr
      0001AD                        739 00276$:
      0001ADrC1                     740 	.db	00131$
      0001AErD2                     741 	.db	00141$
      0001AFrC6                     742 	.db	00140$
      0001B0rC6                     743 	.db	00140$
      0001B1rC6                     744 	.db	00140$
      0001B2rC6                     745 	.db	00140$
      0001B3rDE                     746 	.db	00142$
      0001B4rC6                     747 	.db	00140$
      0001B5rC6                     748 	.db	00140$
      0001B6rC6                     749 	.db	00140$
      0001B7                        750 00277$:
      0001B7s01                     751 	.db	00131$>>8
      0001B8s01                     752 	.db	00141$>>8
      0001B9s01                     753 	.db	00140$>>8
      0001BAs01                     754 	.db	00140$>>8
      0001BBs01                     755 	.db	00140$>>8
      0001BCs01                     756 	.db	00140$>>8
      0001BDs01                     757 	.db	00142$>>8
      0001BEs01                     758 	.db	00140$>>8
      0001BFs01                     759 	.db	00140$>>8
      0001C0s01                     760 	.db	00140$>>8
                                    761 ;	Receiver.c:99: case 0:	if(auto_flag)	auto_led=0;
      0001C1                        762 00131$:
      0001C1 30*00 02         [24]  763 	jnb	_auto_flag,00140$
                                    764 ;	assignBit
      0001C4 C2 A1            [12]  765 	clr	_P2_1
                                    766 ;	Receiver.c:106: case 9:P0_1 =0;P0_0 =0;P2_6=0;up_led=0;down_led=0;break;
      0001C6                        767 00140$:
                                    768 ;	assignBit
      0001C6 C2 81            [12]  769 	clr	_P0_1
                                    770 ;	assignBit
      0001C8 C2 80            [12]  771 	clr	_P0_0
                                    772 ;	assignBit
      0001CA C2 A6            [12]  773 	clr	_P2_6
                                    774 ;	assignBit
      0001CC C2 A7            [12]  775 	clr	_P2_7
                                    776 ;	assignBit
      0001CE C2 A4            [12]  777 	clr	_P2_4
                                    778 ;	Receiver.c:107: case 1:P0_1 =!P0_1;P0_0 =0;P2_6=0;up_led=1;down_led=0;break;
      0001D0 80 1D            [24]  779 	sjmp	00153$
      0001D2                        780 00141$:
      0001D2 B2 81            [12]  781 	cpl	_P0_1
                                    782 ;	assignBit
      0001D4 C2 80            [12]  783 	clr	_P0_0
                                    784 ;	assignBit
      0001D6 C2 A6            [12]  785 	clr	_P2_6
                                    786 ;	assignBit
      0001D8 D2 A7            [12]  787 	setb	_P2_7
                                    788 ;	assignBit
      0001DA C2 A4            [12]  789 	clr	_P2_4
                                    790 ;	Receiver.c:108: case 6:P0_1 =0;P0_0 =0;P2_6=!P2_6;up_led=0;down_led=1;break;
      0001DC 80 11            [24]  791 	sjmp	00153$
      0001DE                        792 00142$:
                                    793 ;	assignBit
      0001DE C2 81            [12]  794 	clr	_P0_1
                                    795 ;	assignBit
      0001E0 C2 80            [12]  796 	clr	_P0_0
      0001E2 B2 A6            [12]  797 	cpl	_P2_6
                                    798 ;	assignBit
      0001E4 C2 A7            [12]  799 	clr	_P2_7
                                    800 ;	assignBit
      0001E6 D2 A4            [12]  801 	setb	_P2_4
                                    802 ;	Receiver.c:110: }
      0001E8 80 05            [24]  803 	sjmp	00153$
      0001EA                        804 00146$:
                                    805 ;	Receiver.c:114: timerCount = 0;
      0001EA E4               [12]  806 	clr	a
      0001EB F5*02            [12]  807 	mov	_timerCount,a
      0001ED F5*03            [12]  808 	mov	(_timerCount + 1),a
      0001EF                        809 00153$:
                                    810 ;	Receiver.c:117: if((!pwr_key)&&(start))
      0001EF 20 97 34         [24]  811 	jb	_P1_7,00160$
      0001F2 E5*00            [12]  812 	mov	a,_start
      0001F4 60 30            [24]  813 	jz	00160$
                                    814 ;	Receiver.c:119: off++;
      0001F6 05*08            [12]  815 	inc	_off
      0001F8 E4               [12]  816 	clr	a
      0001F9 B5*08 02         [24]  817 	cjne	a,_off,00281$
      0001FC 05*09            [12]  818 	inc	(_off + 1)
      0001FE                        819 00281$:
                                    820 ;	Receiver.c:120: if(off>50)
      0001FE C3               [12]  821 	clr	c
      0001FF 74 32            [12]  822 	mov	a,#0x32
      000201 95*08            [12]  823 	subb	a,_off
      000203 74 80            [12]  824 	mov	a,#(0x00 ^ 0x80)
      000205 85*09 F0         [24]  825 	mov	b,(_off + 1)
      000208 63 F0 80         [24]  826 	xrl	b,#0x80
      00020B 95 F0            [12]  827 	subb	a,b
      00020D 50 1C            [24]  828 	jnc	00163$
                                    829 ;	Receiver.c:121: {pwr_out=1;
                                    830 ;	assignBit
      00020F D2 87            [12]  831 	setb	_P0_7
                                    832 ;	Receiver.c:122: pwr_led=0;P0_1 =0;P0_0 =0;P2_6=0;ac_led_up=0;ac_led_down=0;auto_led=0;
                                    833 ;	assignBit
      000211 C2 A0            [12]  834 	clr	_P2_0
                                    835 ;	assignBit
      000213 C2 81            [12]  836 	clr	_P0_1
                                    837 ;	assignBit
      000215 C2 80            [12]  838 	clr	_P0_0
                                    839 ;	assignBit
      000217 C2 A6            [12]  840 	clr	_P2_6
                                    841 ;	assignBit
      000219 C2 A2            [12]  842 	clr	_P2_2
                                    843 ;	assignBit
      00021B C2 A3            [12]  844 	clr	_P2_3
                                    845 ;	assignBit
      00021D C2 A1            [12]  846 	clr	_P2_1
                                    847 ;	Receiver.c:123: TR0 = 0;         // Start Timer 1
                                    848 ;	assignBit
      00021F C2 8C            [12]  849 	clr	_TR0
                                    850 ;	Receiver.c:124: while(!pwr_key);}
      000221                        851 00154$:
      000221 30 97 FD         [24]  852 	jnb	_P1_7,00154$
      000224 80 05            [24]  853 	sjmp	00163$
      000226                        854 00160$:
                                    855 ;	Receiver.c:127: else off=0;
      000226 E4               [12]  856 	clr	a
      000227 F5*08            [12]  857 	mov	_off,a
      000229 F5*09            [12]  858 	mov	(_off + 1),a
      00022B                        859 00163$:
                                    860 ;	Receiver.c:128: }
      00022B D0 D0            [24]  861 	pop	psw
      00022D D0 00            [24]  862 	pop	(0+0)
      00022F D0 01            [24]  863 	pop	(0+1)
      000231 D0 02            [24]  864 	pop	(0+2)
      000233 D0 03            [24]  865 	pop	(0+3)
      000235 D0 04            [24]  866 	pop	(0+4)
      000237 D0 05            [24]  867 	pop	(0+5)
      000239 D0 06            [24]  868 	pop	(0+6)
      00023B D0 07            [24]  869 	pop	(0+7)
      00023D D0 83            [24]  870 	pop	dph
      00023F D0 82            [24]  871 	pop	dpl
      000241 D0 F0            [24]  872 	pop	b
      000243 D0 E0            [24]  873 	pop	acc
      000245 D0*00            [24]  874 	pop	bits
      000247 32               [24]  875 	reti
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 'main'
                                    878 ;------------------------------------------------------------
                                    879 ;	Receiver.c:131: void main()
                                    880 ;	-----------------------------------------
                                    881 ;	 function main
                                    882 ;	-----------------------------------------
      000248                        883 _main:
                                    884 ;	Receiver.c:133: state=20;
      000248 75*06 14         [24]  885 	mov	_state,#0x14
      00024B 75*07 00         [24]  886 	mov	(_state + 1),#0x00
                                    887 ;	Receiver.c:134: pwr_out=0;
                                    888 ;	assignBit
      00024E C2 87            [12]  889 	clr	_P0_7
                                    890 ;	Receiver.c:135: InitTimer0();
      000250 12r04r49         [24]  891 	lcall	_InitTimer0
                                    892 ;	Receiver.c:136: EA=1;
                                    893 ;	assignBit
      000253 D2 AF            [12]  894 	setb	_EA
                                    895 ;	Receiver.c:137: startup();
      000255 12r02r69         [24]  896 	lcall	_startup
                                    897 ;	Receiver.c:138: start=1;
      000258 75*00 01         [24]  898 	mov	_start,#0x01
                                    899 ;	Receiver.c:139: UART_Init();
      00025B 12r02rF1         [24]  900 	lcall	_UART_Init
                                    901 ;	Receiver.c:140: handshake();
      00025E 12r03r06         [24]  902 	lcall	_handshake
                                    903 ;	Receiver.c:141: while(1)
      000261                        904 00102$:
                                    905 ;	Receiver.c:143: check_ac();
      000261 12r04r57         [24]  906 	lcall	_check_ac
                                    907 ;	Receiver.c:144: check_data();
      000264 12r03r49         [24]  908 	lcall	_check_data
                                    909 ;	Receiver.c:146: } //main
      000267 80 F8            [24]  910 	sjmp	00102$
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'startup'
                                    913 ;------------------------------------------------------------
                                    914 ;	Receiver.c:149: void startup()
                                    915 ;	-----------------------------------------
                                    916 ;	 function startup
                                    917 ;	-----------------------------------------
      000269                        918 _startup:
                                    919 ;	Receiver.c:151: P0=0x00;
      000269 75 80 00         [24]  920 	mov	_P0,#0x00
                                    921 ;	Receiver.c:152: P2=0x00;
      00026C 75 A0 00         [24]  922 	mov	_P2,#0x00
                                    923 ;	Receiver.c:154: pwr_key=1;
                                    924 ;	assignBit
      00026F D2 97            [12]  925 	setb	_P1_7
                                    926 ;	Receiver.c:155: dim_key=1;
                                    927 ;	assignBit
      000271 D2 94            [12]  928 	setb	_P1_4
                                    929 ;	Receiver.c:156: ac_key=1;
                                    930 ;	assignBit
      000273 D2 93            [12]  931 	setb	_P1_3
                                    932 ;	Receiver.c:157: auto_key=1;
                                    933 ;	assignBit
      000275 D2 92            [12]  934 	setb	_P1_2
                                    935 ;	Receiver.c:159: pwr_out=0;
                                    936 ;	assignBit
      000277 C2 87            [12]  937 	clr	_P0_7
                                    938 ;	Receiver.c:160: rst_out=0;
                                    939 ;	assignBit
      000279 C2 96            [12]  940 	clr	_P1_6
                                    941 ;	Receiver.c:162: pwr_led=0;
                                    942 ;	assignBit
      00027B C2 A0            [12]  943 	clr	_P2_0
                                    944 ;	Receiver.c:163: auto_led=0;
                                    945 ;	assignBit
      00027D C2 A1            [12]  946 	clr	_P2_1
                                    947 ;	Receiver.c:164: ac_led_up=0;
                                    948 ;	assignBit
      00027F C2 A2            [12]  949 	clr	_P2_2
                                    950 ;	Receiver.c:165: ac_led_down=0;
                                    951 ;	assignBit
      000281 C2 A3            [12]  952 	clr	_P2_3
                                    953 ;	Receiver.c:166: up_led=0;
                                    954 ;	assignBit
      000283 C2 A7            [12]  955 	clr	_P2_7
                                    956 ;	Receiver.c:167: down_led=0;
                                    957 ;	assignBit
      000285 C2 A4            [12]  958 	clr	_P2_4
                                    959 ;	Receiver.c:169: pwr_led=1;
                                    960 ;	assignBit
      000287 D2 A0            [12]  961 	setb	_P2_0
                                    962 ;	Receiver.c:170: auto_led=0;
                                    963 ;	assignBit
      000289 C2 A1            [12]  964 	clr	_P2_1
                                    965 ;	Receiver.c:171: ac_led_up=1;ac_led_down=0;
                                    966 ;	assignBit
      00028B D2 A2            [12]  967 	setb	_P2_2
                                    968 ;	assignBit
      00028D C2 A3            [12]  969 	clr	_P2_3
                                    970 ;	Receiver.c:172: auto_flag = 0;
                                    971 ;	assignBit
      00028F C2*00            [12]  972 	clr	_auto_flag
                                    973 ;	Receiver.c:174: P0_1 =1;P0_0 =1;P2_6=1;
                                    974 ;	assignBit
      000291 D2 81            [12]  975 	setb	_P0_1
                                    976 ;	assignBit
      000293 D2 80            [12]  977 	setb	_P0_0
                                    978 ;	assignBit
      000295 D2 A6            [12]  979 	setb	_P2_6
                                    980 ;	Receiver.c:175: delay();delay();
      000297 12r02rC8         [24]  981 	lcall	_delay
      00029A 12r02rC8         [24]  982 	lcall	_delay
                                    983 ;	Receiver.c:176: P0_1 =0;P0_0 =0;P2_6=1;
                                    984 ;	assignBit
      00029D C2 81            [12]  985 	clr	_P0_1
                                    986 ;	assignBit
      00029F C2 80            [12]  987 	clr	_P0_0
                                    988 ;	assignBit
      0002A1 D2 A6            [12]  989 	setb	_P2_6
                                    990 ;	Receiver.c:177: delay();delay();
      0002A3 12r02rC8         [24]  991 	lcall	_delay
      0002A6 12r02rC8         [24]  992 	lcall	_delay
                                    993 ;	Receiver.c:178: P0_1 =0;P0_0 =1;P2_6=0;
                                    994 ;	assignBit
      0002A9 C2 81            [12]  995 	clr	_P0_1
                                    996 ;	assignBit
      0002AB D2 80            [12]  997 	setb	_P0_0
                                    998 ;	assignBit
      0002AD C2 A6            [12]  999 	clr	_P2_6
                                   1000 ;	Receiver.c:179: delay();delay();
      0002AF 12r02rC8         [24] 1001 	lcall	_delay
      0002B2 12r02rC8         [24] 1002 	lcall	_delay
                                   1003 ;	Receiver.c:180: P0_1 =1;P0_0 =0;P2_6=0;
                                   1004 ;	assignBit
      0002B5 D2 81            [12] 1005 	setb	_P0_1
                                   1006 ;	assignBit
      0002B7 C2 80            [12] 1007 	clr	_P0_0
                                   1008 ;	assignBit
      0002B9 C2 A6            [12] 1009 	clr	_P2_6
                                   1010 ;	Receiver.c:181: delay();delay();
      0002BB 12r02rC8         [24] 1011 	lcall	_delay
      0002BE 12r02rC8         [24] 1012 	lcall	_delay
                                   1013 ;	Receiver.c:182: P0_1 =0;P0_0 =0;P2_6=0;
                                   1014 ;	assignBit
      0002C1 C2 81            [12] 1015 	clr	_P0_1
                                   1016 ;	assignBit
      0002C3 C2 80            [12] 1017 	clr	_P0_0
                                   1018 ;	assignBit
      0002C5 C2 A6            [12] 1019 	clr	_P2_6
                                   1020 ;	Receiver.c:183: }
      0002C7 22               [24] 1021 	ret
                                   1022 ;------------------------------------------------------------
                                   1023 ;Allocation info for local variables in function 'delay'
                                   1024 ;------------------------------------------------------------
                                   1025 ;i                         Allocated to registers r6 r7 
                                   1026 ;j                         Allocated to registers r4 r5 
                                   1027 ;------------------------------------------------------------
                                   1028 ;	Receiver.c:185: void delay()
                                   1029 ;	-----------------------------------------
                                   1030 ;	 function delay
                                   1031 ;	-----------------------------------------
      0002C8                       1032 _delay:
                                   1033 ;	Receiver.c:188: for(i=0;i<0x33;i++)
      0002C8 7E 00            [12] 1034 	mov	r6,#0x00
      0002CA 7F 00            [12] 1035 	mov	r7,#0x00
      0002CC                       1036 00106$:
                                   1037 ;	Receiver.c:189: for(j=0;j<0xff;j++);
      0002CC 7C FF            [12] 1038 	mov	r4,#0xff
      0002CE 7D 00            [12] 1039 	mov	r5,#0x00
      0002D0                       1040 00105$:
      0002D0 EC               [12] 1041 	mov	a,r4
      0002D1 24 FF            [12] 1042 	add	a,#0xff
      0002D3 FA               [12] 1043 	mov	r2,a
      0002D4 ED               [12] 1044 	mov	a,r5
      0002D5 34 FF            [12] 1045 	addc	a,#0xff
      0002D7 FB               [12] 1046 	mov	r3,a
      0002D8 8A 04            [24] 1047 	mov	ar4,r2
      0002DA 8B 05            [24] 1048 	mov	ar5,r3
      0002DC EA               [12] 1049 	mov	a,r2
      0002DD 4B               [12] 1050 	orl	a,r3
      0002DE 70 F0            [24] 1051 	jnz	00105$
                                   1052 ;	Receiver.c:188: for(i=0;i<0x33;i++)
      0002E0 0E               [12] 1053 	inc	r6
      0002E1 BE 00 01         [24] 1054 	cjne	r6,#0x00,00124$
      0002E4 0F               [12] 1055 	inc	r7
      0002E5                       1056 00124$:
      0002E5 C3               [12] 1057 	clr	c
      0002E6 EE               [12] 1058 	mov	a,r6
      0002E7 94 33            [12] 1059 	subb	a,#0x33
      0002E9 EF               [12] 1060 	mov	a,r7
      0002EA 64 80            [12] 1061 	xrl	a,#0x80
      0002EC 94 80            [12] 1062 	subb	a,#0x80
      0002EE 40 DC            [24] 1063 	jc	00106$
                                   1064 ;	Receiver.c:190: }
      0002F0 22               [24] 1065 	ret
                                   1066 ;------------------------------------------------------------
                                   1067 ;Allocation info for local variables in function 'UART_Init'
                                   1068 ;------------------------------------------------------------
                                   1069 ;	Receiver.c:193: void UART_Init()
                                   1070 ;	-----------------------------------------
                                   1071 ;	 function UART_Init
                                   1072 ;	-----------------------------------------
      0002F1                       1073 _UART_Init:
                                   1074 ;	Receiver.c:195: TMOD = 0x20;		/* Timer 1, 8-bit auto reload mode */
      0002F1 75 89 20         [24] 1075 	mov	_TMOD,#0x20
                                   1076 ;	Receiver.c:196: TH1 = 0xFD;		/* Load value for 9600 baud rate */
      0002F4 75 8D FD         [24] 1077 	mov	_TH1,#0xfd
                                   1078 ;	Receiver.c:197: SCON = 0x50;		/* Mode 1, reception enable */
      0002F7 75 98 50         [24] 1079 	mov	_SCON,#0x50
                                   1080 ;	Receiver.c:198: TR1 = 1;		/* Start timer 1 */
                                   1081 ;	assignBit
      0002FA D2 8E            [12] 1082 	setb	_TR1
                                   1083 ;	Receiver.c:199: }
      0002FC 22               [24] 1084 	ret
                                   1085 ;------------------------------------------------------------
                                   1086 ;Allocation info for local variables in function 'Transmit_data'
                                   1087 ;------------------------------------------------------------
                                   1088 ;tx_data                   Allocated to registers 
                                   1089 ;------------------------------------------------------------
                                   1090 ;	Receiver.c:202: void Transmit_data(char tx_data)
                                   1091 ;	-----------------------------------------
                                   1092 ;	 function Transmit_data
                                   1093 ;	-----------------------------------------
      0002FD                       1094 _Transmit_data:
      0002FD 85 82 99         [24] 1095 	mov	_SBUF,dpl
                                   1096 ;	Receiver.c:205: while (TI==0);		/* Wait until stop bit transmit */
      000300                       1097 00101$:
                                   1098 ;	Receiver.c:206: TI = 0;			/* Clear TI flag */
                                   1099 ;	assignBit
      000300 10 99 02         [24] 1100 	jbc	_TI,00114$
      000303 80 FB            [24] 1101 	sjmp	00101$
      000305                       1102 00114$:
                                   1103 ;	Receiver.c:207: }
      000305 22               [24] 1104 	ret
                                   1105 ;------------------------------------------------------------
                                   1106 ;Allocation info for local variables in function 'handshake'
                                   1107 ;------------------------------------------------------------
                                   1108 ;	Receiver.c:210: void handshake()
                                   1109 ;	-----------------------------------------
                                   1110 ;	 function handshake
                                   1111 ;	-----------------------------------------
      000306                       1112 _handshake:
                                   1113 ;	Receiver.c:212: while(data_r!='y')
      000306                       1114 00103$:
      000306 74 79            [12] 1115 	mov	a,#0x79
      000308 B5*01 02         [24] 1116 	cjne	a,_data_r,00120$
      00030B 80 33            [24] 1117 	sjmp	00105$
      00030D                       1118 00120$:
                                   1119 ;	Receiver.c:214: Transmit_data('x');
      00030D 75 82 78         [24] 1120 	mov	dpl,#0x78
      000310 12r02rFD         [24] 1121 	lcall	_Transmit_data
                                   1122 ;	Receiver.c:215: state=20;
      000313 75*06 14         [24] 1123 	mov	_state,#0x14
      000316 75*07 00         [24] 1124 	mov	(_state + 1),#0x00
                                   1125 ;	Receiver.c:216: data_r=SBUF;
      000319 85 99*01         [24] 1126 	mov	_data_r,_SBUF
                                   1127 ;	Receiver.c:217: delay();
      00031C 12r02rC8         [24] 1128 	lcall	_delay
                                   1129 ;	Receiver.c:218: delay();
      00031F 12r02rC8         [24] 1130 	lcall	_delay
                                   1131 ;	Receiver.c:219: delay();
      000322 12r02rC8         [24] 1132 	lcall	_delay
                                   1133 ;	Receiver.c:220: delay();
      000325 12r02rC8         [24] 1134 	lcall	_delay
                                   1135 ;	Receiver.c:221: if(timerCount>10000)timerCount=0;
      000328 C3               [12] 1136 	clr	c
      000329 74 10            [12] 1137 	mov	a,#0x10
      00032B 95*02            [12] 1138 	subb	a,_timerCount
      00032D 74 A7            [12] 1139 	mov	a,#(0x27 ^ 0x80)
      00032F 85*03 F0         [24] 1140 	mov	b,(_timerCount + 1)
      000332 63 F0 80         [24] 1141 	xrl	b,#0x80
      000335 95 F0            [12] 1142 	subb	a,b
      000337 50 CD            [24] 1143 	jnc	00103$
      000339 E4               [12] 1144 	clr	a
      00033A F5*02            [12] 1145 	mov	_timerCount,a
      00033C F5*03            [12] 1146 	mov	(_timerCount + 1),a
      00033E 80 C6            [24] 1147 	sjmp	00103$
      000340                       1148 00105$:
                                   1149 ;	Receiver.c:223: delay();
      000340 12r02rC8         [24] 1150 	lcall	_delay
                                   1151 ;	Receiver.c:224: Transmit_data('m');
      000343 75 82 6D         [24] 1152 	mov	dpl,#0x6d
                                   1153 ;	Receiver.c:225: }
      000346 02r02rFD         [24] 1154 	ljmp	_Transmit_data
                                   1155 ;------------------------------------------------------------
                                   1156 ;Allocation info for local variables in function 'check_data'
                                   1157 ;------------------------------------------------------------
                                   1158 ;	Receiver.c:227: void check_data()
                                   1159 ;	-----------------------------------------
                                   1160 ;	 function check_data
                                   1161 ;	-----------------------------------------
      000349                       1162 _check_data:
                                   1163 ;	Receiver.c:230: data_r = SBUF;		/* Load char in SBUF register */
      000349 85 99*01         [24] 1164 	mov	_data_r,_SBUF
                                   1165 ;	Receiver.c:231: RI = 0;			/* Clear TI flag */
                                   1166 ;	assignBit
      00034C C2 98            [12] 1167 	clr	_RI
                                   1168 ;	Receiver.c:232: if(data_r=='l')
      00034E 74 6C            [12] 1169 	mov	a,#0x6c
      000350 B5*01 0D         [24] 1170 	cjne	a,_data_r,00149$
                                   1171 ;	Receiver.c:234: time_delay=20;
      000353 75*04 14         [24] 1172 	mov	_time_delay,#0x14
                                   1173 ;	Receiver.c:235: state = 0;
      000356 E4               [12] 1174 	clr	a
      000357 F5*05            [12] 1175 	mov	(_time_delay + 1),a
      000359 F5*06            [12] 1176 	mov	_state,a
      00035B F5*07            [12] 1177 	mov	(_state + 1),a
                                   1178 ;	Receiver.c:236: auto_led=0;
                                   1179 ;	assignBit
      00035D C2 A1            [12] 1180 	clr	_P2_1
      00035F 22               [24] 1181 	ret
      000360                       1182 00149$:
                                   1183 ;	Receiver.c:238: else if(data_r=='a')
      000360 74 61            [12] 1184 	mov	a,#0x61
      000362 B5*01 13         [24] 1185 	cjne	a,_data_r,00146$
                                   1186 ;	Receiver.c:240: time_delay=20;
      000365 75*04 14         [24] 1187 	mov	_time_delay,#0x14
      000368 75*05 00         [24] 1188 	mov	(_time_delay + 1),#0x00
                                   1189 ;	Receiver.c:241: state = 1;
      00036B 75*06 01         [24] 1190 	mov	_state,#0x01
      00036E 75*07 00         [24] 1191 	mov	(_state + 1),#0x00
                                   1192 ;	Receiver.c:242: if(auto_flag)	auto_led=1;
      000371 20*00 01         [24] 1193 	jb	_auto_flag,00237$
      000374 22               [24] 1194 	ret
      000375                       1195 00237$:
                                   1196 ;	assignBit
      000375 D2 A1            [12] 1197 	setb	_P2_1
      000377 22               [24] 1198 	ret
      000378                       1199 00146$:
                                   1200 ;	Receiver.c:244: else if(data_r=='b')
      000378 74 62            [12] 1201 	mov	a,#0x62
      00037A B5*01 13         [24] 1202 	cjne	a,_data_r,00143$
                                   1203 ;	Receiver.c:246: time_delay=10;
      00037D 75*04 0A         [24] 1204 	mov	_time_delay,#0x0a
      000380 75*05 00         [24] 1205 	mov	(_time_delay + 1),#0x00
                                   1206 ;	Receiver.c:247: state = 2;
      000383 75*06 02         [24] 1207 	mov	_state,#0x02
      000386 75*07 00         [24] 1208 	mov	(_state + 1),#0x00
                                   1209 ;	Receiver.c:248: if(auto_flag)	auto_led=1;
      000389 20*00 01         [24] 1210 	jb	_auto_flag,00240$
      00038C 22               [24] 1211 	ret
      00038D                       1212 00240$:
                                   1213 ;	assignBit
      00038D D2 A1            [12] 1214 	setb	_P2_1
      00038F 22               [24] 1215 	ret
      000390                       1216 00143$:
                                   1217 ;	Receiver.c:250: else if(data_r=='c')
      000390 74 63            [12] 1218 	mov	a,#0x63
      000392 B5*01 13         [24] 1219 	cjne	a,_data_r,00140$
                                   1220 ;	Receiver.c:252: time_delay=7;
      000395 75*04 07         [24] 1221 	mov	_time_delay,#0x07
      000398 75*05 00         [24] 1222 	mov	(_time_delay + 1),#0x00
                                   1223 ;	Receiver.c:253: state = 3;
      00039B 75*06 03         [24] 1224 	mov	_state,#0x03
      00039E 75*07 00         [24] 1225 	mov	(_state + 1),#0x00
                                   1226 ;	Receiver.c:254: if(auto_flag)	auto_led=1;
      0003A1 20*00 01         [24] 1227 	jb	_auto_flag,00243$
      0003A4 22               [24] 1228 	ret
      0003A5                       1229 00243$:
                                   1230 ;	assignBit
      0003A5 D2 A1            [12] 1231 	setb	_P2_1
      0003A7 22               [24] 1232 	ret
      0003A8                       1233 00140$:
                                   1234 ;	Receiver.c:256: else if(data_r=='d')
      0003A8 74 64            [12] 1235 	mov	a,#0x64
      0003AA B5*01 13         [24] 1236 	cjne	a,_data_r,00137$
                                   1237 ;	Receiver.c:258: time_delay=7;
      0003AD 75*04 07         [24] 1238 	mov	_time_delay,#0x07
      0003B0 75*05 00         [24] 1239 	mov	(_time_delay + 1),#0x00
                                   1240 ;	Receiver.c:259: state = 7;
      0003B3 75*06 07         [24] 1241 	mov	_state,#0x07
      0003B6 75*07 00         [24] 1242 	mov	(_state + 1),#0x00
                                   1243 ;	Receiver.c:260: if(auto_flag)	auto_led=1;
      0003B9 20*00 01         [24] 1244 	jb	_auto_flag,00246$
      0003BC 22               [24] 1245 	ret
      0003BD                       1246 00246$:
                                   1247 ;	assignBit
      0003BD D2 A1            [12] 1248 	setb	_P2_1
      0003BF 22               [24] 1249 	ret
      0003C0                       1250 00137$:
                                   1251 ;	Receiver.c:262: else if(data_r=='e')
      0003C0 74 65            [12] 1252 	mov	a,#0x65
      0003C2 B5*01 13         [24] 1253 	cjne	a,_data_r,00134$
                                   1254 ;	Receiver.c:264: time_delay=7;
      0003C5 75*04 07         [24] 1255 	mov	_time_delay,#0x07
      0003C8 75*05 00         [24] 1256 	mov	(_time_delay + 1),#0x00
                                   1257 ;	Receiver.c:265: state = 4;
      0003CB 75*06 04         [24] 1258 	mov	_state,#0x04
      0003CE 75*07 00         [24] 1259 	mov	(_state + 1),#0x00
                                   1260 ;	Receiver.c:266: if(auto_flag)	auto_led=1;
      0003D1 20*00 01         [24] 1261 	jb	_auto_flag,00249$
      0003D4 22               [24] 1262 	ret
      0003D5                       1263 00249$:
                                   1264 ;	assignBit
      0003D5 D2 A1            [12] 1265 	setb	_P2_1
      0003D7 22               [24] 1266 	ret
      0003D8                       1267 00134$:
                                   1268 ;	Receiver.c:268: else if(data_r=='f')
      0003D8 74 66            [12] 1269 	mov	a,#0x66
      0003DA B5*01 12         [24] 1270 	cjne	a,_data_r,00131$
                                   1271 ;	Receiver.c:270: time_delay=10;
      0003DD 75*04 0A         [24] 1272 	mov	_time_delay,#0x0a
      0003E0 75*05 00         [24] 1273 	mov	(_time_delay + 1),#0x00
                                   1274 ;	Receiver.c:271: state = 5;
      0003E3 75*06 05         [24] 1275 	mov	_state,#0x05
      0003E6 75*07 00         [24] 1276 	mov	(_state + 1),#0x00
                                   1277 ;	Receiver.c:272: if(auto_flag)	auto_led=1;
      0003E9 30*00 5C         [24] 1278 	jnb	_auto_flag,00151$
                                   1279 ;	assignBit
      0003EC D2 A1            [12] 1280 	setb	_P2_1
      0003EE 22               [24] 1281 	ret
      0003EF                       1282 00131$:
                                   1283 ;	Receiver.c:274: else if(data_r=='g')
      0003EF 74 67            [12] 1284 	mov	a,#0x67
      0003F1 B5*01 12         [24] 1285 	cjne	a,_data_r,00128$
                                   1286 ;	Receiver.c:276: time_delay=15;
      0003F4 75*04 0F         [24] 1287 	mov	_time_delay,#0x0f
      0003F7 75*05 00         [24] 1288 	mov	(_time_delay + 1),#0x00
                                   1289 ;	Receiver.c:277: state = 6;
      0003FA 75*06 06         [24] 1290 	mov	_state,#0x06
      0003FD 75*07 00         [24] 1291 	mov	(_state + 1),#0x00
                                   1292 ;	Receiver.c:278: if(auto_flag)	auto_led=1;
      000400 30*00 45         [24] 1293 	jnb	_auto_flag,00151$
                                   1294 ;	assignBit
      000403 D2 A1            [12] 1295 	setb	_P2_1
      000405 22               [24] 1296 	ret
      000406                       1297 00128$:
                                   1298 ;	Receiver.c:280: else if(data_r=='u')
      000406 74 75            [12] 1299 	mov	a,#0x75
      000408 B5*01 12         [24] 1300 	cjne	a,_data_r,00125$
                                   1301 ;	Receiver.c:282: time_delay=8;
      00040B 75*04 08         [24] 1302 	mov	_time_delay,#0x08
      00040E 75*05 00         [24] 1303 	mov	(_time_delay + 1),#0x00
                                   1304 ;	Receiver.c:283: state = 9;
      000411 75*06 09         [24] 1305 	mov	_state,#0x09
      000414 75*07 00         [24] 1306 	mov	(_state + 1),#0x00
                                   1307 ;	Receiver.c:284: if(auto_flag)	auto_led=1;
      000417 30*00 2E         [24] 1308 	jnb	_auto_flag,00151$
                                   1309 ;	assignBit
      00041A D2 A1            [12] 1310 	setb	_P2_1
      00041C 22               [24] 1311 	ret
      00041D                       1312 00125$:
                                   1313 ;	Receiver.c:286: else if(data_r=='n')
      00041D 74 6E            [12] 1314 	mov	a,#0x6e
      00041F B5*01 12         [24] 1315 	cjne	a,_data_r,00122$
                                   1316 ;	Receiver.c:288: time_delay=8;
      000422 75*04 08         [24] 1317 	mov	_time_delay,#0x08
      000425 75*05 00         [24] 1318 	mov	(_time_delay + 1),#0x00
                                   1319 ;	Receiver.c:289: state = 8;
      000428 75*06 08         [24] 1320 	mov	_state,#0x08
      00042B 75*07 00         [24] 1321 	mov	(_state + 1),#0x00
                                   1322 ;	Receiver.c:290: if(auto_flag)	auto_led=1;
      00042E 30*00 17         [24] 1323 	jnb	_auto_flag,00151$
                                   1324 ;	assignBit
      000431 D2 A1            [12] 1325 	setb	_P2_1
      000433 22               [24] 1326 	ret
      000434                       1327 00122$:
                                   1328 ;	Receiver.c:293: if(timerCount>1200)handshake();}
      000434 C3               [12] 1329 	clr	c
      000435 74 B0            [12] 1330 	mov	a,#0xb0
      000437 95*02            [12] 1331 	subb	a,_timerCount
      000439 74 84            [12] 1332 	mov	a,#(0x04 ^ 0x80)
      00043B 85*03 F0         [24] 1333 	mov	b,(_timerCount + 1)
      00043E 63 F0 80         [24] 1334 	xrl	b,#0x80
      000441 95 F0            [12] 1335 	subb	a,b
      000443 50 03            [24] 1336 	jnc	00151$
                                   1337 ;	Receiver.c:294: }
      000445 02r03r06         [24] 1338 	ljmp	_handshake
      000448                       1339 00151$:
      000448 22               [24] 1340 	ret
                                   1341 ;------------------------------------------------------------
                                   1342 ;Allocation info for local variables in function 'InitTimer0'
                                   1343 ;------------------------------------------------------------
                                   1344 ;	Receiver.c:296: void InitTimer0(void)
                                   1345 ;	-----------------------------------------
                                   1346 ;	 function InitTimer0
                                   1347 ;	-----------------------------------------
      000449                       1348 _InitTimer0:
                                   1349 ;	Receiver.c:298: TMOD |= 0x01;    // Set timer0 in mode 1
      000449 43 89 01         [24] 1350 	orl	_TMOD,#0x01
                                   1351 ;	Receiver.c:299: TH0 = 0xee;      // 5 msec reloading time
      00044C 75 8C EE         [24] 1352 	mov	_TH0,#0xee
                                   1353 ;	Receiver.c:300: TL0 = 0x00;      // First time value
      00044F 75 8A 00         [24] 1354 	mov	_TL0,#0x00
                                   1355 ;	Receiver.c:301: TR0 = 1;         // Start Timer 1
                                   1356 ;	assignBit
      000452 D2 8C            [12] 1357 	setb	_TR0
                                   1358 ;	Receiver.c:302: ET0 = 1;         // Enable Timer1 interrupts	
                                   1359 ;	assignBit
      000454 D2 A9            [12] 1360 	setb	_ET0
                                   1361 ;	Receiver.c:303: }
      000456 22               [24] 1362 	ret
                                   1363 ;------------------------------------------------------------
                                   1364 ;Allocation info for local variables in function 'check_ac'
                                   1365 ;------------------------------------------------------------
                                   1366 ;	Receiver.c:305: void check_ac()
                                   1367 ;	-----------------------------------------
                                   1368 ;	 function check_ac
                                   1369 ;	-----------------------------------------
      000457                       1370 _check_ac:
                                   1371 ;	Receiver.c:307: if(!ac_key)
      000457 20 93 49         [24] 1372 	jb	_P1_3,00109$
                                   1373 ;	Receiver.c:309: ac_state++;		
      00045A 05*0A            [12] 1374 	inc	_ac_state
                                   1375 ;	Receiver.c:310: if(ac_state==3)
      00045C 74 03            [12] 1376 	mov	a,#0x03
      00045E B5*0A 03         [24] 1377 	cjne	a,_ac_state,00102$
                                   1378 ;	Receiver.c:311: ac_state=0;
      000461 75*0A 00         [24] 1379 	mov	_ac_state,#0x00
      000464                       1380 00102$:
                                   1381 ;	Receiver.c:312: switch(ac_state)
      000464 E4               [12] 1382 	clr	a
      000465 B5*0A 02         [24] 1383 	cjne	a,_ac_state,00141$
      000468 80 0E            [24] 1384 	sjmp	00103$
      00046A                       1385 00141$:
      00046A 74 01            [12] 1386 	mov	a,#0x01
      00046C B5*0A 02         [24] 1387 	cjne	a,_ac_state,00142$
      00046F 80 16            [24] 1388 	sjmp	00104$
      000471                       1389 00142$:
      000471 74 02            [12] 1390 	mov	a,#0x02
                                   1391 ;	Receiver.c:314: case 0:Transmit_data('l');ac_led_up=1;ac_led_down=1;delay();break;
      000473 B5*0A 2D         [24] 1392 	cjne	a,_ac_state,00109$
      000476 80 1E            [24] 1393 	sjmp	00105$
      000478                       1394 00103$:
      000478 75 82 6C         [24] 1395 	mov	dpl,#0x6c
      00047B 12r02rFD         [24] 1396 	lcall	_Transmit_data
                                   1397 ;	assignBit
      00047E D2 A2            [12] 1398 	setb	_P2_2
                                   1399 ;	assignBit
      000480 D2 A3            [12] 1400 	setb	_P2_3
      000482 12r02rC8         [24] 1401 	lcall	_delay
                                   1402 ;	Receiver.c:315: case 1:Transmit_data('m');ac_led_up=1;ac_led_down=0;delay();break;
      000485 80 1C            [24] 1403 	sjmp	00109$
      000487                       1404 00104$:
      000487 75 82 6D         [24] 1405 	mov	dpl,#0x6d
      00048A 12r02rFD         [24] 1406 	lcall	_Transmit_data
                                   1407 ;	assignBit
      00048D D2 A2            [12] 1408 	setb	_P2_2
                                   1409 ;	assignBit
      00048F C2 A3            [12] 1410 	clr	_P2_3
      000491 12r02rC8         [24] 1411 	lcall	_delay
                                   1412 ;	Receiver.c:316: case 2:Transmit_data('h');ac_led_up=0;ac_led_down=1;delay();break;
      000494 80 0D            [24] 1413 	sjmp	00109$
      000496                       1414 00105$:
      000496 75 82 68         [24] 1415 	mov	dpl,#0x68
      000499 12r02rFD         [24] 1416 	lcall	_Transmit_data
                                   1417 ;	assignBit
      00049C C2 A2            [12] 1418 	clr	_P2_2
                                   1419 ;	assignBit
      00049E D2 A3            [12] 1420 	setb	_P2_3
      0004A0 12r02rC8         [24] 1421 	lcall	_delay
                                   1422 ;	Receiver.c:318: }//switch end
      0004A3                       1423 00109$:
                                   1424 ;	Receiver.c:321: if(!dim_key)
      0004A3 A2 94            [12] 1425 	mov	c,_P1_4
                                   1426 ;	Receiver.c:326: if(!auto_key)
      0004A5 20 92 05         [24] 1427 	jb	_P1_2,00112$
                                   1428 ;	Receiver.c:328: delay();
      0004A8 12r02rC8         [24] 1429 	lcall	_delay
                                   1430 ;	Receiver.c:329: auto_flag=!auto_flag;
      0004AB B2*00            [12] 1431 	cpl	_auto_flag
      0004AD                       1432 00112$:
                                   1433 ;	Receiver.c:331: }
      0004AD 22               [24] 1434 	ret
                                   1435 	.area CSEG    (CODE)
                                   1436 	.area CONST   (CODE)
                                   1437 	.area XINIT   (CODE)
                                   1438 	.area CABS    (ABS,CODE)
