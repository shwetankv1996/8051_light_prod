                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.4 #11418 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module Receiver
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _timer1_ISR
                                     13 	.globl _isr_timer0
                                     14 	.globl _serial_isr
                                     15 	.globl _TF2
                                     16 	.globl _EXF2
                                     17 	.globl _RCLK
                                     18 	.globl _TCLK
                                     19 	.globl _EXEN2
                                     20 	.globl _TR2
                                     21 	.globl _C_T2
                                     22 	.globl _CP_RL2
                                     23 	.globl _T2CON_7
                                     24 	.globl _T2CON_6
                                     25 	.globl _T2CON_5
                                     26 	.globl _T2CON_4
                                     27 	.globl _T2CON_3
                                     28 	.globl _T2CON_2
                                     29 	.globl _T2CON_1
                                     30 	.globl _T2CON_0
                                     31 	.globl _PT2
                                     32 	.globl _ET2
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _PS
                                     42 	.globl _PT1
                                     43 	.globl _PX1
                                     44 	.globl _PT0
                                     45 	.globl _PX0
                                     46 	.globl _RD
                                     47 	.globl _WR
                                     48 	.globl _T1
                                     49 	.globl _T0
                                     50 	.globl _INT1
                                     51 	.globl _INT0
                                     52 	.globl _TXD
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _EA
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _P1_7
                                     85 	.globl _P1_6
                                     86 	.globl _P1_5
                                     87 	.globl _P1_4
                                     88 	.globl _P1_3
                                     89 	.globl _P1_2
                                     90 	.globl _P1_1
                                     91 	.globl _P1_0
                                     92 	.globl _TF1
                                     93 	.globl _TR1
                                     94 	.globl _TF0
                                     95 	.globl _TR0
                                     96 	.globl _IE1
                                     97 	.globl _IT1
                                     98 	.globl _IE0
                                     99 	.globl _IT0
                                    100 	.globl _P0_7
                                    101 	.globl _P0_6
                                    102 	.globl _P0_5
                                    103 	.globl _P0_4
                                    104 	.globl _P0_3
                                    105 	.globl _P0_2
                                    106 	.globl _P0_1
                                    107 	.globl _P0_0
                                    108 	.globl _TH2
                                    109 	.globl _TL2
                                    110 	.globl _RCAP2H
                                    111 	.globl _RCAP2L
                                    112 	.globl _T2CON
                                    113 	.globl _B
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _auto_flag
                                    135 	.globl _ac_state
                                    136 	.globl _off
                                    137 	.globl _state
                                    138 	.globl _dim1_val2
                                    139 	.globl _dim1_val
                                    140 	.globl _dim_val2
                                    141 	.globl _dim_val
                                    142 	.globl _time_delay
                                    143 	.globl _timerCount2
                                    144 	.globl _serialCount
                                    145 	.globl _timerCount
                                    146 	.globl _data_r
                                    147 	.globl _start
                                    148 	.globl _startup
                                    149 	.globl _delay
                                    150 	.globl _UART_Init
                                    151 	.globl _Transmit_data
                                    152 	.globl _handshake
                                    153 	.globl _check_data
                                    154 	.globl _InitTimer0
                                    155 	.globl _check_switches
                                    156 ;--------------------------------------------------------
                                    157 ; special function registers
                                    158 ;--------------------------------------------------------
                                    159 	.area RSEG    (ABS,DATA)
      000000                        160 	.org 0x0000
                           000080   161 _P0	=	0x0080
                           000081   162 _SP	=	0x0081
                           000082   163 _DPL	=	0x0082
                           000083   164 _DPH	=	0x0083
                           000087   165 _PCON	=	0x0087
                           000088   166 _TCON	=	0x0088
                           000089   167 _TMOD	=	0x0089
                           00008A   168 _TL0	=	0x008a
                           00008B   169 _TL1	=	0x008b
                           00008C   170 _TH0	=	0x008c
                           00008D   171 _TH1	=	0x008d
                           000090   172 _P1	=	0x0090
                           000098   173 _SCON	=	0x0098
                           000099   174 _SBUF	=	0x0099
                           0000A0   175 _P2	=	0x00a0
                           0000A8   176 _IE	=	0x00a8
                           0000B0   177 _P3	=	0x00b0
                           0000B8   178 _IP	=	0x00b8
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 _ACC	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                           0000C8   182 _T2CON	=	0x00c8
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                                    187 ;--------------------------------------------------------
                                    188 ; special function bits
                                    189 ;--------------------------------------------------------
                                    190 	.area RSEG    (ABS,DATA)
      000000                        191 	.org 0x0000
                           000080   192 _P0_0	=	0x0080
                           000081   193 _P0_1	=	0x0081
                           000082   194 _P0_2	=	0x0082
                           000083   195 _P0_3	=	0x0083
                           000084   196 _P0_4	=	0x0084
                           000085   197 _P0_5	=	0x0085
                           000086   198 _P0_6	=	0x0086
                           000087   199 _P0_7	=	0x0087
                           000088   200 _IT0	=	0x0088
                           000089   201 _IE0	=	0x0089
                           00008A   202 _IT1	=	0x008a
                           00008B   203 _IE1	=	0x008b
                           00008C   204 _TR0	=	0x008c
                           00008D   205 _TF0	=	0x008d
                           00008E   206 _TR1	=	0x008e
                           00008F   207 _TF1	=	0x008f
                           000090   208 _P1_0	=	0x0090
                           000091   209 _P1_1	=	0x0091
                           000092   210 _P1_2	=	0x0092
                           000093   211 _P1_3	=	0x0093
                           000094   212 _P1_4	=	0x0094
                           000095   213 _P1_5	=	0x0095
                           000096   214 _P1_6	=	0x0096
                           000097   215 _P1_7	=	0x0097
                           000098   216 _RI	=	0x0098
                           000099   217 _TI	=	0x0099
                           00009A   218 _RB8	=	0x009a
                           00009B   219 _TB8	=	0x009b
                           00009C   220 _REN	=	0x009c
                           00009D   221 _SM2	=	0x009d
                           00009E   222 _SM1	=	0x009e
                           00009F   223 _SM0	=	0x009f
                           0000A0   224 _P2_0	=	0x00a0
                           0000A1   225 _P2_1	=	0x00a1
                           0000A2   226 _P2_2	=	0x00a2
                           0000A3   227 _P2_3	=	0x00a3
                           0000A4   228 _P2_4	=	0x00a4
                           0000A5   229 _P2_5	=	0x00a5
                           0000A6   230 _P2_6	=	0x00a6
                           0000A7   231 _P2_7	=	0x00a7
                           0000A8   232 _EX0	=	0x00a8
                           0000A9   233 _ET0	=	0x00a9
                           0000AA   234 _EX1	=	0x00aa
                           0000AB   235 _ET1	=	0x00ab
                           0000AC   236 _ES	=	0x00ac
                           0000AF   237 _EA	=	0x00af
                           0000B0   238 _P3_0	=	0x00b0
                           0000B1   239 _P3_1	=	0x00b1
                           0000B2   240 _P3_2	=	0x00b2
                           0000B3   241 _P3_3	=	0x00b3
                           0000B4   242 _P3_4	=	0x00b4
                           0000B5   243 _P3_5	=	0x00b5
                           0000B6   244 _P3_6	=	0x00b6
                           0000B7   245 _P3_7	=	0x00b7
                           0000B0   246 _RXD	=	0x00b0
                           0000B1   247 _TXD	=	0x00b1
                           0000B2   248 _INT0	=	0x00b2
                           0000B3   249 _INT1	=	0x00b3
                           0000B4   250 _T0	=	0x00b4
                           0000B5   251 _T1	=	0x00b5
                           0000B6   252 _WR	=	0x00b6
                           0000B7   253 _RD	=	0x00b7
                           0000B8   254 _PX0	=	0x00b8
                           0000B9   255 _PT0	=	0x00b9
                           0000BA   256 _PX1	=	0x00ba
                           0000BB   257 _PT1	=	0x00bb
                           0000BC   258 _PS	=	0x00bc
                           0000D0   259 _P	=	0x00d0
                           0000D1   260 _F1	=	0x00d1
                           0000D2   261 _OV	=	0x00d2
                           0000D3   262 _RS0	=	0x00d3
                           0000D4   263 _RS1	=	0x00d4
                           0000D5   264 _F0	=	0x00d5
                           0000D6   265 _AC	=	0x00d6
                           0000D7   266 _CY	=	0x00d7
                           0000AD   267 _ET2	=	0x00ad
                           0000BD   268 _PT2	=	0x00bd
                           0000C8   269 _T2CON_0	=	0x00c8
                           0000C9   270 _T2CON_1	=	0x00c9
                           0000CA   271 _T2CON_2	=	0x00ca
                           0000CB   272 _T2CON_3	=	0x00cb
                           0000CC   273 _T2CON_4	=	0x00cc
                           0000CD   274 _T2CON_5	=	0x00cd
                           0000CE   275 _T2CON_6	=	0x00ce
                           0000CF   276 _T2CON_7	=	0x00cf
                           0000C8   277 _CP_RL2	=	0x00c8
                           0000C9   278 _C_T2	=	0x00c9
                           0000CA   279 _TR2	=	0x00ca
                           0000CB   280 _EXEN2	=	0x00cb
                           0000CC   281 _TCLK	=	0x00cc
                           0000CD   282 _RCLK	=	0x00cd
                           0000CE   283 _EXF2	=	0x00ce
                           0000CF   284 _TF2	=	0x00cf
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable register banks
                                    287 ;--------------------------------------------------------
                                    288 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        289 	.ds 8
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable bit register bank
                                    292 ;--------------------------------------------------------
                                    293 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        294 bits:
      000000                        295 	.ds 1
                           008000   296 	b0 = bits[0]
                           008100   297 	b1 = bits[1]
                           008200   298 	b2 = bits[2]
                           008300   299 	b3 = bits[3]
                           008400   300 	b4 = bits[4]
                           008500   301 	b5 = bits[5]
                           008600   302 	b6 = bits[6]
                           008700   303 	b7 = bits[7]
                                    304 ;--------------------------------------------------------
                                    305 ; internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area DSEG    (DATA)
      000000                        308 _start::
      000000                        309 	.ds 1
      000001                        310 _data_r::
      000001                        311 	.ds 1
      000002                        312 _timerCount::
      000002                        313 	.ds 2
      000004                        314 _serialCount::
      000004                        315 	.ds 2
      000006                        316 _timerCount2::
      000006                        317 	.ds 2
      000008                        318 _time_delay::
      000008                        319 	.ds 2
      00000A                        320 _dim_val::
      00000A                        321 	.ds 2
      00000C                        322 _dim_val2::
      00000C                        323 	.ds 2
      00000E                        324 _dim1_val::
      00000E                        325 	.ds 2
      000010                        326 _dim1_val2::
      000010                        327 	.ds 2
      000012                        328 _state::
      000012                        329 	.ds 2
      000014                        330 _off::
      000014                        331 	.ds 2
      000016                        332 _ac_state::
      000016                        333 	.ds 1
                                    334 ;--------------------------------------------------------
                                    335 ; overlayable items in internal ram 
                                    336 ;--------------------------------------------------------
                                    337 	.area	OSEG    (OVR,DATA)
                                    338 	.area	OSEG    (OVR,DATA)
                                    339 ;--------------------------------------------------------
                                    340 ; Stack segment in internal ram 
                                    341 ;--------------------------------------------------------
                                    342 	.area	SSEG
      000000                        343 __start__stack:
      000000                        344 	.ds	1
                                    345 
                                    346 ;--------------------------------------------------------
                                    347 ; indirectly addressable internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area ISEG    (DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; absolute internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area IABS    (ABS,DATA)
                                    354 	.area IABS    (ABS,DATA)
                                    355 ;--------------------------------------------------------
                                    356 ; bit data
                                    357 ;--------------------------------------------------------
                                    358 	.area BSEG    (BIT)
      000000                        359 _auto_flag::
      000000                        360 	.ds 1
                                    361 ;--------------------------------------------------------
                                    362 ; paged external ram data
                                    363 ;--------------------------------------------------------
                                    364 	.area PSEG    (PAG,XDATA)
                                    365 ;--------------------------------------------------------
                                    366 ; external ram data
                                    367 ;--------------------------------------------------------
                                    368 	.area XSEG    (XDATA)
                                    369 ;--------------------------------------------------------
                                    370 ; absolute external ram data
                                    371 ;--------------------------------------------------------
                                    372 	.area XABS    (ABS,XDATA)
                                    373 ;--------------------------------------------------------
                                    374 ; external initialized ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XISEG   (XDATA)
                                    377 	.area HOME    (CODE)
                                    378 	.area GSINIT0 (CODE)
                                    379 	.area GSINIT1 (CODE)
                                    380 	.area GSINIT2 (CODE)
                                    381 	.area GSINIT3 (CODE)
                                    382 	.area GSINIT4 (CODE)
                                    383 	.area GSINIT5 (CODE)
                                    384 	.area GSINIT  (CODE)
                                    385 	.area GSFINAL (CODE)
                                    386 	.area CSEG    (CODE)
                                    387 ;--------------------------------------------------------
                                    388 ; interrupt vector 
                                    389 ;--------------------------------------------------------
                                    390 	.area HOME    (CODE)
      000000                        391 __interrupt_vect:
      000000 02r00r00         [24]  392 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  393 	reti
      000004                        394 	.ds	7
      00000B 02r00r29         [24]  395 	ljmp	_isr_timer0
      00000E                        396 	.ds	5
      000013 32               [24]  397 	reti
      000014                        398 	.ds	7
      00001B 32               [24]  399 	reti
      00001C                        400 	.ds	7
      000023 02r00r00         [24]  401 	ljmp	_serial_isr
      000026                        402 	.ds	5
      00002B 02r02r54         [24]  403 	ljmp	_timer1_ISR
                                    404 ;--------------------------------------------------------
                                    405 ; global & static initialisations
                                    406 ;--------------------------------------------------------
                                    407 	.area HOME    (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.area GSFINAL (CODE)
                                    410 	.area GSINIT  (CODE)
                                    411 	.globl __sdcc_gsinit_startup
                                    412 	.globl __sdcc_program_startup
                                    413 	.globl __start__stack
                                    414 	.globl __mcs51_genXINIT
                                    415 	.globl __mcs51_genXRAMCLEAR
                                    416 	.globl __mcs51_genRAMCLEAR
                                    417 ;	Receiver.c:40: char start=0;
      000000 75*00 00         [24]  418 	mov	_start,#0x00
                                    419 ;	Receiver.c:42: volatile int timerCount = 0;
      000003 E4               [12]  420 	clr	a
      000004 F5*02            [12]  421 	mov	_timerCount,a
      000006 F5*03            [12]  422 	mov	(_timerCount + 1),a
                                    423 ;	Receiver.c:43: volatile int serialCount = 0;
      000008 F5*04            [12]  424 	mov	_serialCount,a
      00000A F5*05            [12]  425 	mov	(_serialCount + 1),a
                                    426 ;	Receiver.c:44: volatile int timerCount2 = 0;
      00000C F5*06            [12]  427 	mov	_timerCount2,a
      00000E F5*07            [12]  428 	mov	(_timerCount2 + 1),a
                                    429 ;	Receiver.c:45: volatile int time_delay = 15;
      000010 75*08 0F         [24]  430 	mov	_time_delay,#0x0f
                                    431 ;	1-genFromRTrack replaced	mov	(_time_delay + 1),#0x00
      000013 F5*09            [12]  432 	mov	(_time_delay + 1),a
                                    433 ;	Receiver.c:46: volatile int dim_val = 1;
      000015 75*0A 01         [24]  434 	mov	_dim_val,#0x01
                                    435 ;	1-genFromRTrack replaced	mov	(_dim_val + 1),#0x00
      000018 F5*0B            [12]  436 	mov	(_dim_val + 1),a
                                    437 ;	Receiver.c:47: volatile int dim_val2 = 50;
      00001A 75*0C 32         [24]  438 	mov	_dim_val2,#0x32
                                    439 ;	1-genFromRTrack replaced	mov	(_dim_val2 + 1),#0x00
      00001D F5*0D            [12]  440 	mov	(_dim_val2 + 1),a
                                    441 ;	Receiver.c:48: volatile int dim1_val = 1;
      00001F 75*0E 01         [24]  442 	mov	_dim1_val,#0x01
                                    443 ;	1-genFromRTrack replaced	mov	(_dim1_val + 1),#0x00
      000022 F5*0F            [12]  444 	mov	(_dim1_val + 1),a
                                    445 ;	Receiver.c:49: volatile int dim1_val2 = 50;
      000024 75*10 32         [24]  446 	mov	_dim1_val2,#0x32
                                    447 ;	1-genFromRTrack replaced	mov	(_dim1_val2 + 1),#0x00
      000027 F5*11            [12]  448 	mov	(_dim1_val2 + 1),a
                                    449 	.area GSFINAL (CODE)
      000000 02r00r2E         [24]  450 	ljmp	__sdcc_program_startup
                                    451 ;--------------------------------------------------------
                                    452 ; Home
                                    453 ;--------------------------------------------------------
                                    454 	.area HOME    (CODE)
                                    455 	.area HOME    (CODE)
      00002E                        456 __sdcc_program_startup:
      00002E 02r04rB2         [24]  457 	ljmp	_main
                                    458 ;	return from main will return to caller
                                    459 ;--------------------------------------------------------
                                    460 ; code
                                    461 ;--------------------------------------------------------
                                    462 	.area CSEG    (CODE)
                                    463 ;------------------------------------------------------------
                                    464 ;Allocation info for local variables in function 'serial_isr'
                                    465 ;------------------------------------------------------------
                                    466 ;	Receiver.c:54: void serial_isr() __interrupt 4 
                                    467 ;	-----------------------------------------
                                    468 ;	 function serial_isr
                                    469 ;	-----------------------------------------
      000000                        470 _serial_isr:
                           000007   471 	ar7 = 0x07
                           000006   472 	ar6 = 0x06
                           000005   473 	ar5 = 0x05
                           000004   474 	ar4 = 0x04
                           000003   475 	ar3 = 0x03
                           000002   476 	ar2 = 0x02
                           000001   477 	ar1 = 0x01
                           000000   478 	ar0 = 0x00
      000000 C0 E0            [24]  479 	push	acc
      000002 C0 D0            [24]  480 	push	psw
                                    481 ;	Receiver.c:56: if(RI == 1)
      000004 30 98 18         [24]  482 	jnb	_RI,00108$
                                    483 ;	Receiver.c:58: data_r = SBUF; // Copy the received char
      000007 85 99*01         [24]  484 	mov	_data_r,_SBUF
                                    485 ;	Receiver.c:59: RI = 0;              // Clear the Receive interrupt flag
                                    486 ;	assignBit
      00000A C2 98            [12]  487 	clr	_RI
                                    488 ;	Receiver.c:60: if(data_r!='y')serialCount=0;
      00000C 74 79            [12]  489 	mov	a,#0x79
      00000E B5*01 02         [24]  490 	cjne	a,_data_r,00129$
      000011 80 05            [24]  491 	sjmp	00102$
      000013                        492 00129$:
      000013 E4               [12]  493 	clr	a
      000014 F5*04            [12]  494 	mov	_serialCount,a
      000016 F5*05            [12]  495 	mov	(_serialCount + 1),a
      000018                        496 00102$:
                                    497 ;	Receiver.c:61: if(auto_flag)auto_led=1;
      000018 30*00 09         [24]  498 	jnb	_auto_flag,00110$
                                    499 ;	assignBit
      00001B D2 A1            [12]  500 	setb	_P2_1
      00001D 80 05            [24]  501 	sjmp	00110$
      00001F                        502 00108$:
                                    503 ;	Receiver.c:63: else if(TI == 1)
                                    504 ;	Receiver.c:65: TI = 0;              // Clear the Transmit interrupt flag
                                    505 ;	assignBit
      00001F 10 99 02         [24]  506 	jbc	_TI,00131$
      000022 80 00            [24]  507 	sjmp	00110$
      000024                        508 00131$:
      000024                        509 00110$:
                                    510 ;	Receiver.c:67: }
      000024 D0 D0            [24]  511 	pop	psw
      000026 D0 E0            [24]  512 	pop	acc
      000028 32               [24]  513 	reti
                                    514 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    515 ;	eliminated unneeded push/pop dpl
                                    516 ;	eliminated unneeded push/pop dph
                                    517 ;	eliminated unneeded push/pop b
                                    518 ;------------------------------------------------------------
                                    519 ;Allocation info for local variables in function 'isr_timer0'
                                    520 ;------------------------------------------------------------
                                    521 ;	Receiver.c:69: void isr_timer0(void) __interrupt 1   // It is called after every 5msec
                                    522 ;	-----------------------------------------
                                    523 ;	 function isr_timer0
                                    524 ;	-----------------------------------------
      000029                        525 _isr_timer0:
      000029 C0*00            [24]  526 	push	bits
      00002B C0 E0            [24]  527 	push	acc
      00002D C0 F0            [24]  528 	push	b
      00002F C0 82            [24]  529 	push	dpl
      000031 C0 83            [24]  530 	push	dph
      000033 C0 07            [24]  531 	push	(0+7)
      000035 C0 06            [24]  532 	push	(0+6)
      000037 C0 05            [24]  533 	push	(0+5)
      000039 C0 04            [24]  534 	push	(0+4)
      00003B C0 03            [24]  535 	push	(0+3)
      00003D C0 02            [24]  536 	push	(0+2)
      00003F C0 01            [24]  537 	push	(0+1)
      000041 C0 00            [24]  538 	push	(0+0)
      000043 C0 D0            [24]  539 	push	psw
      000045 75 D0 00         [24]  540 	mov	psw,#0x00
                                    541 ;	Receiver.c:71: TH0  = 0Xee;         // ReLoad the timer value for 5ms
      000048 75 8C EE         [24]  542 	mov	_TH0,#0xee
                                    543 ;	Receiver.c:72: TL0  = 0X00;
      00004B 75 8A 00         [24]  544 	mov	_TL0,#0x00
                                    545 ;	Receiver.c:73: timerCount++;
      00004E AE*02            [24]  546 	mov	r6,_timerCount
      000050 AF*03            [24]  547 	mov	r7,(_timerCount + 1)
      000052 74 01            [12]  548 	mov	a,#0x01
      000054 2E               [12]  549 	add	a,r6
      000055 F5*02            [12]  550 	mov	_timerCount,a
      000057 E4               [12]  551 	clr	a
      000058 3F               [12]  552 	addc	a,r7
      000059 F5*03            [12]  553 	mov	(_timerCount + 1),a
                                    554 ;	Receiver.c:75: if(state!=20)
      00005B 74 14            [12]  555 	mov	a,#0x14
      00005D B5*12 07         [24]  556 	cjne	a,_state,00240$
      000060 E4               [12]  557 	clr	a
      000061 B5*13 03         [24]  558 	cjne	a,(_state + 1),00240$
      000064 02r02r37         [24]  559 	ljmp	00158$
      000067                        560 00240$:
                                    561 ;	Receiver.c:77: if(timerCount < (time_delay*30)) // count for LED-ON delay
      000067 85*08*00         [24]  562 	mov	__mulint_PARM_2,_time_delay
      00006A 85*09*01         [24]  563 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      00006D 90 00 1E         [24]  564 	mov	dptr,#0x001e
      000070 12r00r00         [24]  565 	lcall	__mulint
      000073 AE 82            [24]  566 	mov	r6,dpl
      000075 AF 83            [24]  567 	mov	r7,dph
      000077 C3               [12]  568 	clr	c
      000078 E5*02            [12]  569 	mov	a,_timerCount
      00007A 9E               [12]  570 	subb	a,r6
      00007B E5*03            [12]  571 	mov	a,(_timerCount + 1)
      00007D 64 80            [12]  572 	xrl	a,#0x80
      00007F 8F F0            [24]  573 	mov	b,r7
      000081 63 F0 80         [24]  574 	xrl	b,#0x80
      000084 95 F0            [12]  575 	subb	a,b
      000086 40 03            [24]  576 	jc	00241$
      000088 02r01r81         [24]  577 	ljmp	00154$
      00008B                        578 00241$:
                                    579 ;	Receiver.c:79: switch(state)
      00008B E5*13            [12]  580 	mov	a,(_state + 1)
      00008D 30 E7 03         [24]  581 	jnb	acc.7,00242$
      000090 02r02r37         [24]  582 	ljmp	00158$
      000093                        583 00242$:
      000093 C3               [12]  584 	clr	c
      000094 74 09            [12]  585 	mov	a,#0x09
      000096 95*12            [12]  586 	subb	a,_state
      000098 74 80            [12]  587 	mov	a,#(0x00 ^ 0x80)
      00009A 85*13 F0         [24]  588 	mov	b,(_state + 1)
      00009D 63 F0 80         [24]  589 	xrl	b,#0x80
      0000A0 95 F0            [12]  590 	subb	a,b
      0000A2 50 03            [24]  591 	jnc	00243$
      0000A4 02r02r37         [24]  592 	ljmp	00158$
      0000A7                        593 00243$:
      0000A7 E5*12            [12]  594 	mov	a,_state
      0000A9 24 0B            [12]  595 	add	a,#(00244$-3-.)
      0000AB 83               [24]  596 	movc	a,@a+pc
      0000AC F5 82            [12]  597 	mov	dpl,a
      0000AE E5*12            [12]  598 	mov	a,_state
      0000B0 24 0E            [12]  599 	add	a,#(00245$-3-.)
      0000B2 83               [24]  600 	movc	a,@a+pc
      0000B3 F5 83            [12]  601 	mov	dph,a
      0000B5 E4               [12]  602 	clr	a
      0000B6 73               [24]  603 	jmp	@a+dptr
      0000B7                        604 00244$:
      0000B7rCB                     605 	.db	00101$
      0000B8rE4                     606 	.db	00104$
      0000B9rF7                     607 	.db	00107$
      0000BAr08                     608 	.db	00110$
      0000BBr19                     609 	.db	00113$
      0000BCr2A                     610 	.db	00116$
      0000BDr3B                     611 	.db	00119$
      0000BEr4E                     612 	.db	00122$
      0000BFr57                     613 	.db	00123$
      0000C0r6C                     614 	.db	00126$
      0000C1                        615 00245$:
      0000C1s00                     616 	.db	00101$>>8
      0000C2s00                     617 	.db	00104$>>8
      0000C3s00                     618 	.db	00107$>>8
      0000C4s01                     619 	.db	00110$>>8
      0000C5s01                     620 	.db	00113$>>8
      0000C6s01                     621 	.db	00116$>>8
      0000C7s01                     622 	.db	00119$>>8
      0000C8s01                     623 	.db	00122$>>8
      0000C9s01                     624 	.db	00123$>>8
      0000CAs01                     625 	.db	00126$>>8
                                    626 ;	Receiver.c:81: case 0:up_led_main =1;center_led =0;down_led_main=1;									
      0000CB                        627 00101$:
                                    628 ;	assignBit
      0000CB D2 81            [12]  629 	setb	_P0_1
                                    630 ;	assignBit
      0000CD C2 80            [12]  631 	clr	_P0_0
                                    632 ;	assignBit
      0000CF D2 A6            [12]  633 	setb	_P2_6
                                    634 ;	Receiver.c:82: up_led=0;down_led=0;main_out1=1;main_out2=1;
                                    635 ;	assignBit
      0000D1 C2 A7            [12]  636 	clr	_P2_7
                                    637 ;	assignBit
      0000D3 C2 A4            [12]  638 	clr	_P2_4
                                    639 ;	assignBit
      0000D5 D2 B6            [12]  640 	setb	_P3_6
                                    641 ;	assignBit
      0000D7 D2 B7            [12]  642 	setb	_P3_7
                                    643 ;	Receiver.c:83: if(auto_flag)auto_led=1;
      0000D9 20*00 03         [24]  644 	jb	_auto_flag,00246$
      0000DC 02r02r37         [24]  645 	ljmp	00158$
      0000DF                        646 00246$:
                                    647 ;	assignBit
      0000DF D2 A1            [12]  648 	setb	_P2_1
                                    649 ;	Receiver.c:84: break;	
      0000E1 02r02r37         [24]  650 	ljmp	00158$
                                    651 ;	Receiver.c:85: case 1:up_led_main =1;center_led =0;down_led_main=0;
      0000E4                        652 00104$:
                                    653 ;	assignBit
      0000E4 D2 81            [12]  654 	setb	_P0_1
                                    655 ;	assignBit
      0000E6 C2 80            [12]  656 	clr	_P0_0
                                    657 ;	assignBit
      0000E8 C2 A6            [12]  658 	clr	_P2_6
                                    659 ;	Receiver.c:86: if(auto_flag)
      0000EA 20*00 03         [24]  660 	jb	_auto_flag,00247$
      0000ED 02r02r37         [24]  661 	ljmp	00158$
      0000F0                        662 00247$:
                                    663 ;	Receiver.c:87: {main_out1=0;up_led=1;}
                                    664 ;	assignBit
      0000F0 C2 B6            [12]  665 	clr	_P3_6
                                    666 ;	assignBit
      0000F2 D2 A7            [12]  667 	setb	_P2_7
                                    668 ;	Receiver.c:88: break;
      0000F4 02r02r37         [24]  669 	ljmp	00158$
                                    670 ;	Receiver.c:89: case 2:up_led_main =1;center_led =0;down_led_main=0;
      0000F7                        671 00107$:
                                    672 ;	assignBit
      0000F7 D2 81            [12]  673 	setb	_P0_1
                                    674 ;	assignBit
      0000F9 C2 80            [12]  675 	clr	_P0_0
                                    676 ;	assignBit
      0000FB C2 A6            [12]  677 	clr	_P2_6
                                    678 ;	Receiver.c:91: if(auto_flag)
      0000FD 20*00 03         [24]  679 	jb	_auto_flag,00248$
      000100 02r02r37         [24]  680 	ljmp	00158$
      000103                        681 00248$:
                                    682 ;	Receiver.c:93: up_led=1;}
                                    683 ;	assignBit
      000103 D2 A7            [12]  684 	setb	_P2_7
                                    685 ;	Receiver.c:94: break;
      000105 02r02r37         [24]  686 	ljmp	00158$
                                    687 ;	Receiver.c:95: case 3:up_led_main =1;center_led =1;down_led_main=0;
      000108                        688 00110$:
                                    689 ;	assignBit
      000108 D2 81            [12]  690 	setb	_P0_1
                                    691 ;	assignBit
      00010A D2 80            [12]  692 	setb	_P0_0
                                    693 ;	assignBit
      00010C C2 A6            [12]  694 	clr	_P2_6
                                    695 ;	Receiver.c:97: if(auto_flag)
      00010E 20*00 03         [24]  696 	jb	_auto_flag,00249$
      000111 02r02r37         [24]  697 	ljmp	00158$
      000114                        698 00249$:
                                    699 ;	Receiver.c:99: up_led=1;}
                                    700 ;	assignBit
      000114 D2 A7            [12]  701 	setb	_P2_7
                                    702 ;	Receiver.c:100: break;
      000116 02r02r37         [24]  703 	ljmp	00158$
                                    704 ;	Receiver.c:101: case 4:	up_led_main =0;center_led =1;down_led_main=1;
      000119                        705 00113$:
                                    706 ;	assignBit
      000119 C2 81            [12]  707 	clr	_P0_1
                                    708 ;	assignBit
      00011B D2 80            [12]  709 	setb	_P0_0
                                    710 ;	assignBit
      00011D D2 A6            [12]  711 	setb	_P2_6
                                    712 ;	Receiver.c:102: if(auto_flag)
      00011F 20*00 03         [24]  713 	jb	_auto_flag,00250$
      000122 02r02r37         [24]  714 	ljmp	00158$
      000125                        715 00250$:
                                    716 ;	Receiver.c:104: down_led=1;}
                                    717 ;	assignBit
      000125 D2 A4            [12]  718 	setb	_P2_4
                                    719 ;	Receiver.c:105: break;
      000127 02r02r37         [24]  720 	ljmp	00158$
                                    721 ;	Receiver.c:106: case 5:up_led_main =0;center_led =0;down_led_main=1;
      00012A                        722 00116$:
                                    723 ;	assignBit
      00012A C2 81            [12]  724 	clr	_P0_1
                                    725 ;	assignBit
      00012C C2 80            [12]  726 	clr	_P0_0
                                    727 ;	assignBit
      00012E D2 A6            [12]  728 	setb	_P2_6
                                    729 ;	Receiver.c:108: if(auto_flag)
      000130 20*00 03         [24]  730 	jb	_auto_flag,00251$
      000133 02r02r37         [24]  731 	ljmp	00158$
      000136                        732 00251$:
                                    733 ;	Receiver.c:110: down_led=1;}
                                    734 ;	assignBit
      000136 D2 A4            [12]  735 	setb	_P2_4
                                    736 ;	Receiver.c:111: break;
      000138 02r02r37         [24]  737 	ljmp	00158$
                                    738 ;	Receiver.c:112: case 6:	up_led_main =0;center_led =0;down_led_main=1;		
      00013B                        739 00119$:
                                    740 ;	assignBit
      00013B C2 81            [12]  741 	clr	_P0_1
                                    742 ;	assignBit
      00013D C2 80            [12]  743 	clr	_P0_0
                                    744 ;	assignBit
      00013F D2 A6            [12]  745 	setb	_P2_6
                                    746 ;	Receiver.c:113: if(auto_flag)
      000141 20*00 03         [24]  747 	jb	_auto_flag,00252$
      000144 02r02r37         [24]  748 	ljmp	00158$
      000147                        749 00252$:
                                    750 ;	Receiver.c:114: {main_out2=0;down_led=1;}
                                    751 ;	assignBit
      000147 C2 B7            [12]  752 	clr	_P3_7
                                    753 ;	assignBit
      000149 D2 A4            [12]  754 	setb	_P2_4
                                    755 ;	Receiver.c:115: break;
      00014B 02r02r37         [24]  756 	ljmp	00158$
                                    757 ;	Receiver.c:116: case 7:up_led_main =0;center_led =1;down_led_main=1;
      00014E                        758 00122$:
                                    759 ;	assignBit
      00014E C2 81            [12]  760 	clr	_P0_1
                                    761 ;	assignBit
      000150 D2 80            [12]  762 	setb	_P0_0
                                    763 ;	assignBit
      000152 D2 A6            [12]  764 	setb	_P2_6
                                    765 ;	Receiver.c:117: break;
      000154 02r02r37         [24]  766 	ljmp	00158$
                                    767 ;	Receiver.c:119: case 8:up_led_main =1;center_led =0;down_led_main=0;
      000157                        768 00123$:
                                    769 ;	assignBit
      000157 D2 81            [12]  770 	setb	_P0_1
                                    771 ;	assignBit
      000159 C2 80            [12]  772 	clr	_P0_0
                                    773 ;	assignBit
      00015B C2 A6            [12]  774 	clr	_P2_6
                                    775 ;	Receiver.c:120: main_out1=1;main_out2=1;
                                    776 ;	assignBit
      00015D D2 B6            [12]  777 	setb	_P3_6
                                    778 ;	assignBit
      00015F D2 B7            [12]  779 	setb	_P3_7
                                    780 ;	Receiver.c:121: if(auto_flag)
      000161 20*00 03         [24]  781 	jb	_auto_flag,00253$
      000164 02r02r37         [24]  782 	ljmp	00158$
      000167                        783 00253$:
                                    784 ;	Receiver.c:122: up_led=1;
                                    785 ;	assignBit
      000167 D2 A7            [12]  786 	setb	_P2_7
                                    787 ;	Receiver.c:123: break;
      000169 02r02r37         [24]  788 	ljmp	00158$
                                    789 ;	Receiver.c:125: case 9:	up_led_main =0;center_led =0;down_led_main=1;
      00016C                        790 00126$:
                                    791 ;	assignBit
      00016C C2 81            [12]  792 	clr	_P0_1
                                    793 ;	assignBit
      00016E C2 80            [12]  794 	clr	_P0_0
                                    795 ;	assignBit
      000170 D2 A6            [12]  796 	setb	_P2_6
                                    797 ;	Receiver.c:126: main_out1=1;main_out2=1;
                                    798 ;	assignBit
      000172 D2 B6            [12]  799 	setb	_P3_6
                                    800 ;	assignBit
      000174 D2 B7            [12]  801 	setb	_P3_7
                                    802 ;	Receiver.c:127: if(auto_flag)
      000176 20*00 03         [24]  803 	jb	_auto_flag,00254$
      000179 02r02r37         [24]  804 	ljmp	00158$
      00017C                        805 00254$:
                                    806 ;	Receiver.c:128: down_led=1;
                                    807 ;	assignBit
      00017C D2 A4            [12]  808 	setb	_P2_4
                                    809 ;	Receiver.c:129: break;
      00017E 02r02r37         [24]  810 	ljmp	00158$
                                    811 ;	Receiver.c:131: }	
      000181                        812 00154$:
                                    813 ;	Receiver.c:135: else if((timerCount > time_delay) &&(timerCount<time_delay*60)) // count for LED-ON delay
      000181 C3               [12]  814 	clr	c
      000182 E5*08            [12]  815 	mov	a,_time_delay
      000184 95*02            [12]  816 	subb	a,_timerCount
      000186 E5*09            [12]  817 	mov	a,(_time_delay + 1)
      000188 64 80            [12]  818 	xrl	a,#0x80
      00018A 85*03 F0         [24]  819 	mov	b,(_timerCount + 1)
      00018D 63 F0 80         [24]  820 	xrl	b,#0x80
      000190 95 F0            [12]  821 	subb	a,b
      000192 40 03            [24]  822 	jc	00255$
      000194 02r02r32         [24]  823 	ljmp	00150$
      000197                        824 00255$:
      000197 85*08*00         [24]  825 	mov	__mulint_PARM_2,_time_delay
      00019A 85*09*01         [24]  826 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      00019D 90 00 3C         [24]  827 	mov	dptr,#0x003c
      0001A0 12r00r00         [24]  828 	lcall	__mulint
      0001A3 AE 82            [24]  829 	mov	r6,dpl
      0001A5 AF 83            [24]  830 	mov	r7,dph
      0001A7 C3               [12]  831 	clr	c
      0001A8 E5*02            [12]  832 	mov	a,_timerCount
      0001AA 9E               [12]  833 	subb	a,r6
      0001AB E5*03            [12]  834 	mov	a,(_timerCount + 1)
      0001AD 64 80            [12]  835 	xrl	a,#0x80
      0001AF 8F F0            [24]  836 	mov	b,r7
      0001B1 63 F0 80         [24]  837 	xrl	b,#0x80
      0001B4 95 F0            [12]  838 	subb	a,b
      0001B6 40 03            [24]  839 	jc	00256$
      0001B8 02r02r32         [24]  840 	ljmp	00150$
      0001BB                        841 00256$:
                                    842 ;	Receiver.c:137: switch(state)
      0001BB E5*13            [12]  843 	mov	a,(_state + 1)
      0001BD 30 E7 03         [24]  844 	jnb	acc.7,00257$
      0001C0 02r02r37         [24]  845 	ljmp	00158$
      0001C3                        846 00257$:
      0001C3 C3               [12]  847 	clr	c
      0001C4 74 09            [12]  848 	mov	a,#0x09
      0001C6 95*12            [12]  849 	subb	a,_state
      0001C8 74 80            [12]  850 	mov	a,#(0x00 ^ 0x80)
      0001CA 85*13 F0         [24]  851 	mov	b,(_state + 1)
      0001CD 63 F0 80         [24]  852 	xrl	b,#0x80
      0001D0 95 F0            [12]  853 	subb	a,b
      0001D2 50 03            [24]  854 	jnc	00258$
      0001D4 02r02r37         [24]  855 	ljmp	00158$
      0001D7                        856 00258$:
      0001D7 E5*12            [12]  857 	mov	a,_state
      0001D9 24 0B            [12]  858 	add	a,#(00259$-3-.)
      0001DB 83               [24]  859 	movc	a,@a+pc
      0001DC F5 82            [12]  860 	mov	dpl,a
      0001DE E5*12            [12]  861 	mov	a,_state
      0001E0 24 0E            [12]  862 	add	a,#(00260$-3-.)
      0001E2 83               [24]  863 	movc	a,@a+pc
      0001E3 F5 83            [12]  864 	mov	dph,a
      0001E5 E4               [12]  865 	clr	a
      0001E6 73               [24]  866 	jmp	@a+dptr
      0001E7                        867 00259$:
      0001E7rFB                     868 	.db	00131$
      0001E8r10                     869 	.db	00141$
      0001E9r04                     870 	.db	00140$
      0001EAr04                     871 	.db	00140$
      0001EBr04                     872 	.db	00140$
      0001ECr04                     873 	.db	00140$
      0001EDr21                     874 	.db	00144$
      0001EEr04                     875 	.db	00140$
      0001EFr04                     876 	.db	00140$
      0001F0r04                     877 	.db	00140$
      0001F1                        878 00260$:
      0001F1s01                     879 	.db	00131$>>8
      0001F2s02                     880 	.db	00141$>>8
      0001F3s02                     881 	.db	00140$>>8
      0001F4s02                     882 	.db	00140$>>8
      0001F5s02                     883 	.db	00140$>>8
      0001F6s02                     884 	.db	00140$>>8
      0001F7s02                     885 	.db	00144$>>8
      0001F8s02                     886 	.db	00140$>>8
      0001F9s02                     887 	.db	00140$>>8
      0001FAs02                     888 	.db	00140$>>8
                                    889 ;	Receiver.c:139: case 0:	if(auto_flag)	{auto_led=0;main_out1=1;main_out2=1;}
      0001FB                        890 00131$:
      0001FB 30*00 06         [24]  891 	jnb	_auto_flag,00140$
                                    892 ;	assignBit
      0001FE C2 A1            [12]  893 	clr	_P2_1
                                    894 ;	assignBit
      000200 D2 B6            [12]  895 	setb	_P3_6
                                    896 ;	assignBit
      000202 D2 B7            [12]  897 	setb	_P3_7
                                    898 ;	Receiver.c:146: case 9:up_led_main =0;center_led =0;down_led_main=0;up_led=0;down_led=0;break;
      000204                        899 00140$:
                                    900 ;	assignBit
      000204 C2 81            [12]  901 	clr	_P0_1
                                    902 ;	assignBit
      000206 C2 80            [12]  903 	clr	_P0_0
                                    904 ;	assignBit
      000208 C2 A6            [12]  905 	clr	_P2_6
                                    906 ;	assignBit
      00020A C2 A7            [12]  907 	clr	_P2_7
                                    908 ;	assignBit
      00020C C2 A4            [12]  909 	clr	_P2_4
                                    910 ;	Receiver.c:147: case 1:up_led_main =1;center_led =0;down_led_main=0;
      00020E 80 27            [24]  911 	sjmp	00158$
      000210                        912 00141$:
                                    913 ;	assignBit
      000210 D2 81            [12]  914 	setb	_P0_1
                                    915 ;	assignBit
      000212 C2 80            [12]  916 	clr	_P0_0
                                    917 ;	assignBit
      000214 C2 A6            [12]  918 	clr	_P2_6
                                    919 ;	Receiver.c:148: if(auto_flag)	{main_out1=0;up_led=1;down_led=0;}break;
      000216 30*00 1E         [24]  920 	jnb	_auto_flag,00158$
                                    921 ;	assignBit
      000219 C2 B6            [12]  922 	clr	_P3_6
                                    923 ;	assignBit
      00021B D2 A7            [12]  924 	setb	_P2_7
                                    925 ;	assignBit
      00021D C2 A4            [12]  926 	clr	_P2_4
                                    927 ;	Receiver.c:150: case 6:	up_led_main =0;center_led =0;down_led_main=1;
      00021F 80 16            [24]  928 	sjmp	00158$
      000221                        929 00144$:
                                    930 ;	assignBit
      000221 C2 81            [12]  931 	clr	_P0_1
                                    932 ;	assignBit
      000223 C2 80            [12]  933 	clr	_P0_0
                                    934 ;	assignBit
      000225 D2 A6            [12]  935 	setb	_P2_6
                                    936 ;	Receiver.c:151: up_led=0;if(auto_flag){main_out2=0;down_led=1;}break;
                                    937 ;	assignBit
      000227 C2 A7            [12]  938 	clr	_P2_7
      000229 30*00 0B         [24]  939 	jnb	_auto_flag,00158$
                                    940 ;	assignBit
      00022C C2 B7            [12]  941 	clr	_P3_7
                                    942 ;	assignBit
      00022E D2 A4            [12]  943 	setb	_P2_4
                                    944 ;	Receiver.c:154: }
      000230 80 05            [24]  945 	sjmp	00158$
      000232                        946 00150$:
                                    947 ;	Receiver.c:158: {timerCount = 0;}
      000232 E4               [12]  948 	clr	a
      000233 F5*02            [12]  949 	mov	_timerCount,a
      000235 F5*03            [12]  950 	mov	(_timerCount + 1),a
      000237                        951 00158$:
                                    952 ;	Receiver.c:160: } //timer end
      000237 D0 D0            [24]  953 	pop	psw
      000239 D0 00            [24]  954 	pop	(0+0)
      00023B D0 01            [24]  955 	pop	(0+1)
      00023D D0 02            [24]  956 	pop	(0+2)
      00023F D0 03            [24]  957 	pop	(0+3)
      000241 D0 04            [24]  958 	pop	(0+4)
      000243 D0 05            [24]  959 	pop	(0+5)
      000245 D0 06            [24]  960 	pop	(0+6)
      000247 D0 07            [24]  961 	pop	(0+7)
      000249 D0 83            [24]  962 	pop	dph
      00024B D0 82            [24]  963 	pop	dpl
      00024D D0 F0            [24]  964 	pop	b
      00024F D0 E0            [24]  965 	pop	acc
      000251 D0*00            [24]  966 	pop	bits
      000253 32               [24]  967 	reti
                                    968 ;------------------------------------------------------------
                                    969 ;Allocation info for local variables in function 'timer1_ISR'
                                    970 ;------------------------------------------------------------
                                    971 ;	Receiver.c:163: void timer1_ISR (void) __interrupt 5
                                    972 ;	-----------------------------------------
                                    973 ;	 function timer1_ISR
                                    974 ;	-----------------------------------------
      000254                        975 _timer1_ISR:
      000254 C0*00            [24]  976 	push	bits
      000256 C0 E0            [24]  977 	push	acc
      000258 C0 F0            [24]  978 	push	b
      00025A C0 82            [24]  979 	push	dpl
      00025C C0 83            [24]  980 	push	dph
      00025E C0 07            [24]  981 	push	(0+7)
      000260 C0 06            [24]  982 	push	(0+6)
      000262 C0 05            [24]  983 	push	(0+5)
      000264 C0 04            [24]  984 	push	(0+4)
      000266 C0 03            [24]  985 	push	(0+3)
      000268 C0 02            [24]  986 	push	(0+2)
      00026A C0 01            [24]  987 	push	(0+1)
      00026C C0 00            [24]  988 	push	(0+0)
      00026E C0 D0            [24]  989 	push	psw
      000270 75 D0 00         [24]  990 	mov	psw,#0x00
                                    991 ;	Receiver.c:165: TF2 = 0;            /* Clear the interrupt request */
                                    992 ;	assignBit
      000273 C2 CF            [12]  993 	clr	_TF2
                                    994 ;	Receiver.c:166: timerCount2++;
      000275 AE*06            [24]  995 	mov	r6,_timerCount2
      000277 AF*07            [24]  996 	mov	r7,(_timerCount2 + 1)
      000279 74 01            [12]  997 	mov	a,#0x01
      00027B 2E               [12]  998 	add	a,r6
      00027C F5*06            [12]  999 	mov	_timerCount2,a
      00027E E4               [12] 1000 	clr	a
      00027F 3F               [12] 1001 	addc	a,r7
      000280 F5*07            [12] 1002 	mov	(_timerCount2 + 1),a
                                   1003 ;	Receiver.c:167: serialCount++;
      000282 AE*04            [24] 1004 	mov	r6,_serialCount
      000284 AF*05            [24] 1005 	mov	r7,(_serialCount + 1)
      000286 74 01            [12] 1006 	mov	a,#0x01
      000288 2E               [12] 1007 	add	a,r6
      000289 F5*04            [12] 1008 	mov	_serialCount,a
      00028B E4               [12] 1009 	clr	a
      00028C 3F               [12] 1010 	addc	a,r7
      00028D F5*05            [12] 1011 	mov	(_serialCount + 1),a
                                   1012 ;	Receiver.c:168: rst_out=!rst_out;
      00028F B2 96            [12] 1013 	cpl	_P1_6
                                   1014 ;	Receiver.c:169: if(dim1_val)
      000291 E5*0E            [12] 1015 	mov	a,_dim1_val
      000293 45*0F            [12] 1016 	orl	a,(_dim1_val + 1)
      000295 60 12            [24] 1017 	jz	00105$
                                   1018 ;	Receiver.c:170: {dim1_val--;dim_out=1;}
      000297 AE*0E            [24] 1019 	mov	r6,_dim1_val
      000299 AF*0F            [24] 1020 	mov	r7,(_dim1_val + 1)
      00029B EE               [12] 1021 	mov	a,r6
      00029C 24 FF            [12] 1022 	add	a,#0xff
      00029E F5*0E            [12] 1023 	mov	_dim1_val,a
      0002A0 EF               [12] 1024 	mov	a,r7
      0002A1 34 FF            [12] 1025 	addc	a,#0xff
      0002A3 F5*0F            [12] 1026 	mov	(_dim1_val + 1),a
                                   1027 ;	assignBit
      0002A5 D2 82            [12] 1028 	setb	_P0_2
      0002A7 80 24            [24] 1029 	sjmp	00106$
      0002A9                       1030 00105$:
                                   1031 ;	Receiver.c:172: else if(dim1_val2){dim1_val2--;dim_out=0;}
      0002A9 E5*10            [12] 1032 	mov	a,_dim1_val2
      0002AB 45*11            [12] 1033 	orl	a,(_dim1_val2 + 1)
      0002AD 60 12            [24] 1034 	jz	00102$
      0002AF AE*10            [24] 1035 	mov	r6,_dim1_val2
      0002B1 AF*11            [24] 1036 	mov	r7,(_dim1_val2 + 1)
      0002B3 EE               [12] 1037 	mov	a,r6
      0002B4 24 FF            [12] 1038 	add	a,#0xff
      0002B6 F5*10            [12] 1039 	mov	_dim1_val2,a
      0002B8 EF               [12] 1040 	mov	a,r7
      0002B9 34 FF            [12] 1041 	addc	a,#0xff
      0002BB F5*11            [12] 1042 	mov	(_dim1_val2 + 1),a
                                   1043 ;	assignBit
      0002BD C2 82            [12] 1044 	clr	_P0_2
      0002BF 80 0C            [24] 1045 	sjmp	00106$
      0002C1                       1046 00102$:
                                   1047 ;	Receiver.c:174: else {dim1_val = dim_val;dim1_val2 = dim_val2;}    
      0002C1 85*0A*0E         [24] 1048 	mov	_dim1_val,_dim_val
      0002C4 85*0B*0F         [24] 1049 	mov	(_dim1_val + 1),(_dim_val + 1)
      0002C7 85*0C*10         [24] 1050 	mov	_dim1_val2,_dim_val2
      0002CA 85*0D*11         [24] 1051 	mov	(_dim1_val2 + 1),(_dim_val2 + 1)
      0002CD                       1052 00106$:
                                   1053 ;	Receiver.c:176: if(auto_flag)
      0002CD 20*00 03         [24] 1054 	jb	_auto_flag,00245$
      0002D0 02r04r7F         [24] 1055 	ljmp	00150$
      0002D3                       1056 00245$:
                                   1057 ;	Receiver.c:178: if(timerCount2<1000)
      0002D3 C3               [12] 1058 	clr	c
      0002D4 E5*06            [12] 1059 	mov	a,_timerCount2
      0002D6 94 E8            [12] 1060 	subb	a,#0xe8
      0002D8 E5*07            [12] 1061 	mov	a,(_timerCount2 + 1)
      0002DA 64 80            [12] 1062 	xrl	a,#0x80
      0002DC 94 83            [12] 1063 	subb	a,#0x83
      0002DE 40 03            [24] 1064 	jc	00246$
      0002E0 02r03rAA         [24] 1065 	ljmp	00147$
      0002E3                       1066 00246$:
                                   1067 ;	Receiver.c:180: switch(state)
      0002E3 74 02            [12] 1068 	mov	a,#0x02
      0002E5 B5*12 06         [24] 1069 	cjne	a,_state,00247$
      0002E8 E4               [12] 1070 	clr	a
      0002E9 B5*13 02         [24] 1071 	cjne	a,(_state + 1),00247$
      0002EC 80 24            [24] 1072 	sjmp	00107$
      0002EE                       1073 00247$:
      0002EE 74 03            [12] 1074 	mov	a,#0x03
      0002F0 B5*12 06         [24] 1075 	cjne	a,_state,00248$
      0002F3 E4               [12] 1076 	clr	a
      0002F4 B5*13 02         [24] 1077 	cjne	a,(_state + 1),00248$
      0002F7 80 3F            [24] 1078 	sjmp	00111$
      0002F9                       1079 00248$:
      0002F9 74 04            [12] 1080 	mov	a,#0x04
      0002FB B5*12 06         [24] 1081 	cjne	a,_state,00249$
      0002FE E4               [12] 1082 	clr	a
      0002FF B5*13 02         [24] 1083 	cjne	a,(_state + 1),00249$
      000302 80 5A            [24] 1084 	sjmp	00115$
      000304                       1085 00249$:
      000304 74 05            [12] 1086 	mov	a,#0x05
      000306 B5*12 06         [24] 1087 	cjne	a,_state,00250$
      000309 E4               [12] 1088 	clr	a
      00030A B5*13 02         [24] 1089 	cjne	a,(_state + 1),00250$
      00030D 80 75            [24] 1090 	sjmp	00119$
      00030F                       1091 00250$:
      00030F 02r04r7F         [24] 1092 	ljmp	00150$
                                   1093 ;	Receiver.c:182: case 2:	if(timerCount2%4){main_out1=1;main_out2=1;}
      000312                       1094 00107$:
      000312 75*00 04         [24] 1095 	mov	__modsint_PARM_2,#0x04
      000315 75*01 00         [24] 1096 	mov	(__modsint_PARM_2 + 1),#0x00
      000318 85*06 82         [24] 1097 	mov	dpl,_timerCount2
      00031B 85*07 83         [24] 1098 	mov	dph,(_timerCount2 + 1)
      00031E 12r00r00         [24] 1099 	lcall	__modsint
      000321 E5 82            [12] 1100 	mov	a,dpl
      000323 85 83 F0         [24] 1101 	mov	b,dph
      000326 45 F0            [12] 1102 	orl	a,b
      000328 60 07            [24] 1103 	jz	00109$
                                   1104 ;	assignBit
      00032A D2 B6            [12] 1105 	setb	_P3_6
                                   1106 ;	assignBit
      00032C D2 B7            [12] 1107 	setb	_P3_7
      00032E 02r04r7F         [24] 1108 	ljmp	00150$
      000331                       1109 00109$:
                                   1110 ;	Receiver.c:183: else {main_out1=0;main_out2=1;}
                                   1111 ;	assignBit
      000331 C2 B6            [12] 1112 	clr	_P3_6
                                   1113 ;	assignBit
      000333 D2 B7            [12] 1114 	setb	_P3_7
                                   1115 ;	Receiver.c:184: break;
      000335 02r04r7F         [24] 1116 	ljmp	00150$
                                   1117 ;	Receiver.c:186: case 3:	if(timerCount2%4){main_out1=1;main_out2=1;}
      000338                       1118 00111$:
      000338 75*00 04         [24] 1119 	mov	__modsint_PARM_2,#0x04
      00033B 75*01 00         [24] 1120 	mov	(__modsint_PARM_2 + 1),#0x00
      00033E 85*06 82         [24] 1121 	mov	dpl,_timerCount2
      000341 85*07 83         [24] 1122 	mov	dph,(_timerCount2 + 1)
      000344 12r00r00         [24] 1123 	lcall	__modsint
      000347 E5 82            [12] 1124 	mov	a,dpl
      000349 85 83 F0         [24] 1125 	mov	b,dph
      00034C 45 F0            [12] 1126 	orl	a,b
      00034E 60 07            [24] 1127 	jz	00113$
                                   1128 ;	assignBit
      000350 D2 B6            [12] 1129 	setb	_P3_6
                                   1130 ;	assignBit
      000352 D2 B7            [12] 1131 	setb	_P3_7
      000354 02r04r7F         [24] 1132 	ljmp	00150$
      000357                       1133 00113$:
                                   1134 ;	Receiver.c:187: else {main_out1=0;main_out2=1;}
                                   1135 ;	assignBit
      000357 C2 B6            [12] 1136 	clr	_P3_6
                                   1137 ;	assignBit
      000359 D2 B7            [12] 1138 	setb	_P3_7
                                   1139 ;	Receiver.c:188: break;
      00035B 02r04r7F         [24] 1140 	ljmp	00150$
                                   1141 ;	Receiver.c:190: case 4:	if(timerCount2%4){main_out1=1;main_out2=1;}
      00035E                       1142 00115$:
      00035E 75*00 04         [24] 1143 	mov	__modsint_PARM_2,#0x04
      000361 75*01 00         [24] 1144 	mov	(__modsint_PARM_2 + 1),#0x00
      000364 85*06 82         [24] 1145 	mov	dpl,_timerCount2
      000367 85*07 83         [24] 1146 	mov	dph,(_timerCount2 + 1)
      00036A 12r00r00         [24] 1147 	lcall	__modsint
      00036D E5 82            [12] 1148 	mov	a,dpl
      00036F 85 83 F0         [24] 1149 	mov	b,dph
      000372 45 F0            [12] 1150 	orl	a,b
      000374 60 07            [24] 1151 	jz	00117$
                                   1152 ;	assignBit
      000376 D2 B6            [12] 1153 	setb	_P3_6
                                   1154 ;	assignBit
      000378 D2 B7            [12] 1155 	setb	_P3_7
      00037A 02r04r7F         [24] 1156 	ljmp	00150$
      00037D                       1157 00117$:
                                   1158 ;	Receiver.c:191: else {main_out1=1;main_out2=0;}
                                   1159 ;	assignBit
      00037D D2 B6            [12] 1160 	setb	_P3_6
                                   1161 ;	assignBit
      00037F C2 B7            [12] 1162 	clr	_P3_7
                                   1163 ;	Receiver.c:192: break;
      000381 02r04r7F         [24] 1164 	ljmp	00150$
                                   1165 ;	Receiver.c:194: case 5:	if(timerCount2%4){main_out1=1;main_out2=1;}
      000384                       1166 00119$:
      000384 75*00 04         [24] 1167 	mov	__modsint_PARM_2,#0x04
      000387 75*01 00         [24] 1168 	mov	(__modsint_PARM_2 + 1),#0x00
      00038A 85*06 82         [24] 1169 	mov	dpl,_timerCount2
      00038D 85*07 83         [24] 1170 	mov	dph,(_timerCount2 + 1)
      000390 12r00r00         [24] 1171 	lcall	__modsint
      000393 E5 82            [12] 1172 	mov	a,dpl
      000395 85 83 F0         [24] 1173 	mov	b,dph
      000398 45 F0            [12] 1174 	orl	a,b
      00039A 60 07            [24] 1175 	jz	00121$
                                   1176 ;	assignBit
      00039C D2 B6            [12] 1177 	setb	_P3_6
                                   1178 ;	assignBit
      00039E D2 B7            [12] 1179 	setb	_P3_7
      0003A0 02r04r7F         [24] 1180 	ljmp	00150$
      0003A3                       1181 00121$:
                                   1182 ;	Receiver.c:195: else {main_out1=1;main_out2=0;}
                                   1183 ;	assignBit
      0003A3 D2 B6            [12] 1184 	setb	_P3_6
                                   1185 ;	assignBit
      0003A5 C2 B7            [12] 1186 	clr	_P3_7
                                   1187 ;	Receiver.c:196: break;
      0003A7 02r04r7F         [24] 1188 	ljmp	00150$
                                   1189 ;	Receiver.c:199: }}
      0003AA                       1190 00147$:
                                   1191 ;	Receiver.c:201: else if(timerCount2<2000)
      0003AA C3               [12] 1192 	clr	c
      0003AB E5*06            [12] 1193 	mov	a,_timerCount2
      0003AD 94 D0            [12] 1194 	subb	a,#0xd0
      0003AF E5*07            [12] 1195 	mov	a,(_timerCount2 + 1)
      0003B1 64 80            [12] 1196 	xrl	a,#0x80
      0003B3 94 87            [12] 1197 	subb	a,#0x87
      0003B5 40 03            [24] 1198 	jc	00255$
      0003B7 02r04r7A         [24] 1199 	ljmp	00144$
      0003BA                       1200 00255$:
                                   1201 ;	Receiver.c:203: switch(state)
      0003BA 74 02            [12] 1202 	mov	a,#0x02
      0003BC B5*12 06         [24] 1203 	cjne	a,_state,00256$
      0003BF E4               [12] 1204 	clr	a
      0003C0 B5*13 02         [24] 1205 	cjne	a,(_state + 1),00256$
      0003C3 80 24            [24] 1206 	sjmp	00125$
      0003C5                       1207 00256$:
      0003C5 74 03            [12] 1208 	mov	a,#0x03
      0003C7 B5*12 06         [24] 1209 	cjne	a,_state,00257$
      0003CA E4               [12] 1210 	clr	a
      0003CB B5*13 02         [24] 1211 	cjne	a,(_state + 1),00257$
      0003CE 80 3E            [24] 1212 	sjmp	00129$
      0003D0                       1213 00257$:
      0003D0 74 04            [12] 1214 	mov	a,#0x04
      0003D2 B5*12 06         [24] 1215 	cjne	a,_state,00258$
      0003D5 E4               [12] 1216 	clr	a
      0003D6 B5*13 02         [24] 1217 	cjne	a,(_state + 1),00258$
      0003D9 80 57            [24] 1218 	sjmp	00133$
      0003DB                       1219 00258$:
      0003DB 74 05            [12] 1220 	mov	a,#0x05
      0003DD B5*12 06         [24] 1221 	cjne	a,_state,00259$
      0003E0 E4               [12] 1222 	clr	a
      0003E1 B5*13 02         [24] 1223 	cjne	a,(_state + 1),00259$
      0003E4 80 70            [24] 1224 	sjmp	00137$
      0003E6                       1225 00259$:
      0003E6 02r04r7F         [24] 1226 	ljmp	00150$
                                   1227 ;	Receiver.c:205: case 2:	if(timerCount2%10){main_out1=1;main_out2=1;}
      0003E9                       1228 00125$:
      0003E9 75*00 0A         [24] 1229 	mov	__modsint_PARM_2,#0x0a
      0003EC 75*01 00         [24] 1230 	mov	(__modsint_PARM_2 + 1),#0x00
      0003EF 85*06 82         [24] 1231 	mov	dpl,_timerCount2
      0003F2 85*07 83         [24] 1232 	mov	dph,(_timerCount2 + 1)
      0003F5 12r00r00         [24] 1233 	lcall	__modsint
      0003F8 E5 82            [12] 1234 	mov	a,dpl
      0003FA 85 83 F0         [24] 1235 	mov	b,dph
      0003FD 45 F0            [12] 1236 	orl	a,b
      0003FF 60 07            [24] 1237 	jz	00127$
                                   1238 ;	assignBit
      000401 D2 B6            [12] 1239 	setb	_P3_6
                                   1240 ;	assignBit
      000403 D2 B7            [12] 1241 	setb	_P3_7
      000405 02r04r7F         [24] 1242 	ljmp	00150$
      000408                       1243 00127$:
                                   1244 ;	Receiver.c:206: else {main_out1=0;main_out2=1;}
                                   1245 ;	assignBit
      000408 C2 B6            [12] 1246 	clr	_P3_6
                                   1247 ;	assignBit
      00040A D2 B7            [12] 1248 	setb	_P3_7
                                   1249 ;	Receiver.c:207: break;
                                   1250 ;	Receiver.c:209: case 3:	if(timerCount2%10){main_out1=1;main_out2=1;}
      00040C 80 71            [24] 1251 	sjmp	00150$
      00040E                       1252 00129$:
      00040E 75*00 0A         [24] 1253 	mov	__modsint_PARM_2,#0x0a
      000411 75*01 00         [24] 1254 	mov	(__modsint_PARM_2 + 1),#0x00
      000414 85*06 82         [24] 1255 	mov	dpl,_timerCount2
      000417 85*07 83         [24] 1256 	mov	dph,(_timerCount2 + 1)
      00041A 12r00r00         [24] 1257 	lcall	__modsint
      00041D E5 82            [12] 1258 	mov	a,dpl
      00041F 85 83 F0         [24] 1259 	mov	b,dph
      000422 45 F0            [12] 1260 	orl	a,b
      000424 60 06            [24] 1261 	jz	00131$
                                   1262 ;	assignBit
      000426 D2 B6            [12] 1263 	setb	_P3_6
                                   1264 ;	assignBit
      000428 D2 B7            [12] 1265 	setb	_P3_7
      00042A 80 53            [24] 1266 	sjmp	00150$
      00042C                       1267 00131$:
                                   1268 ;	Receiver.c:210: else {main_out1=0;main_out2=1;}
                                   1269 ;	assignBit
      00042C C2 B6            [12] 1270 	clr	_P3_6
                                   1271 ;	assignBit
      00042E D2 B7            [12] 1272 	setb	_P3_7
                                   1273 ;	Receiver.c:211: break;
                                   1274 ;	Receiver.c:213: case 4:	if(timerCount2%10){main_out1=1;main_out2=1;}
      000430 80 4D            [24] 1275 	sjmp	00150$
      000432                       1276 00133$:
      000432 75*00 0A         [24] 1277 	mov	__modsint_PARM_2,#0x0a
      000435 75*01 00         [24] 1278 	mov	(__modsint_PARM_2 + 1),#0x00
      000438 85*06 82         [24] 1279 	mov	dpl,_timerCount2
      00043B 85*07 83         [24] 1280 	mov	dph,(_timerCount2 + 1)
      00043E 12r00r00         [24] 1281 	lcall	__modsint
      000441 E5 82            [12] 1282 	mov	a,dpl
      000443 85 83 F0         [24] 1283 	mov	b,dph
      000446 45 F0            [12] 1284 	orl	a,b
      000448 60 06            [24] 1285 	jz	00135$
                                   1286 ;	assignBit
      00044A D2 B6            [12] 1287 	setb	_P3_6
                                   1288 ;	assignBit
      00044C D2 B7            [12] 1289 	setb	_P3_7
      00044E 80 2F            [24] 1290 	sjmp	00150$
      000450                       1291 00135$:
                                   1292 ;	Receiver.c:214: else {main_out1=1;main_out2=0;}
                                   1293 ;	assignBit
      000450 D2 B6            [12] 1294 	setb	_P3_6
                                   1295 ;	assignBit
      000452 C2 B7            [12] 1296 	clr	_P3_7
                                   1297 ;	Receiver.c:215: break;
                                   1298 ;	Receiver.c:217: case 5:	if(timerCount2%10){main_out1=1;main_out2=1;}
      000454 80 29            [24] 1299 	sjmp	00150$
      000456                       1300 00137$:
      000456 75*00 0A         [24] 1301 	mov	__modsint_PARM_2,#0x0a
      000459 75*01 00         [24] 1302 	mov	(__modsint_PARM_2 + 1),#0x00
      00045C 85*06 82         [24] 1303 	mov	dpl,_timerCount2
      00045F 85*07 83         [24] 1304 	mov	dph,(_timerCount2 + 1)
      000462 12r00r00         [24] 1305 	lcall	__modsint
      000465 E5 82            [12] 1306 	mov	a,dpl
      000467 85 83 F0         [24] 1307 	mov	b,dph
      00046A 45 F0            [12] 1308 	orl	a,b
      00046C 60 06            [24] 1309 	jz	00139$
                                   1310 ;	assignBit
      00046E D2 B6            [12] 1311 	setb	_P3_6
                                   1312 ;	assignBit
      000470 D2 B7            [12] 1313 	setb	_P3_7
      000472 80 0B            [24] 1314 	sjmp	00150$
      000474                       1315 00139$:
                                   1316 ;	Receiver.c:218: else {main_out1=1;main_out2=0;}
                                   1317 ;	assignBit
      000474 D2 B6            [12] 1318 	setb	_P3_6
                                   1319 ;	assignBit
      000476 C2 B7            [12] 1320 	clr	_P3_7
                                   1321 ;	Receiver.c:219: break;
                                   1322 ;	Receiver.c:222: }}
      000478 80 05            [24] 1323 	sjmp	00150$
      00047A                       1324 00144$:
                                   1325 ;	Receiver.c:224: else timerCount2=0;	
      00047A E4               [12] 1326 	clr	a
      00047B F5*06            [12] 1327 	mov	_timerCount2,a
      00047D F5*07            [12] 1328 	mov	(_timerCount2 + 1),a
      00047F                       1329 00150$:
                                   1330 ;	Receiver.c:228: if(timerCount2>4000)timerCount2=0;
      00047F C3               [12] 1331 	clr	c
      000480 74 A0            [12] 1332 	mov	a,#0xa0
      000482 95*06            [12] 1333 	subb	a,_timerCount2
      000484 74 8F            [12] 1334 	mov	a,#(0x0f ^ 0x80)
      000486 85*07 F0         [24] 1335 	mov	b,(_timerCount2 + 1)
      000489 63 F0 80         [24] 1336 	xrl	b,#0x80
      00048C 95 F0            [12] 1337 	subb	a,b
      00048E 50 05            [24] 1338 	jnc	00153$
      000490 E4               [12] 1339 	clr	a
      000491 F5*06            [12] 1340 	mov	_timerCount2,a
      000493 F5*07            [12] 1341 	mov	(_timerCount2 + 1),a
      000495                       1342 00153$:
                                   1343 ;	Receiver.c:230: }//end timer2
      000495 D0 D0            [24] 1344 	pop	psw
      000497 D0 00            [24] 1345 	pop	(0+0)
      000499 D0 01            [24] 1346 	pop	(0+1)
      00049B D0 02            [24] 1347 	pop	(0+2)
      00049D D0 03            [24] 1348 	pop	(0+3)
      00049F D0 04            [24] 1349 	pop	(0+4)
      0004A1 D0 05            [24] 1350 	pop	(0+5)
      0004A3 D0 06            [24] 1351 	pop	(0+6)
      0004A5 D0 07            [24] 1352 	pop	(0+7)
      0004A7 D0 83            [24] 1353 	pop	dph
      0004A9 D0 82            [24] 1354 	pop	dpl
      0004AB D0 F0            [24] 1355 	pop	b
      0004AD D0 E0            [24] 1356 	pop	acc
      0004AF D0*00            [24] 1357 	pop	bits
      0004B1 32               [24] 1358 	reti
                                   1359 ;------------------------------------------------------------
                                   1360 ;Allocation info for local variables in function 'main'
                                   1361 ;------------------------------------------------------------
                                   1362 ;	Receiver.c:234: void main()
                                   1363 ;	-----------------------------------------
                                   1364 ;	 function main
                                   1365 ;	-----------------------------------------
      0004B2                       1366 _main:
                                   1367 ;	Receiver.c:236: state=20;
      0004B2 75*12 14         [24] 1368 	mov	_state,#0x14
      0004B5 75*13 00         [24] 1369 	mov	(_state + 1),#0x00
                                   1370 ;	Receiver.c:237: pwr_out=0;
                                   1371 ;	assignBit
      0004B8 C2 87            [12] 1372 	clr	_P0_7
                                   1373 ;	Receiver.c:241: T2CON = 0x80;                /* 10000000 */
      0004BA 75 C8 80         [24] 1374 	mov	_T2CON,#0x80
                                   1375 ;	Receiver.c:246: RCAP2L = 0x18;
      0004BD 75 CA 18         [24] 1376 	mov	_RCAP2L,#0x18
                                   1377 ;	Receiver.c:247: RCAP2H = 0xFE;
      0004C0 75 CB FE         [24] 1378 	mov	_RCAP2H,#0xfe
                                   1379 ;	Receiver.c:249: TL2 = RCAP2L;
      0004C3 85 CA CC         [24] 1380 	mov	_TL2,_RCAP2L
                                   1381 ;	Receiver.c:250: TH2 = RCAP2H;
      0004C6 85 CB CD         [24] 1382 	mov	_TH2,_RCAP2H
                                   1383 ;	Receiver.c:254: ET2 = 1;                      /* Enable Timer 2 Interrupts */
                                   1384 ;	assignBit
      0004C9 D2 AD            [12] 1385 	setb	_ET2
                                   1386 ;	Receiver.c:255: TR2 = 1;                      /* Start Timer 2 Running */
                                   1387 ;	assignBit
      0004CB D2 CA            [12] 1388 	setb	_TR2
                                   1389 ;	Receiver.c:258: InitTimer0();
      0004CD 12r06rD5         [24] 1390 	lcall	_InitTimer0
                                   1391 ;	Receiver.c:259: EA=1;
                                   1392 ;	assignBit
      0004D0 D2 AF            [12] 1393 	setb	_EA
                                   1394 ;	Receiver.c:260: startup();
      0004D2 12r04rE8         [24] 1395 	lcall	_startup
                                   1396 ;	Receiver.c:261: start=1;
      0004D5 75*00 01         [24] 1397 	mov	_start,#0x01
                                   1398 ;	Receiver.c:262: UART_Init();
      0004D8 12r05r6E         [24] 1399 	lcall	_UART_Init
                                   1400 ;	Receiver.c:263: handshake();
      0004DB 12r05r81         [24] 1401 	lcall	_handshake
                                   1402 ;	Receiver.c:264: ES  = 1;      // Enable Serial INterrupt
                                   1403 ;	assignBit
      0004DE D2 AC            [12] 1404 	setb	_ES
                                   1405 ;	Receiver.c:266: while(1)
      0004E0                       1406 00102$:
                                   1407 ;	Receiver.c:268: check_switches();
      0004E0 12r06rE3         [24] 1408 	lcall	_check_switches
                                   1409 ;	Receiver.c:269: check_data();
      0004E3 12r05rAA         [24] 1410 	lcall	_check_data
                                   1411 ;	Receiver.c:271: } //main
      0004E6 80 F8            [24] 1412 	sjmp	00102$
                                   1413 ;------------------------------------------------------------
                                   1414 ;Allocation info for local variables in function 'startup'
                                   1415 ;------------------------------------------------------------
                                   1416 ;	Receiver.c:274: void startup()
                                   1417 ;	-----------------------------------------
                                   1418 ;	 function startup
                                   1419 ;	-----------------------------------------
      0004E8                       1420 _startup:
                                   1421 ;	Receiver.c:276: pwr_key=1;
                                   1422 ;	assignBit
      0004E8 D2 97            [12] 1423 	setb	_P1_7
                                   1424 ;	Receiver.c:277: dim_key=1;
                                   1425 ;	assignBit
      0004EA D2 94            [12] 1426 	setb	_P1_4
                                   1427 ;	Receiver.c:278: ac_key=1;
                                   1428 ;	assignBit
      0004EC D2 93            [12] 1429 	setb	_P1_3
                                   1430 ;	Receiver.c:279: auto_key=1;
                                   1431 ;	assignBit
      0004EE D2 92            [12] 1432 	setb	_P1_2
                                   1433 ;	Receiver.c:280: manual_up_key=1;
                                   1434 ;	assignBit
      0004F0 D2 90            [12] 1435 	setb	_P1_0
                                   1436 ;	Receiver.c:281: manual_down_key=1;
                                   1437 ;	assignBit
      0004F2 D2 91            [12] 1438 	setb	_P1_1
                                   1439 ;	Receiver.c:283: main_out1=0;
                                   1440 ;	assignBit
      0004F4 C2 B6            [12] 1441 	clr	_P3_6
                                   1442 ;	Receiver.c:284: main_out2=0;
                                   1443 ;	assignBit
      0004F6 C2 B7            [12] 1444 	clr	_P3_7
                                   1445 ;	Receiver.c:285: pwr_out=0;
                                   1446 ;	assignBit
      0004F8 C2 87            [12] 1447 	clr	_P0_7
                                   1448 ;	Receiver.c:286: rst_out=0;
                                   1449 ;	assignBit
      0004FA C2 96            [12] 1450 	clr	_P1_6
                                   1451 ;	Receiver.c:287: dim_out=0;
                                   1452 ;	assignBit
      0004FC C2 82            [12] 1453 	clr	_P0_2
                                   1454 ;	Receiver.c:288: pwr_led=0;
                                   1455 ;	assignBit
      0004FE C2 A0            [12] 1456 	clr	_P2_0
                                   1457 ;	Receiver.c:289: auto_led=0;
                                   1458 ;	assignBit
      000500 C2 A1            [12] 1459 	clr	_P2_1
                                   1460 ;	Receiver.c:290: ac_led_up=0;
                                   1461 ;	assignBit
      000502 C2 A2            [12] 1462 	clr	_P2_2
                                   1463 ;	Receiver.c:291: ac_led_down=0;
                                   1464 ;	assignBit
      000504 C2 A3            [12] 1465 	clr	_P2_3
                                   1466 ;	Receiver.c:292: up_led=0;
                                   1467 ;	assignBit
      000506 C2 A7            [12] 1468 	clr	_P2_7
                                   1469 ;	Receiver.c:293: down_led=0;
                                   1470 ;	assignBit
      000508 C2 A4            [12] 1471 	clr	_P2_4
                                   1472 ;	Receiver.c:295: main_out1=1;
                                   1473 ;	assignBit
      00050A D2 B6            [12] 1474 	setb	_P3_6
                                   1475 ;	Receiver.c:296: main_out2=1;
                                   1476 ;	assignBit
      00050C D2 B7            [12] 1477 	setb	_P3_7
                                   1478 ;	Receiver.c:297: pwr_led=1;
                                   1479 ;	assignBit
      00050E D2 A0            [12] 1480 	setb	_P2_0
                                   1481 ;	Receiver.c:298: auto_led=0;
                                   1482 ;	assignBit
      000510 C2 A1            [12] 1483 	clr	_P2_1
                                   1484 ;	Receiver.c:299: ac_led_up=1;ac_led_down=0;
                                   1485 ;	assignBit
      000512 D2 A2            [12] 1486 	setb	_P2_2
                                   1487 ;	assignBit
      000514 C2 A3            [12] 1488 	clr	_P2_3
                                   1489 ;	Receiver.c:300: auto_flag = 0;
                                   1490 ;	assignBit
      000516 C2*00            [12] 1491 	clr	_auto_flag
                                   1492 ;	Receiver.c:301: dim_out=1;
                                   1493 ;	assignBit
      000518 D2 82            [12] 1494 	setb	_P0_2
                                   1495 ;	Receiver.c:302: up_led_main =0;center_led =0;down_led_main=1;
                                   1496 ;	assignBit
      00051A C2 81            [12] 1497 	clr	_P0_1
                                   1498 ;	assignBit
      00051C C2 80            [12] 1499 	clr	_P0_0
                                   1500 ;	assignBit
      00051E D2 A6            [12] 1501 	setb	_P2_6
                                   1502 ;	Receiver.c:303: delay();delay();
      000520 12r05r45         [24] 1503 	lcall	_delay
      000523 12r05r45         [24] 1504 	lcall	_delay
                                   1505 ;	Receiver.c:304: up_led_main =0;center_led =1;down_led_main=0;
                                   1506 ;	assignBit
      000526 C2 81            [12] 1507 	clr	_P0_1
                                   1508 ;	assignBit
      000528 D2 80            [12] 1509 	setb	_P0_0
                                   1510 ;	assignBit
      00052A C2 A6            [12] 1511 	clr	_P2_6
                                   1512 ;	Receiver.c:305: delay();delay();
      00052C 12r05r45         [24] 1513 	lcall	_delay
      00052F 12r05r45         [24] 1514 	lcall	_delay
                                   1515 ;	Receiver.c:306: up_led_main =1;center_led =0;down_led_main=0;
                                   1516 ;	assignBit
      000532 D2 81            [12] 1517 	setb	_P0_1
                                   1518 ;	assignBit
      000534 C2 80            [12] 1519 	clr	_P0_0
                                   1520 ;	assignBit
      000536 C2 A6            [12] 1521 	clr	_P2_6
                                   1522 ;	Receiver.c:307: delay();delay();
      000538 12r05r45         [24] 1523 	lcall	_delay
      00053B 12r05r45         [24] 1524 	lcall	_delay
                                   1525 ;	Receiver.c:308: up_led_main =0;center_led =0;down_led_main=0;
                                   1526 ;	assignBit
      00053E C2 81            [12] 1527 	clr	_P0_1
                                   1528 ;	assignBit
      000540 C2 80            [12] 1529 	clr	_P0_0
                                   1530 ;	assignBit
      000542 C2 A6            [12] 1531 	clr	_P2_6
                                   1532 ;	Receiver.c:309: }
      000544 22               [24] 1533 	ret
                                   1534 ;------------------------------------------------------------
                                   1535 ;Allocation info for local variables in function 'delay'
                                   1536 ;------------------------------------------------------------
                                   1537 ;i                         Allocated to registers r6 r7 
                                   1538 ;j                         Allocated to registers r4 r5 
                                   1539 ;------------------------------------------------------------
                                   1540 ;	Receiver.c:311: void delay()
                                   1541 ;	-----------------------------------------
                                   1542 ;	 function delay
                                   1543 ;	-----------------------------------------
      000545                       1544 _delay:
                                   1545 ;	Receiver.c:314: for(i=0;i<0x33;i++)
      000545 7E 00            [12] 1546 	mov	r6,#0x00
      000547 7F 00            [12] 1547 	mov	r7,#0x00
      000549                       1548 00106$:
                                   1549 ;	Receiver.c:315: for(j=0;j<0xff;j++);
      000549 7C FF            [12] 1550 	mov	r4,#0xff
      00054B 7D 00            [12] 1551 	mov	r5,#0x00
      00054D                       1552 00105$:
      00054D EC               [12] 1553 	mov	a,r4
      00054E 24 FF            [12] 1554 	add	a,#0xff
      000550 FA               [12] 1555 	mov	r2,a
      000551 ED               [12] 1556 	mov	a,r5
      000552 34 FF            [12] 1557 	addc	a,#0xff
      000554 FB               [12] 1558 	mov	r3,a
      000555 8A 04            [24] 1559 	mov	ar4,r2
      000557 8B 05            [24] 1560 	mov	ar5,r3
      000559 EA               [12] 1561 	mov	a,r2
      00055A 4B               [12] 1562 	orl	a,r3
      00055B 70 F0            [24] 1563 	jnz	00105$
                                   1564 ;	Receiver.c:314: for(i=0;i<0x33;i++)
      00055D 0E               [12] 1565 	inc	r6
      00055E BE 00 01         [24] 1566 	cjne	r6,#0x00,00124$
      000561 0F               [12] 1567 	inc	r7
      000562                       1568 00124$:
      000562 C3               [12] 1569 	clr	c
      000563 EE               [12] 1570 	mov	a,r6
      000564 94 33            [12] 1571 	subb	a,#0x33
      000566 EF               [12] 1572 	mov	a,r7
      000567 64 80            [12] 1573 	xrl	a,#0x80
      000569 94 80            [12] 1574 	subb	a,#0x80
      00056B 40 DC            [24] 1575 	jc	00106$
                                   1576 ;	Receiver.c:316: }
      00056D 22               [24] 1577 	ret
                                   1578 ;------------------------------------------------------------
                                   1579 ;Allocation info for local variables in function 'UART_Init'
                                   1580 ;------------------------------------------------------------
                                   1581 ;	Receiver.c:319: void UART_Init()
                                   1582 ;	-----------------------------------------
                                   1583 ;	 function UART_Init
                                   1584 ;	-----------------------------------------
      00056E                       1585 _UART_Init:
                                   1586 ;	Receiver.c:321: TMOD = 0x20;		/* Timer 1, 8-bit auto reload mode */
      00056E 75 89 20         [24] 1587 	mov	_TMOD,#0x20
                                   1588 ;	Receiver.c:322: TH1 = 0xFD;		/* Load value for 9600 baud rate */
      000571 75 8D FD         [24] 1589 	mov	_TH1,#0xfd
                                   1590 ;	Receiver.c:323: SCON = 0x50;		/* Mode 1, reception enable */
      000574 75 98 50         [24] 1591 	mov	_SCON,#0x50
                                   1592 ;	Receiver.c:324: TR1 = 1;		/* Start timer 1 */
                                   1593 ;	assignBit
      000577 D2 8E            [12] 1594 	setb	_TR1
                                   1595 ;	Receiver.c:325: }
      000579 22               [24] 1596 	ret
                                   1597 ;------------------------------------------------------------
                                   1598 ;Allocation info for local variables in function 'Transmit_data'
                                   1599 ;------------------------------------------------------------
                                   1600 ;tx_data                   Allocated to registers 
                                   1601 ;------------------------------------------------------------
                                   1602 ;	Receiver.c:328: void Transmit_data(char tx_data)
                                   1603 ;	-----------------------------------------
                                   1604 ;	 function Transmit_data
                                   1605 ;	-----------------------------------------
      00057A                       1606 _Transmit_data:
      00057A 85 82 99         [24] 1607 	mov	_SBUF,dpl
                                   1608 ;	Receiver.c:331: while (TI==0);		/* Wait until stop bit transmit */
      00057D                       1609 00101$:
      00057D 30 99 FD         [24] 1610 	jnb	_TI,00101$
                                   1611 ;	Receiver.c:332: }
      000580 22               [24] 1612 	ret
                                   1613 ;------------------------------------------------------------
                                   1614 ;Allocation info for local variables in function 'handshake'
                                   1615 ;------------------------------------------------------------
                                   1616 ;	Receiver.c:335: void handshake()
                                   1617 ;	-----------------------------------------
                                   1618 ;	 function handshake
                                   1619 ;	-----------------------------------------
      000581                       1620 _handshake:
                                   1621 ;	Receiver.c:337: while(data_r!='y')
      000581                       1622 00101$:
      000581 74 79            [12] 1623 	mov	a,#0x79
      000583 B5*01 02         [24] 1624 	cjne	a,_data_r,00114$
      000586 80 19            [24] 1625 	sjmp	00103$
      000588                       1626 00114$:
                                   1627 ;	Receiver.c:339: state=20;
      000588 75*12 14         [24] 1628 	mov	_state,#0x14
      00058B 75*13 00         [24] 1629 	mov	(_state + 1),#0x00
                                   1630 ;	Receiver.c:340: delay();
      00058E 12r05r45         [24] 1631 	lcall	_delay
                                   1632 ;	Receiver.c:341: delay();
      000591 12r05r45         [24] 1633 	lcall	_delay
                                   1634 ;	Receiver.c:342: Transmit_data('x');
      000594 75 82 78         [24] 1635 	mov	dpl,#0x78
      000597 12r05r7A         [24] 1636 	lcall	_Transmit_data
                                   1637 ;	Receiver.c:343: data_r=SBUF;
      00059A 85 99*01         [24] 1638 	mov	_data_r,_SBUF
                                   1639 ;	Receiver.c:344: RI = 0;
                                   1640 ;	assignBit
      00059D C2 98            [12] 1641 	clr	_RI
      00059F 80 E0            [24] 1642 	sjmp	00101$
      0005A1                       1643 00103$:
                                   1644 ;	Receiver.c:346: delay();
      0005A1 12r05r45         [24] 1645 	lcall	_delay
                                   1646 ;	Receiver.c:347: Transmit_data('m');
      0005A4 75 82 6D         [24] 1647 	mov	dpl,#0x6d
                                   1648 ;	Receiver.c:348: }
      0005A7 02r05r7A         [24] 1649 	ljmp	_Transmit_data
                                   1650 ;------------------------------------------------------------
                                   1651 ;Allocation info for local variables in function 'check_data'
                                   1652 ;------------------------------------------------------------
                                   1653 ;	Receiver.c:350: void check_data()
                                   1654 ;	-----------------------------------------
                                   1655 ;	 function check_data
                                   1656 ;	-----------------------------------------
      0005AA                       1657 _check_data:
                                   1658 ;	Receiver.c:352: switch(data_r)
      0005AA AF*01            [24] 1659 	mov	r7,_data_r
      0005AC BF 61 02         [24] 1660 	cjne	r7,#0x61,00177$
      0005AF 80 48            [24] 1661 	sjmp	00102$
      0005B1                       1662 00177$:
      0005B1 BF 62 02         [24] 1663 	cjne	r7,#0x62,00178$
      0005B4 80 52            [24] 1664 	sjmp	00103$
      0005B6                       1665 00178$:
      0005B6 BF 63 02         [24] 1666 	cjne	r7,#0x63,00179$
      0005B9 80 5C            [24] 1667 	sjmp	00104$
      0005BB                       1668 00179$:
      0005BB BF 64 02         [24] 1669 	cjne	r7,#0x64,00180$
      0005BE 80 66            [24] 1670 	sjmp	00105$
      0005C0                       1671 00180$:
      0005C0 BF 65 02         [24] 1672 	cjne	r7,#0x65,00181$
      0005C3 80 70            [24] 1673 	sjmp	00106$
      0005C5                       1674 00181$:
      0005C5 BF 66 02         [24] 1675 	cjne	r7,#0x66,00182$
      0005C8 80 7A            [24] 1676 	sjmp	00107$
      0005CA                       1677 00182$:
      0005CA BF 67 03         [24] 1678 	cjne	r7,#0x67,00183$
      0005CD 02r06r52         [24] 1679 	ljmp	00108$
      0005D0                       1680 00183$:
      0005D0 BF 6C 02         [24] 1681 	cjne	r7,#0x6c,00184$
      0005D3 80 15            [24] 1682 	sjmp	00101$
      0005D5                       1683 00184$:
      0005D5 BF 6E 03         [24] 1684 	cjne	r7,#0x6e,00185$
      0005D8 02r06r60         [24] 1685 	ljmp	00109$
      0005DB                       1686 00185$:
      0005DB BF 71 03         [24] 1687 	cjne	r7,#0x71,00186$
      0005DE 02r06r7C         [24] 1688 	ljmp	00111$
      0005E1                       1689 00186$:
      0005E1 BF 75 03         [24] 1690 	cjne	r7,#0x75,00187$
      0005E4 02r06r6E         [24] 1691 	ljmp	00110$
      0005E7                       1692 00187$:
      0005E7 02r06rBB         [24] 1693 	ljmp	00116$
                                   1694 ;	Receiver.c:354: case 'l':time_delay=30;state = 0;auto_led=0;break;
      0005EA                       1695 00101$:
      0005EA 75*08 1E         [24] 1696 	mov	_time_delay,#0x1e
      0005ED E4               [12] 1697 	clr	a
      0005EE F5*09            [12] 1698 	mov	(_time_delay + 1),a
      0005F0 F5*12            [12] 1699 	mov	_state,a
      0005F2 F5*13            [12] 1700 	mov	(_state + 1),a
                                   1701 ;	assignBit
      0005F4 C2 A1            [12] 1702 	clr	_P2_1
      0005F6 02r06rBB         [24] 1703 	ljmp	00116$
                                   1704 ;	Receiver.c:356: case 'a':time_delay=20;state = 1;	
      0005F9                       1705 00102$:
      0005F9 75*08 14         [24] 1706 	mov	_time_delay,#0x14
      0005FC 75*09 00         [24] 1707 	mov	(_time_delay + 1),#0x00
      0005FF 75*12 01         [24] 1708 	mov	_state,#0x01
      000602 75*13 00         [24] 1709 	mov	(_state + 1),#0x00
                                   1710 ;	Receiver.c:357: break;
      000605 02r06rBB         [24] 1711 	ljmp	00116$
                                   1712 ;	Receiver.c:359: case 'b':time_delay=10;state = 2;
      000608                       1713 00103$:
      000608 75*08 0A         [24] 1714 	mov	_time_delay,#0x0a
      00060B 75*09 00         [24] 1715 	mov	(_time_delay + 1),#0x00
      00060E 75*12 02         [24] 1716 	mov	_state,#0x02
      000611 75*13 00         [24] 1717 	mov	(_state + 1),#0x00
                                   1718 ;	Receiver.c:360: break;
      000614 02r06rBB         [24] 1719 	ljmp	00116$
                                   1720 ;	Receiver.c:362: case 'c':time_delay=7 ;state = 3;
      000617                       1721 00104$:
      000617 75*08 07         [24] 1722 	mov	_time_delay,#0x07
      00061A 75*09 00         [24] 1723 	mov	(_time_delay + 1),#0x00
      00061D 75*12 03         [24] 1724 	mov	_state,#0x03
      000620 75*13 00         [24] 1725 	mov	(_state + 1),#0x00
                                   1726 ;	Receiver.c:363: break;
      000623 02r06rBB         [24] 1727 	ljmp	00116$
                                   1728 ;	Receiver.c:365: case 'd':time_delay=7 ;state = 7;
      000626                       1729 00105$:
      000626 75*08 07         [24] 1730 	mov	_time_delay,#0x07
      000629 75*09 00         [24] 1731 	mov	(_time_delay + 1),#0x00
      00062C 75*12 07         [24] 1732 	mov	_state,#0x07
      00062F 75*13 00         [24] 1733 	mov	(_state + 1),#0x00
                                   1734 ;	Receiver.c:366: break;
      000632 02r06rBB         [24] 1735 	ljmp	00116$
                                   1736 ;	Receiver.c:368: case 'e':time_delay=7 ;state = 4;
      000635                       1737 00106$:
      000635 75*08 07         [24] 1738 	mov	_time_delay,#0x07
      000638 75*09 00         [24] 1739 	mov	(_time_delay + 1),#0x00
      00063B 75*12 04         [24] 1740 	mov	_state,#0x04
      00063E 75*13 00         [24] 1741 	mov	(_state + 1),#0x00
                                   1742 ;	Receiver.c:369: break;
      000641 02r06rBB         [24] 1743 	ljmp	00116$
                                   1744 ;	Receiver.c:371: case 'f':time_delay=10;state = 5;
      000644                       1745 00107$:
      000644 75*08 0A         [24] 1746 	mov	_time_delay,#0x0a
      000647 75*09 00         [24] 1747 	mov	(_time_delay + 1),#0x00
      00064A 75*12 05         [24] 1748 	mov	_state,#0x05
      00064D 75*13 00         [24] 1749 	mov	(_state + 1),#0x00
                                   1750 ;	Receiver.c:372: break;
                                   1751 ;	Receiver.c:374: case 'g':time_delay=20;state = 6;
      000650 80 69            [24] 1752 	sjmp	00116$
      000652                       1753 00108$:
      000652 75*08 14         [24] 1754 	mov	_time_delay,#0x14
      000655 75*09 00         [24] 1755 	mov	(_time_delay + 1),#0x00
      000658 75*12 06         [24] 1756 	mov	_state,#0x06
      00065B 75*13 00         [24] 1757 	mov	(_state + 1),#0x00
                                   1758 ;	Receiver.c:375: break;
                                   1759 ;	Receiver.c:377: case 'n':time_delay=15;state = 8;
      00065E 80 5B            [24] 1760 	sjmp	00116$
      000660                       1761 00109$:
      000660 75*08 0F         [24] 1762 	mov	_time_delay,#0x0f
      000663 75*09 00         [24] 1763 	mov	(_time_delay + 1),#0x00
      000666 75*12 08         [24] 1764 	mov	_state,#0x08
      000669 75*13 00         [24] 1765 	mov	(_state + 1),#0x00
                                   1766 ;	Receiver.c:378: break;
                                   1767 ;	Receiver.c:380: case 'u':time_delay=15;state = 9;
      00066C 80 4D            [24] 1768 	sjmp	00116$
      00066E                       1769 00110$:
      00066E 75*08 0F         [24] 1770 	mov	_time_delay,#0x0f
      000671 75*09 00         [24] 1771 	mov	(_time_delay + 1),#0x00
      000674 75*12 09         [24] 1772 	mov	_state,#0x09
      000677 75*13 00         [24] 1773 	mov	(_state + 1),#0x00
                                   1774 ;	Receiver.c:381: break;
                                   1775 ;	Receiver.c:383: case 'q' :ES=0;
      00067A 80 3F            [24] 1776 	sjmp	00116$
      00067C                       1777 00111$:
                                   1778 ;	assignBit
      00067C C2 AC            [12] 1779 	clr	_ES
                                   1780 ;	Receiver.c:384: serialCount=0;
      00067E E4               [12] 1781 	clr	a
      00067F F5*04            [12] 1782 	mov	_serialCount,a
      000681 F5*05            [12] 1783 	mov	(_serialCount + 1),a
                                   1784 ;	Receiver.c:385: state=20;
      000683 75*12 14         [24] 1785 	mov	_state,#0x14
                                   1786 ;	1-genFromRTrack replaced	mov	(_state + 1),#0x00
      000686 F5*13            [12] 1787 	mov	(_state + 1),a
                                   1788 ;	Receiver.c:386: timerCount=0;
      000688 F5*02            [12] 1789 	mov	_timerCount,a
      00068A F5*03            [12] 1790 	mov	(_timerCount + 1),a
                                   1791 ;	Receiver.c:387: P0_1 =0;
                                   1792 ;	assignBit
      00068C C2 81            [12] 1793 	clr	_P0_1
                                   1794 ;	Receiver.c:388: P0_0 =0;
                                   1795 ;	assignBit
      00068E C2 80            [12] 1796 	clr	_P0_0
                                   1797 ;	Receiver.c:389: P2_6=0;
                                   1798 ;	assignBit
      000690 C2 A6            [12] 1799 	clr	_P2_6
                                   1800 ;	Receiver.c:390: up_led=0;
                                   1801 ;	assignBit
      000692 C2 A7            [12] 1802 	clr	_P2_7
                                   1803 ;	Receiver.c:391: down_led=0;
                                   1804 ;	assignBit
      000694 C2 A4            [12] 1805 	clr	_P2_4
                                   1806 ;	Receiver.c:393: data_r=0;
      000696 75*01 00         [24] 1807 	mov	_data_r,#0x00
                                   1808 ;	Receiver.c:394: while(data_r!='y')
      000699                       1809 00112$:
      000699 74 79            [12] 1810 	mov	a,#0x79
      00069B B5*01 02         [24] 1811 	cjne	a,_data_r,00188$
      00069E 80 19            [24] 1812 	sjmp	00114$
      0006A0                       1813 00188$:
                                   1814 ;	Receiver.c:396: state=20;
      0006A0 75*12 14         [24] 1815 	mov	_state,#0x14
      0006A3 75*13 00         [24] 1816 	mov	(_state + 1),#0x00
                                   1817 ;	Receiver.c:397: delay();
      0006A6 12r05r45         [24] 1818 	lcall	_delay
                                   1819 ;	Receiver.c:398: delay();
      0006A9 12r05r45         [24] 1820 	lcall	_delay
                                   1821 ;	Receiver.c:399: Transmit_data('x');
      0006AC 75 82 78         [24] 1822 	mov	dpl,#0x78
      0006AF 12r05r7A         [24] 1823 	lcall	_Transmit_data
                                   1824 ;	Receiver.c:400: data_r=SBUF;
      0006B2 85 99*01         [24] 1825 	mov	_data_r,_SBUF
                                   1826 ;	Receiver.c:401: RI = 0;
                                   1827 ;	assignBit
      0006B5 C2 98            [12] 1828 	clr	_RI
      0006B7 80 E0            [24] 1829 	sjmp	00112$
      0006B9                       1830 00114$:
                                   1831 ;	Receiver.c:403: ES=1;break;
                                   1832 ;	assignBit
      0006B9 D2 AC            [12] 1833 	setb	_ES
                                   1834 ;	Receiver.c:406: }//switch end
      0006BB                       1835 00116$:
                                   1836 ;	Receiver.c:409: if(serialCount>4000)
      0006BB C3               [12] 1837 	clr	c
      0006BC 74 A0            [12] 1838 	mov	a,#0xa0
      0006BE 95*04            [12] 1839 	subb	a,_serialCount
      0006C0 74 8F            [12] 1840 	mov	a,#(0x0f ^ 0x80)
      0006C2 85*05 F0         [24] 1841 	mov	b,(_serialCount + 1)
      0006C5 63 F0 80         [24] 1842 	xrl	b,#0x80
      0006C8 95 F0            [12] 1843 	subb	a,b
      0006CA 50 08            [24] 1844 	jnc	00119$
                                   1845 ;	Receiver.c:410: {serialCount=0;data_r='q';}
      0006CC E4               [12] 1846 	clr	a
      0006CD F5*04            [12] 1847 	mov	_serialCount,a
      0006CF F5*05            [12] 1848 	mov	(_serialCount + 1),a
      0006D1 75*01 71         [24] 1849 	mov	_data_r,#0x71
      0006D4                       1850 00119$:
                                   1851 ;	Receiver.c:411: }
      0006D4 22               [24] 1852 	ret
                                   1853 ;------------------------------------------------------------
                                   1854 ;Allocation info for local variables in function 'InitTimer0'
                                   1855 ;------------------------------------------------------------
                                   1856 ;	Receiver.c:413: void InitTimer0(void)
                                   1857 ;	-----------------------------------------
                                   1858 ;	 function InitTimer0
                                   1859 ;	-----------------------------------------
      0006D5                       1860 _InitTimer0:
                                   1861 ;	Receiver.c:415: TMOD |= 0x01;    // Set timer0 in mode 1
      0006D5 43 89 01         [24] 1862 	orl	_TMOD,#0x01
                                   1863 ;	Receiver.c:416: TH0 = 0xee;      // 5 msec reloading time
      0006D8 75 8C EE         [24] 1864 	mov	_TH0,#0xee
                                   1865 ;	Receiver.c:417: TL0 = 0x00;      // First time value
      0006DB 75 8A 00         [24] 1866 	mov	_TL0,#0x00
                                   1867 ;	Receiver.c:418: TR0 = 1;         // Start Timer 1
                                   1868 ;	assignBit
      0006DE D2 8C            [12] 1869 	setb	_TR0
                                   1870 ;	Receiver.c:419: ET0 = 1;         // Enable Timer1 interrupts	
                                   1871 ;	assignBit
      0006E0 D2 A9            [12] 1872 	setb	_ET0
                                   1873 ;	Receiver.c:420: }
      0006E2 22               [24] 1874 	ret
                                   1875 ;------------------------------------------------------------
                                   1876 ;Allocation info for local variables in function 'check_switches'
                                   1877 ;------------------------------------------------------------
                                   1878 ;	Receiver.c:422: void check_switches()
                                   1879 ;	-----------------------------------------
                                   1880 ;	 function check_switches
                                   1881 ;	-----------------------------------------
      0006E3                       1882 _check_switches:
                                   1883 ;	Receiver.c:424: if(!ac_key)
      0006E3 20 93 47         [24] 1884 	jb	_P1_3,00111$
                                   1885 ;	Receiver.c:426: delay();
      0006E6 12r05r45         [24] 1886 	lcall	_delay
                                   1887 ;	Receiver.c:427: if(!ac_key)
      0006E9 20 93 41         [24] 1888 	jb	_P1_3,00111$
                                   1889 ;	Receiver.c:429: ac_state++;		
      0006EC 05*16            [12] 1890 	inc	_ac_state
                                   1891 ;	Receiver.c:430: if(ac_state>=3)
      0006EE 74 FD            [12] 1892 	mov	a,#0x100 - 0x03
      0006F0 25*16            [12] 1893 	add	a,_ac_state
      0006F2 50 03            [24] 1894 	jnc	00102$
                                   1895 ;	Receiver.c:431: ac_state=0;
      0006F4 75*16 00         [24] 1896 	mov	_ac_state,#0x00
      0006F7                       1897 00102$:
                                   1898 ;	Receiver.c:432: switch(ac_state)
      0006F7 E4               [12] 1899 	clr	a
      0006F8 B5*16 02         [24] 1900 	cjne	a,_ac_state,00190$
      0006FB 80 0E            [24] 1901 	sjmp	00103$
      0006FD                       1902 00190$:
      0006FD 74 01            [12] 1903 	mov	a,#0x01
      0006FF B5*16 02         [24] 1904 	cjne	a,_ac_state,00191$
      000702 80 13            [24] 1905 	sjmp	00104$
      000704                       1906 00191$:
      000704 74 02            [12] 1907 	mov	a,#0x02
                                   1908 ;	Receiver.c:434: case 0:Transmit_data('l');ac_led_up=1;ac_led_down=1;break;
      000706 B5*16 24         [24] 1909 	cjne	a,_ac_state,00111$
      000709 80 18            [24] 1910 	sjmp	00105$
      00070B                       1911 00103$:
      00070B 75 82 6C         [24] 1912 	mov	dpl,#0x6c
      00070E 12r05r7A         [24] 1913 	lcall	_Transmit_data
                                   1914 ;	assignBit
      000711 D2 A2            [12] 1915 	setb	_P2_2
                                   1916 ;	assignBit
      000713 D2 A3            [12] 1917 	setb	_P2_3
                                   1918 ;	Receiver.c:435: case 1:Transmit_data('m');ac_led_up=1;ac_led_down=0;break;
      000715 80 16            [24] 1919 	sjmp	00111$
      000717                       1920 00104$:
      000717 75 82 6D         [24] 1921 	mov	dpl,#0x6d
      00071A 12r05r7A         [24] 1922 	lcall	_Transmit_data
                                   1923 ;	assignBit
      00071D D2 A2            [12] 1924 	setb	_P2_2
                                   1925 ;	assignBit
      00071F C2 A3            [12] 1926 	clr	_P2_3
                                   1927 ;	Receiver.c:436: case 2:Transmit_data('h');ac_led_up=0;ac_led_down=1;break;
      000721 80 0A            [24] 1928 	sjmp	00111$
      000723                       1929 00105$:
      000723 75 82 68         [24] 1930 	mov	dpl,#0x68
      000726 12r05r7A         [24] 1931 	lcall	_Transmit_data
                                   1932 ;	assignBit
      000729 C2 A2            [12] 1933 	clr	_P2_2
                                   1934 ;	assignBit
      00072B D2 A3            [12] 1935 	setb	_P2_3
                                   1936 ;	Receiver.c:438: }//switch end
      00072D                       1937 00111$:
                                   1938 ;	Receiver.c:442: if(!dim_key)
      00072D 20 94 37         [24] 1939 	jb	_P1_4,00115$
                                   1940 ;	Receiver.c:444: delay();
      000730 12r05r45         [24] 1941 	lcall	_delay
                                   1942 ;	Receiver.c:446: dim_val = dim_val + 10;
      000733 74 0A            [12] 1943 	mov	a,#0x0a
      000735 25*0A            [12] 1944 	add	a,_dim_val
      000737 F5*0A            [12] 1945 	mov	_dim_val,a
      000739 E4               [12] 1946 	clr	a
      00073A 35*0B            [12] 1947 	addc	a,(_dim_val + 1)
      00073C F5*0B            [12] 1948 	mov	(_dim_val + 1),a
                                   1949 ;	Receiver.c:447: dim_val2=50-dim_val;
      00073E 74 32            [12] 1950 	mov	a,#0x32
      000740 C3               [12] 1951 	clr	c
      000741 95*0A            [12] 1952 	subb	a,_dim_val
      000743 F5*0C            [12] 1953 	mov	_dim_val2,a
      000745 E4               [12] 1954 	clr	a
      000746 95*0B            [12] 1955 	subb	a,(_dim_val + 1)
      000748 F5*0D            [12] 1956 	mov	(_dim_val2 + 1),a
                                   1957 ;	Receiver.c:448: if(dim_val>50){dim_val=1;dim_val2=50;}
      00074A C3               [12] 1958 	clr	c
      00074B 74 32            [12] 1959 	mov	a,#0x32
      00074D 95*0A            [12] 1960 	subb	a,_dim_val
      00074F 74 80            [12] 1961 	mov	a,#(0x00 ^ 0x80)
      000751 85*0B F0         [24] 1962 	mov	b,(_dim_val + 1)
      000754 63 F0 80         [24] 1963 	xrl	b,#0x80
      000757 95 F0            [12] 1964 	subb	a,b
      000759 50 0C            [24] 1965 	jnc	00115$
      00075B 75*0A 01         [24] 1966 	mov	_dim_val,#0x01
      00075E 75*0B 00         [24] 1967 	mov	(_dim_val + 1),#0x00
      000761 75*0C 32         [24] 1968 	mov	_dim_val2,#0x32
      000764 75*0D 00         [24] 1969 	mov	(_dim_val2 + 1),#0x00
      000767                       1970 00115$:
                                   1971 ;	Receiver.c:451: if(!auto_key)
      000767 20 92 05         [24] 1972 	jb	_P1_2,00117$
                                   1973 ;	Receiver.c:453: delay();
      00076A 12r05r45         [24] 1974 	lcall	_delay
                                   1975 ;	Receiver.c:454: auto_flag=!auto_flag;
      00076D B2*00            [12] 1976 	cpl	_auto_flag
      00076F                       1977 00117$:
                                   1978 ;	Receiver.c:457: if(!pwr_key)
      00076F 20 97 28         [24] 1979 	jb	_P1_7,00122$
                                   1980 ;	Receiver.c:459: delay();
      000772 12r05r45         [24] 1981 	lcall	_delay
                                   1982 ;	Receiver.c:460: delay();
      000775 12r05r45         [24] 1983 	lcall	_delay
                                   1984 ;	Receiver.c:461: delay();
      000778 12r05r45         [24] 1985 	lcall	_delay
                                   1986 ;	Receiver.c:462: if(!pwr_key)
      00077B 20 97 1C         [24] 1987 	jb	_P1_7,00122$
                                   1988 ;	Receiver.c:464: pwr_led=0;up_led_main =0;center_led =0;down_led_main=0;ac_led_up=0;ac_led_down=0;auto_led=0;
                                   1989 ;	assignBit
      00077E C2 A0            [12] 1990 	clr	_P2_0
                                   1991 ;	assignBit
      000780 C2 81            [12] 1992 	clr	_P0_1
                                   1993 ;	assignBit
      000782 C2 80            [12] 1994 	clr	_P0_0
                                   1995 ;	assignBit
      000784 C2 A6            [12] 1996 	clr	_P2_6
                                   1997 ;	assignBit
      000786 C2 A2            [12] 1998 	clr	_P2_2
                                   1999 ;	assignBit
      000788 C2 A3            [12] 2000 	clr	_P2_3
                                   2001 ;	assignBit
      00078A C2 A1            [12] 2002 	clr	_P2_1
                                   2003 ;	Receiver.c:465: TR0 = 0;         // Stop Timer 1
                                   2004 ;	assignBit
      00078C C2 8C            [12] 2005 	clr	_TR0
                                   2006 ;	Receiver.c:466: ET0 = 0;         // Enable Timer1 interrupts	
                                   2007 ;	assignBit
      00078E C2 A9            [12] 2008 	clr	_ET0
                                   2009 ;	Receiver.c:467: delay();delay();
      000790 12r05r45         [24] 2010 	lcall	_delay
      000793 12r05r45         [24] 2011 	lcall	_delay
                                   2012 ;	Receiver.c:468: pwr_out=1;
                                   2013 ;	assignBit
      000796 D2 87            [12] 2014 	setb	_P0_7
                                   2015 ;	Receiver.c:469: shutdown:
      000798                       2016 00118$:
                                   2017 ;	Receiver.c:470: goto shutdown;
      000798 80 FE            [24] 2018 	sjmp	00118$
      00079A                       2019 00122$:
                                   2020 ;	Receiver.c:475: if(!manual_up_key)
      00079A 20 90 0D         [24] 2021 	jb	_P1_0,00127$
                                   2022 ;	Receiver.c:477: up_led=1;
                                   2023 ;	assignBit
      00079D D2 A7            [12] 2024 	setb	_P2_7
                                   2025 ;	Receiver.c:478: down_led=0;
                                   2026 ;	assignBit
      00079F C2 A4            [12] 2027 	clr	_P2_4
                                   2028 ;	Receiver.c:479: up_led_main=1;
                                   2029 ;	assignBit
      0007A1 D2 81            [12] 2030 	setb	_P0_1
                                   2031 ;	Receiver.c:480: center_led=0;
                                   2032 ;	assignBit
      0007A3 C2 80            [12] 2033 	clr	_P0_0
                                   2034 ;	Receiver.c:481: down_led_main=0;
                                   2035 ;	assignBit
      0007A5 C2 A6            [12] 2036 	clr	_P2_6
                                   2037 ;	Receiver.c:482: TR0=0;
                                   2038 ;	assignBit
      0007A7 C2 8C            [12] 2039 	clr	_TR0
      0007A9 22               [24] 2040 	ret
      0007AA                       2041 00127$:
                                   2042 ;	Receiver.c:485: else if(!manual_down_key)
      0007AA 20 91 0D         [24] 2043 	jb	_P1_1,00124$
                                   2044 ;	Receiver.c:487: up_led=0;
                                   2045 ;	assignBit
      0007AD C2 A7            [12] 2046 	clr	_P2_7
                                   2047 ;	Receiver.c:488: down_led=1;
                                   2048 ;	assignBit
      0007AF D2 A4            [12] 2049 	setb	_P2_4
                                   2050 ;	Receiver.c:489: up_led_main=0;
                                   2051 ;	assignBit
      0007B1 C2 81            [12] 2052 	clr	_P0_1
                                   2053 ;	Receiver.c:490: center_led=0;
                                   2054 ;	assignBit
      0007B3 C2 80            [12] 2055 	clr	_P0_0
                                   2056 ;	Receiver.c:491: down_led_main=1;
                                   2057 ;	assignBit
      0007B5 D2 A6            [12] 2058 	setb	_P2_6
                                   2059 ;	Receiver.c:492: TR0=0;
                                   2060 ;	assignBit
      0007B7 C2 8C            [12] 2061 	clr	_TR0
      0007B9 22               [24] 2062 	ret
      0007BA                       2063 00124$:
                                   2064 ;	Receiver.c:497: TR0=1;
                                   2065 ;	assignBit
      0007BA D2 8C            [12] 2066 	setb	_TR0
                                   2067 ;	Receiver.c:500: }
      0007BC 22               [24] 2068 	ret
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
                                   2071 	.area XINIT   (CODE)
                                   2072 	.area CABS    (ABS,CODE)
