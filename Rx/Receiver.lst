                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.4 #11418 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module Receiver
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _timer1_ISR
                                     13 	.globl _isr_timer0
                                     14 	.globl _serial_isr
                                     15 	.globl _TF2
                                     16 	.globl _EXF2
                                     17 	.globl _RCLK
                                     18 	.globl _TCLK
                                     19 	.globl _EXEN2
                                     20 	.globl _TR2
                                     21 	.globl _C_T2
                                     22 	.globl _CP_RL2
                                     23 	.globl _T2CON_7
                                     24 	.globl _T2CON_6
                                     25 	.globl _T2CON_5
                                     26 	.globl _T2CON_4
                                     27 	.globl _T2CON_3
                                     28 	.globl _T2CON_2
                                     29 	.globl _T2CON_1
                                     30 	.globl _T2CON_0
                                     31 	.globl _PT2
                                     32 	.globl _ET2
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _PS
                                     42 	.globl _PT1
                                     43 	.globl _PX1
                                     44 	.globl _PT0
                                     45 	.globl _PX0
                                     46 	.globl _RD
                                     47 	.globl _WR
                                     48 	.globl _T1
                                     49 	.globl _T0
                                     50 	.globl _INT1
                                     51 	.globl _INT0
                                     52 	.globl _TXD
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _EA
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _P1_7
                                     85 	.globl _P1_6
                                     86 	.globl _P1_5
                                     87 	.globl _P1_4
                                     88 	.globl _P1_3
                                     89 	.globl _P1_2
                                     90 	.globl _P1_1
                                     91 	.globl _P1_0
                                     92 	.globl _TF1
                                     93 	.globl _TR1
                                     94 	.globl _TF0
                                     95 	.globl _TR0
                                     96 	.globl _IE1
                                     97 	.globl _IT1
                                     98 	.globl _IE0
                                     99 	.globl _IT0
                                    100 	.globl _P0_7
                                    101 	.globl _P0_6
                                    102 	.globl _P0_5
                                    103 	.globl _P0_4
                                    104 	.globl _P0_3
                                    105 	.globl _P0_2
                                    106 	.globl _P0_1
                                    107 	.globl _P0_0
                                    108 	.globl _TH2
                                    109 	.globl _TL2
                                    110 	.globl _RCAP2H
                                    111 	.globl _RCAP2L
                                    112 	.globl _T2CON
                                    113 	.globl _B
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _auto_flag
                                    135 	.globl _ac_state
                                    136 	.globl _off
                                    137 	.globl _state
                                    138 	.globl _dim1_val2
                                    139 	.globl _dim1_val
                                    140 	.globl _dim_val2
                                    141 	.globl _dim_val
                                    142 	.globl _time_delay
                                    143 	.globl _timerCount2
                                    144 	.globl _serialCount
                                    145 	.globl _timerCount
                                    146 	.globl _data_r
                                    147 	.globl _start
                                    148 	.globl _startup
                                    149 	.globl _delay
                                    150 	.globl _UART_Init
                                    151 	.globl _Transmit_data
                                    152 	.globl _handshake
                                    153 	.globl _check_data
                                    154 	.globl _InitTimer0
                                    155 	.globl _check_switches
                                    156 ;--------------------------------------------------------
                                    157 ; special function registers
                                    158 ;--------------------------------------------------------
                                    159 	.area RSEG    (ABS,DATA)
      000000                        160 	.org 0x0000
                           000080   161 _P0	=	0x0080
                           000081   162 _SP	=	0x0081
                           000082   163 _DPL	=	0x0082
                           000083   164 _DPH	=	0x0083
                           000087   165 _PCON	=	0x0087
                           000088   166 _TCON	=	0x0088
                           000089   167 _TMOD	=	0x0089
                           00008A   168 _TL0	=	0x008a
                           00008B   169 _TL1	=	0x008b
                           00008C   170 _TH0	=	0x008c
                           00008D   171 _TH1	=	0x008d
                           000090   172 _P1	=	0x0090
                           000098   173 _SCON	=	0x0098
                           000099   174 _SBUF	=	0x0099
                           0000A0   175 _P2	=	0x00a0
                           0000A8   176 _IE	=	0x00a8
                           0000B0   177 _P3	=	0x00b0
                           0000B8   178 _IP	=	0x00b8
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 _ACC	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                           0000C8   182 _T2CON	=	0x00c8
                           0000CA   183 _RCAP2L	=	0x00ca
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 _TL2	=	0x00cc
                           0000CD   186 _TH2	=	0x00cd
                                    187 ;--------------------------------------------------------
                                    188 ; special function bits
                                    189 ;--------------------------------------------------------
                                    190 	.area RSEG    (ABS,DATA)
      000000                        191 	.org 0x0000
                           000080   192 _P0_0	=	0x0080
                           000081   193 _P0_1	=	0x0081
                           000082   194 _P0_2	=	0x0082
                           000083   195 _P0_3	=	0x0083
                           000084   196 _P0_4	=	0x0084
                           000085   197 _P0_5	=	0x0085
                           000086   198 _P0_6	=	0x0086
                           000087   199 _P0_7	=	0x0087
                           000088   200 _IT0	=	0x0088
                           000089   201 _IE0	=	0x0089
                           00008A   202 _IT1	=	0x008a
                           00008B   203 _IE1	=	0x008b
                           00008C   204 _TR0	=	0x008c
                           00008D   205 _TF0	=	0x008d
                           00008E   206 _TR1	=	0x008e
                           00008F   207 _TF1	=	0x008f
                           000090   208 _P1_0	=	0x0090
                           000091   209 _P1_1	=	0x0091
                           000092   210 _P1_2	=	0x0092
                           000093   211 _P1_3	=	0x0093
                           000094   212 _P1_4	=	0x0094
                           000095   213 _P1_5	=	0x0095
                           000096   214 _P1_6	=	0x0096
                           000097   215 _P1_7	=	0x0097
                           000098   216 _RI	=	0x0098
                           000099   217 _TI	=	0x0099
                           00009A   218 _RB8	=	0x009a
                           00009B   219 _TB8	=	0x009b
                           00009C   220 _REN	=	0x009c
                           00009D   221 _SM2	=	0x009d
                           00009E   222 _SM1	=	0x009e
                           00009F   223 _SM0	=	0x009f
                           0000A0   224 _P2_0	=	0x00a0
                           0000A1   225 _P2_1	=	0x00a1
                           0000A2   226 _P2_2	=	0x00a2
                           0000A3   227 _P2_3	=	0x00a3
                           0000A4   228 _P2_4	=	0x00a4
                           0000A5   229 _P2_5	=	0x00a5
                           0000A6   230 _P2_6	=	0x00a6
                           0000A7   231 _P2_7	=	0x00a7
                           0000A8   232 _EX0	=	0x00a8
                           0000A9   233 _ET0	=	0x00a9
                           0000AA   234 _EX1	=	0x00aa
                           0000AB   235 _ET1	=	0x00ab
                           0000AC   236 _ES	=	0x00ac
                           0000AF   237 _EA	=	0x00af
                           0000B0   238 _P3_0	=	0x00b0
                           0000B1   239 _P3_1	=	0x00b1
                           0000B2   240 _P3_2	=	0x00b2
                           0000B3   241 _P3_3	=	0x00b3
                           0000B4   242 _P3_4	=	0x00b4
                           0000B5   243 _P3_5	=	0x00b5
                           0000B6   244 _P3_6	=	0x00b6
                           0000B7   245 _P3_7	=	0x00b7
                           0000B0   246 _RXD	=	0x00b0
                           0000B1   247 _TXD	=	0x00b1
                           0000B2   248 _INT0	=	0x00b2
                           0000B3   249 _INT1	=	0x00b3
                           0000B4   250 _T0	=	0x00b4
                           0000B5   251 _T1	=	0x00b5
                           0000B6   252 _WR	=	0x00b6
                           0000B7   253 _RD	=	0x00b7
                           0000B8   254 _PX0	=	0x00b8
                           0000B9   255 _PT0	=	0x00b9
                           0000BA   256 _PX1	=	0x00ba
                           0000BB   257 _PT1	=	0x00bb
                           0000BC   258 _PS	=	0x00bc
                           0000D0   259 _P	=	0x00d0
                           0000D1   260 _F1	=	0x00d1
                           0000D2   261 _OV	=	0x00d2
                           0000D3   262 _RS0	=	0x00d3
                           0000D4   263 _RS1	=	0x00d4
                           0000D5   264 _F0	=	0x00d5
                           0000D6   265 _AC	=	0x00d6
                           0000D7   266 _CY	=	0x00d7
                           0000AD   267 _ET2	=	0x00ad
                           0000BD   268 _PT2	=	0x00bd
                           0000C8   269 _T2CON_0	=	0x00c8
                           0000C9   270 _T2CON_1	=	0x00c9
                           0000CA   271 _T2CON_2	=	0x00ca
                           0000CB   272 _T2CON_3	=	0x00cb
                           0000CC   273 _T2CON_4	=	0x00cc
                           0000CD   274 _T2CON_5	=	0x00cd
                           0000CE   275 _T2CON_6	=	0x00ce
                           0000CF   276 _T2CON_7	=	0x00cf
                           0000C8   277 _CP_RL2	=	0x00c8
                           0000C9   278 _C_T2	=	0x00c9
                           0000CA   279 _TR2	=	0x00ca
                           0000CB   280 _EXEN2	=	0x00cb
                           0000CC   281 _TCLK	=	0x00cc
                           0000CD   282 _RCLK	=	0x00cd
                           0000CE   283 _EXF2	=	0x00ce
                           0000CF   284 _TF2	=	0x00cf
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable register banks
                                    287 ;--------------------------------------------------------
                                    288 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        289 	.ds 8
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable bit register bank
                                    292 ;--------------------------------------------------------
                                    293 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        294 bits:
      000000                        295 	.ds 1
                           008000   296 	b0 = bits[0]
                           008100   297 	b1 = bits[1]
                           008200   298 	b2 = bits[2]
                           008300   299 	b3 = bits[3]
                           008400   300 	b4 = bits[4]
                           008500   301 	b5 = bits[5]
                           008600   302 	b6 = bits[6]
                           008700   303 	b7 = bits[7]
                                    304 ;--------------------------------------------------------
                                    305 ; internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area DSEG    (DATA)
      000000                        308 _start::
      000000                        309 	.ds 1
      000001                        310 _data_r::
      000001                        311 	.ds 1
      000002                        312 _timerCount::
      000002                        313 	.ds 2
      000004                        314 _serialCount::
      000004                        315 	.ds 2
      000006                        316 _timerCount2::
      000006                        317 	.ds 2
      000008                        318 _time_delay::
      000008                        319 	.ds 2
      00000A                        320 _dim_val::
      00000A                        321 	.ds 2
      00000C                        322 _dim_val2::
      00000C                        323 	.ds 2
      00000E                        324 _dim1_val::
      00000E                        325 	.ds 2
      000010                        326 _dim1_val2::
      000010                        327 	.ds 2
      000012                        328 _state::
      000012                        329 	.ds 2
      000014                        330 _off::
      000014                        331 	.ds 2
      000016                        332 _ac_state::
      000016                        333 	.ds 1
                                    334 ;--------------------------------------------------------
                                    335 ; overlayable items in internal ram 
                                    336 ;--------------------------------------------------------
                                    337 	.area	OSEG    (OVR,DATA)
                                    338 	.area	OSEG    (OVR,DATA)
                                    339 ;--------------------------------------------------------
                                    340 ; Stack segment in internal ram 
                                    341 ;--------------------------------------------------------
                                    342 	.area	SSEG
      000000                        343 __start__stack:
      000000                        344 	.ds	1
                                    345 
                                    346 ;--------------------------------------------------------
                                    347 ; indirectly addressable internal ram data
                                    348 ;--------------------------------------------------------
                                    349 	.area ISEG    (DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; absolute internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area IABS    (ABS,DATA)
                                    354 	.area IABS    (ABS,DATA)
                                    355 ;--------------------------------------------------------
                                    356 ; bit data
                                    357 ;--------------------------------------------------------
                                    358 	.area BSEG    (BIT)
      000000                        359 _auto_flag::
      000000                        360 	.ds 1
                                    361 ;--------------------------------------------------------
                                    362 ; paged external ram data
                                    363 ;--------------------------------------------------------
                                    364 	.area PSEG    (PAG,XDATA)
                                    365 ;--------------------------------------------------------
                                    366 ; external ram data
                                    367 ;--------------------------------------------------------
                                    368 	.area XSEG    (XDATA)
                                    369 ;--------------------------------------------------------
                                    370 ; absolute external ram data
                                    371 ;--------------------------------------------------------
                                    372 	.area XABS    (ABS,XDATA)
                                    373 ;--------------------------------------------------------
                                    374 ; external initialized ram data
                                    375 ;--------------------------------------------------------
                                    376 	.area XISEG   (XDATA)
                                    377 	.area HOME    (CODE)
                                    378 	.area GSINIT0 (CODE)
                                    379 	.area GSINIT1 (CODE)
                                    380 	.area GSINIT2 (CODE)
                                    381 	.area GSINIT3 (CODE)
                                    382 	.area GSINIT4 (CODE)
                                    383 	.area GSINIT5 (CODE)
                                    384 	.area GSINIT  (CODE)
                                    385 	.area GSFINAL (CODE)
                                    386 	.area CSEG    (CODE)
                                    387 ;--------------------------------------------------------
                                    388 ; interrupt vector 
                                    389 ;--------------------------------------------------------
                                    390 	.area HOME    (CODE)
      000000                        391 __interrupt_vect:
      000000 02r00r00         [24]  392 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  393 	reti
      000004                        394 	.ds	7
      00000B 02r00r24         [24]  395 	ljmp	_isr_timer0
      00000E                        396 	.ds	5
      000013 32               [24]  397 	reti
      000014                        398 	.ds	7
      00001B 32               [24]  399 	reti
      00001C                        400 	.ds	7
      000023 02r00r00         [24]  401 	ljmp	_serial_isr
      000026                        402 	.ds	5
      00002B 02r02r4C         [24]  403 	ljmp	_timer1_ISR
                                    404 ;--------------------------------------------------------
                                    405 ; global & static initialisations
                                    406 ;--------------------------------------------------------
                                    407 	.area HOME    (CODE)
                                    408 	.area GSINIT  (CODE)
                                    409 	.area GSFINAL (CODE)
                                    410 	.area GSINIT  (CODE)
                                    411 	.globl __sdcc_gsinit_startup
                                    412 	.globl __sdcc_program_startup
                                    413 	.globl __start__stack
                                    414 	.globl __mcs51_genXINIT
                                    415 	.globl __mcs51_genXRAMCLEAR
                                    416 	.globl __mcs51_genRAMCLEAR
                                    417 ;	Receiver.c:40: char start=0;
      000000 75*00 00         [24]  418 	mov	_start,#0x00
                                    419 ;	Receiver.c:42: volatile int timerCount = 0;
      000003 E4               [12]  420 	clr	a
      000004 F5*02            [12]  421 	mov	_timerCount,a
      000006 F5*03            [12]  422 	mov	(_timerCount + 1),a
                                    423 ;	Receiver.c:43: volatile int serialCount = 0;
      000008 F5*04            [12]  424 	mov	_serialCount,a
      00000A F5*05            [12]  425 	mov	(_serialCount + 1),a
                                    426 ;	Receiver.c:44: volatile int timerCount2 = 0;
      00000C F5*06            [12]  427 	mov	_timerCount2,a
      00000E F5*07            [12]  428 	mov	(_timerCount2 + 1),a
                                    429 ;	Receiver.c:45: volatile int time_delay = 15;
      000010 75*08 0F         [24]  430 	mov	_time_delay,#0x0f
                                    431 ;	1-genFromRTrack replaced	mov	(_time_delay + 1),#0x00
      000013 F5*09            [12]  432 	mov	(_time_delay + 1),a
                                    433 ;	Receiver.c:46: volatile int dim_val = 1;
      000015 75*0A 01         [24]  434 	mov	_dim_val,#0x01
                                    435 ;	1-genFromRTrack replaced	mov	(_dim_val + 1),#0x00
      000018 F5*0B            [12]  436 	mov	(_dim_val + 1),a
                                    437 ;	Receiver.c:47: volatile int dim_val2 = 50;
      00001A 75*0C 32         [24]  438 	mov	_dim_val2,#0x32
                                    439 ;	1-genFromRTrack replaced	mov	(_dim_val2 + 1),#0x00
      00001D F5*0D            [12]  440 	mov	(_dim_val2 + 1),a
                                    441 ;	Receiver.c:48: volatile int dim1_val = 1;
      00001F 75*0E 01         [24]  442 	mov	_dim1_val,#0x01
                                    443 ;	1-genFromRTrack replaced	mov	(_dim1_val + 1),#0x00
      000022 F5*0F            [12]  444 	mov	(_dim1_val + 1),a
                                    445 ;	Receiver.c:49: volatile int dim1_val2 = 50;
      000024 75*10 32         [24]  446 	mov	_dim1_val2,#0x32
                                    447 ;	1-genFromRTrack replaced	mov	(_dim1_val2 + 1),#0x00
      000027 F5*11            [12]  448 	mov	(_dim1_val2 + 1),a
                                    449 	.area GSFINAL (CODE)
      000000 02r00r2E         [24]  450 	ljmp	__sdcc_program_startup
                                    451 ;--------------------------------------------------------
                                    452 ; Home
                                    453 ;--------------------------------------------------------
                                    454 	.area HOME    (CODE)
                                    455 	.area HOME    (CODE)
      00002E                        456 __sdcc_program_startup:
      00002E 02r04rAA         [24]  457 	ljmp	_main
                                    458 ;	return from main will return to caller
                                    459 ;--------------------------------------------------------
                                    460 ; code
                                    461 ;--------------------------------------------------------
                                    462 	.area CSEG    (CODE)
                                    463 ;------------------------------------------------------------
                                    464 ;Allocation info for local variables in function 'serial_isr'
                                    465 ;------------------------------------------------------------
                                    466 ;	Receiver.c:54: void serial_isr() __interrupt 4 
                                    467 ;	-----------------------------------------
                                    468 ;	 function serial_isr
                                    469 ;	-----------------------------------------
      000000                        470 _serial_isr:
                           000007   471 	ar7 = 0x07
                           000006   472 	ar6 = 0x06
                           000005   473 	ar5 = 0x05
                           000004   474 	ar4 = 0x04
                           000003   475 	ar3 = 0x03
                           000002   476 	ar2 = 0x02
                           000001   477 	ar1 = 0x01
                           000000   478 	ar0 = 0x00
      000000 C0 E0            [24]  479 	push	acc
      000002 C0 D0            [24]  480 	push	psw
                                    481 ;	Receiver.c:56: if(RI == 1)
      000004 30 98 13         [24]  482 	jnb	_RI,00106$
                                    483 ;	Receiver.c:58: data_r = SBUF; // Copy the received char
      000007 85 99*01         [24]  484 	mov	_data_r,_SBUF
                                    485 ;	Receiver.c:59: RI = 0;              // Clear the Receive interrupt flag
                                    486 ;	assignBit
      00000A C2 98            [12]  487 	clr	_RI
                                    488 ;	Receiver.c:60: if(data_r!='y')serialCount=0;
      00000C 74 79            [12]  489 	mov	a,#0x79
      00000E B5*01 02         [24]  490 	cjne	a,_data_r,00123$
      000011 80 0C            [24]  491 	sjmp	00108$
      000013                        492 00123$:
      000013 E4               [12]  493 	clr	a
      000014 F5*04            [12]  494 	mov	_serialCount,a
      000016 F5*05            [12]  495 	mov	(_serialCount + 1),a
      000018 80 05            [24]  496 	sjmp	00108$
      00001A                        497 00106$:
                                    498 ;	Receiver.c:62: else if(TI == 1)
                                    499 ;	Receiver.c:64: TI = 0;              // Clear the Transmit interrupt flag
                                    500 ;	assignBit
      00001A 10 99 02         [24]  501 	jbc	_TI,00124$
      00001D 80 00            [24]  502 	sjmp	00108$
      00001F                        503 00124$:
      00001F                        504 00108$:
                                    505 ;	Receiver.c:66: }
      00001F D0 D0            [24]  506 	pop	psw
      000021 D0 E0            [24]  507 	pop	acc
      000023 32               [24]  508 	reti
                                    509 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    510 ;	eliminated unneeded push/pop dpl
                                    511 ;	eliminated unneeded push/pop dph
                                    512 ;	eliminated unneeded push/pop b
                                    513 ;------------------------------------------------------------
                                    514 ;Allocation info for local variables in function 'isr_timer0'
                                    515 ;------------------------------------------------------------
                                    516 ;	Receiver.c:68: void isr_timer0(void) __interrupt 1   // It is called after every 5msec
                                    517 ;	-----------------------------------------
                                    518 ;	 function isr_timer0
                                    519 ;	-----------------------------------------
      000024                        520 _isr_timer0:
      000024 C0*00            [24]  521 	push	bits
      000026 C0 E0            [24]  522 	push	acc
      000028 C0 F0            [24]  523 	push	b
      00002A C0 82            [24]  524 	push	dpl
      00002C C0 83            [24]  525 	push	dph
      00002E C0 07            [24]  526 	push	(0+7)
      000030 C0 06            [24]  527 	push	(0+6)
      000032 C0 05            [24]  528 	push	(0+5)
      000034 C0 04            [24]  529 	push	(0+4)
      000036 C0 03            [24]  530 	push	(0+3)
      000038 C0 02            [24]  531 	push	(0+2)
      00003A C0 01            [24]  532 	push	(0+1)
      00003C C0 00            [24]  533 	push	(0+0)
      00003E C0 D0            [24]  534 	push	psw
      000040 75 D0 00         [24]  535 	mov	psw,#0x00
                                    536 ;	Receiver.c:70: TH0  = 0Xee;         // ReLoad the timer value for 5ms
      000043 75 8C EE         [24]  537 	mov	_TH0,#0xee
                                    538 ;	Receiver.c:71: TL0  = 0X00;
      000046 75 8A 00         [24]  539 	mov	_TL0,#0x00
                                    540 ;	Receiver.c:72: timerCount++;
      000049 AE*02            [24]  541 	mov	r6,_timerCount
      00004B AF*03            [24]  542 	mov	r7,(_timerCount + 1)
      00004D 74 01            [12]  543 	mov	a,#0x01
      00004F 2E               [12]  544 	add	a,r6
      000050 F5*02            [12]  545 	mov	_timerCount,a
      000052 E4               [12]  546 	clr	a
      000053 3F               [12]  547 	addc	a,r7
      000054 F5*03            [12]  548 	mov	(_timerCount + 1),a
                                    549 ;	Receiver.c:74: if(state!=20)
      000056 74 14            [12]  550 	mov	a,#0x14
      000058 B5*12 07         [24]  551 	cjne	a,_state,00240$
      00005B E4               [12]  552 	clr	a
      00005C B5*13 03         [24]  553 	cjne	a,(_state + 1),00240$
      00005F 02r02r2F         [24]  554 	ljmp	00158$
      000062                        555 00240$:
                                    556 ;	Receiver.c:76: if(timerCount < (time_delay*30)) // count for LED-ON delay
      000062 85*08*00         [24]  557 	mov	__mulint_PARM_2,_time_delay
      000065 85*09*01         [24]  558 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      000068 90 00 1E         [24]  559 	mov	dptr,#0x001e
      00006B 12r00r00         [24]  560 	lcall	__mulint
      00006E AE 82            [24]  561 	mov	r6,dpl
      000070 AF 83            [24]  562 	mov	r7,dph
      000072 C3               [12]  563 	clr	c
      000073 E5*02            [12]  564 	mov	a,_timerCount
      000075 9E               [12]  565 	subb	a,r6
      000076 E5*03            [12]  566 	mov	a,(_timerCount + 1)
      000078 64 80            [12]  567 	xrl	a,#0x80
      00007A 8F F0            [24]  568 	mov	b,r7
      00007C 63 F0 80         [24]  569 	xrl	b,#0x80
      00007F 95 F0            [12]  570 	subb	a,b
      000081 40 03            [24]  571 	jc	00241$
      000083 02r01r79         [24]  572 	ljmp	00154$
      000086                        573 00241$:
                                    574 ;	Receiver.c:78: switch(state)
      000086 E5*13            [12]  575 	mov	a,(_state + 1)
      000088 30 E7 03         [24]  576 	jnb	acc.7,00242$
      00008B 02r02r2F         [24]  577 	ljmp	00158$
      00008E                        578 00242$:
      00008E C3               [12]  579 	clr	c
      00008F 74 09            [12]  580 	mov	a,#0x09
      000091 95*12            [12]  581 	subb	a,_state
      000093 74 80            [12]  582 	mov	a,#(0x00 ^ 0x80)
      000095 85*13 F0         [24]  583 	mov	b,(_state + 1)
      000098 63 F0 80         [24]  584 	xrl	b,#0x80
      00009B 95 F0            [12]  585 	subb	a,b
      00009D 50 03            [24]  586 	jnc	00243$
      00009F 02r02r2F         [24]  587 	ljmp	00158$
      0000A2                        588 00243$:
      0000A2 E5*12            [12]  589 	mov	a,_state
      0000A4 24 0B            [12]  590 	add	a,#(00244$-3-.)
      0000A6 83               [24]  591 	movc	a,@a+pc
      0000A7 F5 82            [12]  592 	mov	dpl,a
      0000A9 E5*12            [12]  593 	mov	a,_state
      0000AB 24 0E            [12]  594 	add	a,#(00245$-3-.)
      0000AD 83               [24]  595 	movc	a,@a+pc
      0000AE F5 83            [12]  596 	mov	dph,a
      0000B0 E4               [12]  597 	clr	a
      0000B1 73               [24]  598 	jmp	@a+dptr
      0000B2                        599 00244$:
      0000B2rC6                     600 	.db	00101$
      0000B3rDC                     601 	.db	00104$
      0000B4rEF                     602 	.db	00107$
      0000B5r00                     603 	.db	00110$
      0000B6r11                     604 	.db	00113$
      0000B7r22                     605 	.db	00116$
      0000B8r33                     606 	.db	00119$
      0000B9r46                     607 	.db	00122$
      0000BAr4F                     608 	.db	00123$
      0000BBr64                     609 	.db	00126$
      0000BC                        610 00245$:
      0000BCs00                     611 	.db	00101$>>8
      0000BDs00                     612 	.db	00104$>>8
      0000BEs00                     613 	.db	00107$>>8
      0000BFs01                     614 	.db	00110$>>8
      0000C0s01                     615 	.db	00113$>>8
      0000C1s01                     616 	.db	00116$>>8
      0000C2s01                     617 	.db	00119$>>8
      0000C3s01                     618 	.db	00122$>>8
      0000C4s01                     619 	.db	00123$>>8
      0000C5s01                     620 	.db	00126$>>8
                                    621 ;	Receiver.c:80: case 0:up_led_main =1;center_led =0;down_led_main=1;									
      0000C6                        622 00101$:
                                    623 ;	assignBit
      0000C6 D2 81            [12]  624 	setb	_P0_1
                                    625 ;	assignBit
      0000C8 C2 80            [12]  626 	clr	_P0_0
                                    627 ;	assignBit
      0000CA D2 A6            [12]  628 	setb	_P2_6
                                    629 ;	Receiver.c:81: if(auto_flag)auto_led=1;
      0000CC 30*00 02         [24]  630 	jnb	_auto_flag,00103$
                                    631 ;	assignBit
      0000CF D2 A1            [12]  632 	setb	_P2_1
      0000D1                        633 00103$:
                                    634 ;	Receiver.c:82: up_led=0;down_led=0;main_out1=1;main_out2=1;
                                    635 ;	assignBit
      0000D1 C2 A7            [12]  636 	clr	_P2_7
                                    637 ;	assignBit
      0000D3 C2 A4            [12]  638 	clr	_P2_4
                                    639 ;	assignBit
      0000D5 D2 B6            [12]  640 	setb	_P3_6
                                    641 ;	assignBit
      0000D7 D2 B7            [12]  642 	setb	_P3_7
                                    643 ;	Receiver.c:83: break;	
      0000D9 02r02r2F         [24]  644 	ljmp	00158$
                                    645 ;	Receiver.c:84: case 1:up_led_main =1;center_led =0;down_led_main=0;
      0000DC                        646 00104$:
                                    647 ;	assignBit
      0000DC D2 81            [12]  648 	setb	_P0_1
                                    649 ;	assignBit
      0000DE C2 80            [12]  650 	clr	_P0_0
                                    651 ;	assignBit
      0000E0 C2 A6            [12]  652 	clr	_P2_6
                                    653 ;	Receiver.c:86: if(auto_flag)
      0000E2 20*00 03         [24]  654 	jb	_auto_flag,00247$
      0000E5 02r02r2F         [24]  655 	ljmp	00158$
      0000E8                        656 00247$:
                                    657 ;	Receiver.c:87: {main_out1=0;up_led=1;}
                                    658 ;	assignBit
      0000E8 C2 B6            [12]  659 	clr	_P3_6
                                    660 ;	assignBit
      0000EA D2 A7            [12]  661 	setb	_P2_7
                                    662 ;	Receiver.c:88: break;
      0000EC 02r02r2F         [24]  663 	ljmp	00158$
                                    664 ;	Receiver.c:89: case 2:up_led_main =1;center_led =0;down_led_main=0;
      0000EF                        665 00107$:
                                    666 ;	assignBit
      0000EF D2 81            [12]  667 	setb	_P0_1
                                    668 ;	assignBit
      0000F1 C2 80            [12]  669 	clr	_P0_0
                                    670 ;	assignBit
      0000F3 C2 A6            [12]  671 	clr	_P2_6
                                    672 ;	Receiver.c:91: if(auto_flag)
      0000F5 20*00 03         [24]  673 	jb	_auto_flag,00248$
      0000F8 02r02r2F         [24]  674 	ljmp	00158$
      0000FB                        675 00248$:
                                    676 ;	Receiver.c:93: up_led=1;}
                                    677 ;	assignBit
      0000FB D2 A7            [12]  678 	setb	_P2_7
                                    679 ;	Receiver.c:94: break;
      0000FD 02r02r2F         [24]  680 	ljmp	00158$
                                    681 ;	Receiver.c:95: case 3:up_led_main =1;center_led =1;down_led_main=0;
      000100                        682 00110$:
                                    683 ;	assignBit
      000100 D2 81            [12]  684 	setb	_P0_1
                                    685 ;	assignBit
      000102 D2 80            [12]  686 	setb	_P0_0
                                    687 ;	assignBit
      000104 C2 A6            [12]  688 	clr	_P2_6
                                    689 ;	Receiver.c:97: if(auto_flag)
      000106 20*00 03         [24]  690 	jb	_auto_flag,00249$
      000109 02r02r2F         [24]  691 	ljmp	00158$
      00010C                        692 00249$:
                                    693 ;	Receiver.c:99: up_led=1;}
                                    694 ;	assignBit
      00010C D2 A7            [12]  695 	setb	_P2_7
                                    696 ;	Receiver.c:100: break;
      00010E 02r02r2F         [24]  697 	ljmp	00158$
                                    698 ;	Receiver.c:101: case 4:	up_led_main =0;center_led =1;down_led_main=1;
      000111                        699 00113$:
                                    700 ;	assignBit
      000111 C2 81            [12]  701 	clr	_P0_1
                                    702 ;	assignBit
      000113 D2 80            [12]  703 	setb	_P0_0
                                    704 ;	assignBit
      000115 D2 A6            [12]  705 	setb	_P2_6
                                    706 ;	Receiver.c:102: if(auto_flag)
      000117 20*00 03         [24]  707 	jb	_auto_flag,00250$
      00011A 02r02r2F         [24]  708 	ljmp	00158$
      00011D                        709 00250$:
                                    710 ;	Receiver.c:104: down_led=1;}
                                    711 ;	assignBit
      00011D D2 A4            [12]  712 	setb	_P2_4
                                    713 ;	Receiver.c:105: break;
      00011F 02r02r2F         [24]  714 	ljmp	00158$
                                    715 ;	Receiver.c:106: case 5:up_led_main =0;center_led =0;down_led_main=1;
      000122                        716 00116$:
                                    717 ;	assignBit
      000122 C2 81            [12]  718 	clr	_P0_1
                                    719 ;	assignBit
      000124 C2 80            [12]  720 	clr	_P0_0
                                    721 ;	assignBit
      000126 D2 A6            [12]  722 	setb	_P2_6
                                    723 ;	Receiver.c:108: if(auto_flag)
      000128 20*00 03         [24]  724 	jb	_auto_flag,00251$
      00012B 02r02r2F         [24]  725 	ljmp	00158$
      00012E                        726 00251$:
                                    727 ;	Receiver.c:110: down_led=1;}
                                    728 ;	assignBit
      00012E D2 A4            [12]  729 	setb	_P2_4
                                    730 ;	Receiver.c:111: break;
      000130 02r02r2F         [24]  731 	ljmp	00158$
                                    732 ;	Receiver.c:112: case 6:	up_led_main =0;center_led =0;down_led_main=1;		
      000133                        733 00119$:
                                    734 ;	assignBit
      000133 C2 81            [12]  735 	clr	_P0_1
                                    736 ;	assignBit
      000135 C2 80            [12]  737 	clr	_P0_0
                                    738 ;	assignBit
      000137 D2 A6            [12]  739 	setb	_P2_6
                                    740 ;	Receiver.c:113: if(auto_flag)
      000139 20*00 03         [24]  741 	jb	_auto_flag,00252$
      00013C 02r02r2F         [24]  742 	ljmp	00158$
      00013F                        743 00252$:
                                    744 ;	Receiver.c:114: {main_out2=0;down_led=1;}
                                    745 ;	assignBit
      00013F C2 B7            [12]  746 	clr	_P3_7
                                    747 ;	assignBit
      000141 D2 A4            [12]  748 	setb	_P2_4
                                    749 ;	Receiver.c:115: break;
      000143 02r02r2F         [24]  750 	ljmp	00158$
                                    751 ;	Receiver.c:116: case 7:up_led_main =0;center_led =1;down_led_main=1;
      000146                        752 00122$:
                                    753 ;	assignBit
      000146 C2 81            [12]  754 	clr	_P0_1
                                    755 ;	assignBit
      000148 D2 80            [12]  756 	setb	_P0_0
                                    757 ;	assignBit
      00014A D2 A6            [12]  758 	setb	_P2_6
                                    759 ;	Receiver.c:117: break;
      00014C 02r02r2F         [24]  760 	ljmp	00158$
                                    761 ;	Receiver.c:119: case 8:up_led_main =1;center_led =0;down_led_main=0;
      00014F                        762 00123$:
                                    763 ;	assignBit
      00014F D2 81            [12]  764 	setb	_P0_1
                                    765 ;	assignBit
      000151 C2 80            [12]  766 	clr	_P0_0
                                    767 ;	assignBit
      000153 C2 A6            [12]  768 	clr	_P2_6
                                    769 ;	Receiver.c:120: main_out1=1;main_out2=1;
                                    770 ;	assignBit
      000155 D2 B6            [12]  771 	setb	_P3_6
                                    772 ;	assignBit
      000157 D2 B7            [12]  773 	setb	_P3_7
                                    774 ;	Receiver.c:121: if(auto_flag)
      000159 20*00 03         [24]  775 	jb	_auto_flag,00253$
      00015C 02r02r2F         [24]  776 	ljmp	00158$
      00015F                        777 00253$:
                                    778 ;	Receiver.c:122: up_led=1;
                                    779 ;	assignBit
      00015F D2 A7            [12]  780 	setb	_P2_7
                                    781 ;	Receiver.c:123: break;
      000161 02r02r2F         [24]  782 	ljmp	00158$
                                    783 ;	Receiver.c:125: case 9:	up_led_main =0;center_led =0;down_led_main=1;
      000164                        784 00126$:
                                    785 ;	assignBit
      000164 C2 81            [12]  786 	clr	_P0_1
                                    787 ;	assignBit
      000166 C2 80            [12]  788 	clr	_P0_0
                                    789 ;	assignBit
      000168 D2 A6            [12]  790 	setb	_P2_6
                                    791 ;	Receiver.c:126: main_out1=1;main_out2=1;
                                    792 ;	assignBit
      00016A D2 B6            [12]  793 	setb	_P3_6
                                    794 ;	assignBit
      00016C D2 B7            [12]  795 	setb	_P3_7
                                    796 ;	Receiver.c:127: if(auto_flag)
      00016E 20*00 03         [24]  797 	jb	_auto_flag,00254$
      000171 02r02r2F         [24]  798 	ljmp	00158$
      000174                        799 00254$:
                                    800 ;	Receiver.c:128: down_led=1;
                                    801 ;	assignBit
      000174 D2 A4            [12]  802 	setb	_P2_4
                                    803 ;	Receiver.c:129: break;
      000176 02r02r2F         [24]  804 	ljmp	00158$
                                    805 ;	Receiver.c:131: }	
      000179                        806 00154$:
                                    807 ;	Receiver.c:135: else if((timerCount > time_delay) &&(timerCount<time_delay*60)) // count for LED-ON delay
      000179 C3               [12]  808 	clr	c
      00017A E5*08            [12]  809 	mov	a,_time_delay
      00017C 95*02            [12]  810 	subb	a,_timerCount
      00017E E5*09            [12]  811 	mov	a,(_time_delay + 1)
      000180 64 80            [12]  812 	xrl	a,#0x80
      000182 85*03 F0         [24]  813 	mov	b,(_timerCount + 1)
      000185 63 F0 80         [24]  814 	xrl	b,#0x80
      000188 95 F0            [12]  815 	subb	a,b
      00018A 40 03            [24]  816 	jc	00255$
      00018C 02r02r2A         [24]  817 	ljmp	00150$
      00018F                        818 00255$:
      00018F 85*08*00         [24]  819 	mov	__mulint_PARM_2,_time_delay
      000192 85*09*01         [24]  820 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      000195 90 00 3C         [24]  821 	mov	dptr,#0x003c
      000198 12r00r00         [24]  822 	lcall	__mulint
      00019B AE 82            [24]  823 	mov	r6,dpl
      00019D AF 83            [24]  824 	mov	r7,dph
      00019F C3               [12]  825 	clr	c
      0001A0 E5*02            [12]  826 	mov	a,_timerCount
      0001A2 9E               [12]  827 	subb	a,r6
      0001A3 E5*03            [12]  828 	mov	a,(_timerCount + 1)
      0001A5 64 80            [12]  829 	xrl	a,#0x80
      0001A7 8F F0            [24]  830 	mov	b,r7
      0001A9 63 F0 80         [24]  831 	xrl	b,#0x80
      0001AC 95 F0            [12]  832 	subb	a,b
      0001AE 40 03            [24]  833 	jc	00256$
      0001B0 02r02r2A         [24]  834 	ljmp	00150$
      0001B3                        835 00256$:
                                    836 ;	Receiver.c:137: switch(state)
      0001B3 E5*13            [12]  837 	mov	a,(_state + 1)
      0001B5 30 E7 03         [24]  838 	jnb	acc.7,00257$
      0001B8 02r02r2F         [24]  839 	ljmp	00158$
      0001BB                        840 00257$:
      0001BB C3               [12]  841 	clr	c
      0001BC 74 09            [12]  842 	mov	a,#0x09
      0001BE 95*12            [12]  843 	subb	a,_state
      0001C0 74 80            [12]  844 	mov	a,#(0x00 ^ 0x80)
      0001C2 85*13 F0         [24]  845 	mov	b,(_state + 1)
      0001C5 63 F0 80         [24]  846 	xrl	b,#0x80
      0001C8 95 F0            [12]  847 	subb	a,b
      0001CA 50 03            [24]  848 	jnc	00258$
      0001CC 02r02r2F         [24]  849 	ljmp	00158$
      0001CF                        850 00258$:
      0001CF E5*12            [12]  851 	mov	a,_state
      0001D1 24 0B            [12]  852 	add	a,#(00259$-3-.)
      0001D3 83               [24]  853 	movc	a,@a+pc
      0001D4 F5 82            [12]  854 	mov	dpl,a
      0001D6 E5*12            [12]  855 	mov	a,_state
      0001D8 24 0E            [12]  856 	add	a,#(00260$-3-.)
      0001DA 83               [24]  857 	movc	a,@a+pc
      0001DB F5 83            [12]  858 	mov	dph,a
      0001DD E4               [12]  859 	clr	a
      0001DE 73               [24]  860 	jmp	@a+dptr
      0001DF                        861 00259$:
      0001DFrF3                     862 	.db	00131$
      0001E0r08                     863 	.db	00141$
      0001E1rFC                     864 	.db	00140$
      0001E2rFC                     865 	.db	00140$
      0001E3rFC                     866 	.db	00140$
      0001E4rFC                     867 	.db	00140$
      0001E5r19                     868 	.db	00144$
      0001E6rFC                     869 	.db	00140$
      0001E7rFC                     870 	.db	00140$
      0001E8rFC                     871 	.db	00140$
      0001E9                        872 00260$:
      0001E9s01                     873 	.db	00131$>>8
      0001EAs02                     874 	.db	00141$>>8
      0001EBs01                     875 	.db	00140$>>8
      0001ECs01                     876 	.db	00140$>>8
      0001EDs01                     877 	.db	00140$>>8
      0001EEs01                     878 	.db	00140$>>8
      0001EFs02                     879 	.db	00144$>>8
      0001F0s01                     880 	.db	00140$>>8
      0001F1s01                     881 	.db	00140$>>8
      0001F2s01                     882 	.db	00140$>>8
                                    883 ;	Receiver.c:139: case 0:	if(auto_flag)	{auto_led=0;main_out1=1;main_out2=1;}
      0001F3                        884 00131$:
      0001F3 30*00 06         [24]  885 	jnb	_auto_flag,00140$
                                    886 ;	assignBit
      0001F6 C2 A1            [12]  887 	clr	_P2_1
                                    888 ;	assignBit
      0001F8 D2 B6            [12]  889 	setb	_P3_6
                                    890 ;	assignBit
      0001FA D2 B7            [12]  891 	setb	_P3_7
                                    892 ;	Receiver.c:146: case 9:up_led_main =0;center_led =0;down_led_main=0;up_led=0;down_led=0;break;
      0001FC                        893 00140$:
                                    894 ;	assignBit
      0001FC C2 81            [12]  895 	clr	_P0_1
                                    896 ;	assignBit
      0001FE C2 80            [12]  897 	clr	_P0_0
                                    898 ;	assignBit
      000200 C2 A6            [12]  899 	clr	_P2_6
                                    900 ;	assignBit
      000202 C2 A7            [12]  901 	clr	_P2_7
                                    902 ;	assignBit
      000204 C2 A4            [12]  903 	clr	_P2_4
                                    904 ;	Receiver.c:147: case 1:up_led_main =1;center_led =0;down_led_main=0;
      000206 80 27            [24]  905 	sjmp	00158$
      000208                        906 00141$:
                                    907 ;	assignBit
      000208 D2 81            [12]  908 	setb	_P0_1
                                    909 ;	assignBit
      00020A C2 80            [12]  910 	clr	_P0_0
                                    911 ;	assignBit
      00020C C2 A6            [12]  912 	clr	_P2_6
                                    913 ;	Receiver.c:148: if(auto_flag)	{main_out1=0;up_led=1;down_led=0;}break;
      00020E 30*00 1E         [24]  914 	jnb	_auto_flag,00158$
                                    915 ;	assignBit
      000211 C2 B6            [12]  916 	clr	_P3_6
                                    917 ;	assignBit
      000213 D2 A7            [12]  918 	setb	_P2_7
                                    919 ;	assignBit
      000215 C2 A4            [12]  920 	clr	_P2_4
                                    921 ;	Receiver.c:150: case 6:	up_led_main =0;center_led =0;down_led_main=1;
      000217 80 16            [24]  922 	sjmp	00158$
      000219                        923 00144$:
                                    924 ;	assignBit
      000219 C2 81            [12]  925 	clr	_P0_1
                                    926 ;	assignBit
      00021B C2 80            [12]  927 	clr	_P0_0
                                    928 ;	assignBit
      00021D D2 A6            [12]  929 	setb	_P2_6
                                    930 ;	Receiver.c:151: up_led=0;if(auto_flag){main_out2=0;down_led=1;}break;
                                    931 ;	assignBit
      00021F C2 A7            [12]  932 	clr	_P2_7
      000221 30*00 0B         [24]  933 	jnb	_auto_flag,00158$
                                    934 ;	assignBit
      000224 C2 B7            [12]  935 	clr	_P3_7
                                    936 ;	assignBit
      000226 D2 A4            [12]  937 	setb	_P2_4
                                    938 ;	Receiver.c:154: }
      000228 80 05            [24]  939 	sjmp	00158$
      00022A                        940 00150$:
                                    941 ;	Receiver.c:158: {timerCount = 0;}
      00022A E4               [12]  942 	clr	a
      00022B F5*02            [12]  943 	mov	_timerCount,a
      00022D F5*03            [12]  944 	mov	(_timerCount + 1),a
      00022F                        945 00158$:
                                    946 ;	Receiver.c:160: } //timer end
      00022F D0 D0            [24]  947 	pop	psw
      000231 D0 00            [24]  948 	pop	(0+0)
      000233 D0 01            [24]  949 	pop	(0+1)
      000235 D0 02            [24]  950 	pop	(0+2)
      000237 D0 03            [24]  951 	pop	(0+3)
      000239 D0 04            [24]  952 	pop	(0+4)
      00023B D0 05            [24]  953 	pop	(0+5)
      00023D D0 06            [24]  954 	pop	(0+6)
      00023F D0 07            [24]  955 	pop	(0+7)
      000241 D0 83            [24]  956 	pop	dph
      000243 D0 82            [24]  957 	pop	dpl
      000245 D0 F0            [24]  958 	pop	b
      000247 D0 E0            [24]  959 	pop	acc
      000249 D0*00            [24]  960 	pop	bits
      00024B 32               [24]  961 	reti
                                    962 ;------------------------------------------------------------
                                    963 ;Allocation info for local variables in function 'timer1_ISR'
                                    964 ;------------------------------------------------------------
                                    965 ;	Receiver.c:163: void timer1_ISR (void) __interrupt 5
                                    966 ;	-----------------------------------------
                                    967 ;	 function timer1_ISR
                                    968 ;	-----------------------------------------
      00024C                        969 _timer1_ISR:
      00024C C0*00            [24]  970 	push	bits
      00024E C0 E0            [24]  971 	push	acc
      000250 C0 F0            [24]  972 	push	b
      000252 C0 82            [24]  973 	push	dpl
      000254 C0 83            [24]  974 	push	dph
      000256 C0 07            [24]  975 	push	(0+7)
      000258 C0 06            [24]  976 	push	(0+6)
      00025A C0 05            [24]  977 	push	(0+5)
      00025C C0 04            [24]  978 	push	(0+4)
      00025E C0 03            [24]  979 	push	(0+3)
      000260 C0 02            [24]  980 	push	(0+2)
      000262 C0 01            [24]  981 	push	(0+1)
      000264 C0 00            [24]  982 	push	(0+0)
      000266 C0 D0            [24]  983 	push	psw
      000268 75 D0 00         [24]  984 	mov	psw,#0x00
                                    985 ;	Receiver.c:165: TF2 = 0;            /* Clear the interrupt request */
                                    986 ;	assignBit
      00026B C2 CF            [12]  987 	clr	_TF2
                                    988 ;	Receiver.c:166: timerCount2++;
      00026D AE*06            [24]  989 	mov	r6,_timerCount2
      00026F AF*07            [24]  990 	mov	r7,(_timerCount2 + 1)
      000271 74 01            [12]  991 	mov	a,#0x01
      000273 2E               [12]  992 	add	a,r6
      000274 F5*06            [12]  993 	mov	_timerCount2,a
      000276 E4               [12]  994 	clr	a
      000277 3F               [12]  995 	addc	a,r7
      000278 F5*07            [12]  996 	mov	(_timerCount2 + 1),a
                                    997 ;	Receiver.c:167: serialCount++;
      00027A AE*04            [24]  998 	mov	r6,_serialCount
      00027C AF*05            [24]  999 	mov	r7,(_serialCount + 1)
      00027E 74 01            [12] 1000 	mov	a,#0x01
      000280 2E               [12] 1001 	add	a,r6
      000281 F5*04            [12] 1002 	mov	_serialCount,a
      000283 E4               [12] 1003 	clr	a
      000284 3F               [12] 1004 	addc	a,r7
      000285 F5*05            [12] 1005 	mov	(_serialCount + 1),a
                                   1006 ;	Receiver.c:168: rst_out=!rst_out;
      000287 B2 96            [12] 1007 	cpl	_P1_6
                                   1008 ;	Receiver.c:169: if(dim1_val)
      000289 E5*0E            [12] 1009 	mov	a,_dim1_val
      00028B 45*0F            [12] 1010 	orl	a,(_dim1_val + 1)
      00028D 60 12            [24] 1011 	jz	00105$
                                   1012 ;	Receiver.c:170: {dim1_val--;dim_out=1;}
      00028F AE*0E            [24] 1013 	mov	r6,_dim1_val
      000291 AF*0F            [24] 1014 	mov	r7,(_dim1_val + 1)
      000293 EE               [12] 1015 	mov	a,r6
      000294 24 FF            [12] 1016 	add	a,#0xff
      000296 F5*0E            [12] 1017 	mov	_dim1_val,a
      000298 EF               [12] 1018 	mov	a,r7
      000299 34 FF            [12] 1019 	addc	a,#0xff
      00029B F5*0F            [12] 1020 	mov	(_dim1_val + 1),a
                                   1021 ;	assignBit
      00029D D2 82            [12] 1022 	setb	_P0_2
      00029F 80 24            [24] 1023 	sjmp	00106$
      0002A1                       1024 00105$:
                                   1025 ;	Receiver.c:172: else if(dim1_val2){dim1_val2--;dim_out=0;}
      0002A1 E5*10            [12] 1026 	mov	a,_dim1_val2
      0002A3 45*11            [12] 1027 	orl	a,(_dim1_val2 + 1)
      0002A5 60 12            [24] 1028 	jz	00102$
      0002A7 AE*10            [24] 1029 	mov	r6,_dim1_val2
      0002A9 AF*11            [24] 1030 	mov	r7,(_dim1_val2 + 1)
      0002AB EE               [12] 1031 	mov	a,r6
      0002AC 24 FF            [12] 1032 	add	a,#0xff
      0002AE F5*10            [12] 1033 	mov	_dim1_val2,a
      0002B0 EF               [12] 1034 	mov	a,r7
      0002B1 34 FF            [12] 1035 	addc	a,#0xff
      0002B3 F5*11            [12] 1036 	mov	(_dim1_val2 + 1),a
                                   1037 ;	assignBit
      0002B5 C2 82            [12] 1038 	clr	_P0_2
      0002B7 80 0C            [24] 1039 	sjmp	00106$
      0002B9                       1040 00102$:
                                   1041 ;	Receiver.c:174: else {dim1_val = dim_val;dim1_val2 = dim_val2;}    
      0002B9 85*0A*0E         [24] 1042 	mov	_dim1_val,_dim_val
      0002BC 85*0B*0F         [24] 1043 	mov	(_dim1_val + 1),(_dim_val + 1)
      0002BF 85*0C*10         [24] 1044 	mov	_dim1_val2,_dim_val2
      0002C2 85*0D*11         [24] 1045 	mov	(_dim1_val2 + 1),(_dim_val2 + 1)
      0002C5                       1046 00106$:
                                   1047 ;	Receiver.c:176: if(auto_flag)
      0002C5 20*00 03         [24] 1048 	jb	_auto_flag,00245$
      0002C8 02r04r77         [24] 1049 	ljmp	00150$
      0002CB                       1050 00245$:
                                   1051 ;	Receiver.c:178: if(timerCount2<1000)
      0002CB C3               [12] 1052 	clr	c
      0002CC E5*06            [12] 1053 	mov	a,_timerCount2
      0002CE 94 E8            [12] 1054 	subb	a,#0xe8
      0002D0 E5*07            [12] 1055 	mov	a,(_timerCount2 + 1)
      0002D2 64 80            [12] 1056 	xrl	a,#0x80
      0002D4 94 83            [12] 1057 	subb	a,#0x83
      0002D6 40 03            [24] 1058 	jc	00246$
      0002D8 02r03rA2         [24] 1059 	ljmp	00147$
      0002DB                       1060 00246$:
                                   1061 ;	Receiver.c:180: switch(state)
      0002DB 74 02            [12] 1062 	mov	a,#0x02
      0002DD B5*12 06         [24] 1063 	cjne	a,_state,00247$
      0002E0 E4               [12] 1064 	clr	a
      0002E1 B5*13 02         [24] 1065 	cjne	a,(_state + 1),00247$
      0002E4 80 24            [24] 1066 	sjmp	00107$
      0002E6                       1067 00247$:
      0002E6 74 03            [12] 1068 	mov	a,#0x03
      0002E8 B5*12 06         [24] 1069 	cjne	a,_state,00248$
      0002EB E4               [12] 1070 	clr	a
      0002EC B5*13 02         [24] 1071 	cjne	a,(_state + 1),00248$
      0002EF 80 3F            [24] 1072 	sjmp	00111$
      0002F1                       1073 00248$:
      0002F1 74 04            [12] 1074 	mov	a,#0x04
      0002F3 B5*12 06         [24] 1075 	cjne	a,_state,00249$
      0002F6 E4               [12] 1076 	clr	a
      0002F7 B5*13 02         [24] 1077 	cjne	a,(_state + 1),00249$
      0002FA 80 5A            [24] 1078 	sjmp	00115$
      0002FC                       1079 00249$:
      0002FC 74 05            [12] 1080 	mov	a,#0x05
      0002FE B5*12 06         [24] 1081 	cjne	a,_state,00250$
      000301 E4               [12] 1082 	clr	a
      000302 B5*13 02         [24] 1083 	cjne	a,(_state + 1),00250$
      000305 80 75            [24] 1084 	sjmp	00119$
      000307                       1085 00250$:
      000307 02r04r77         [24] 1086 	ljmp	00150$
                                   1087 ;	Receiver.c:182: case 2:	if(timerCount2%4){main_out1=1;main_out2=1;}
      00030A                       1088 00107$:
      00030A 75*00 04         [24] 1089 	mov	__modsint_PARM_2,#0x04
      00030D 75*01 00         [24] 1090 	mov	(__modsint_PARM_2 + 1),#0x00
      000310 85*06 82         [24] 1091 	mov	dpl,_timerCount2
      000313 85*07 83         [24] 1092 	mov	dph,(_timerCount2 + 1)
      000316 12r00r00         [24] 1093 	lcall	__modsint
      000319 E5 82            [12] 1094 	mov	a,dpl
      00031B 85 83 F0         [24] 1095 	mov	b,dph
      00031E 45 F0            [12] 1096 	orl	a,b
      000320 60 07            [24] 1097 	jz	00109$
                                   1098 ;	assignBit
      000322 D2 B6            [12] 1099 	setb	_P3_6
                                   1100 ;	assignBit
      000324 D2 B7            [12] 1101 	setb	_P3_7
      000326 02r04r77         [24] 1102 	ljmp	00150$
      000329                       1103 00109$:
                                   1104 ;	Receiver.c:183: else {main_out1=0;main_out2=1;}
                                   1105 ;	assignBit
      000329 C2 B6            [12] 1106 	clr	_P3_6
                                   1107 ;	assignBit
      00032B D2 B7            [12] 1108 	setb	_P3_7
                                   1109 ;	Receiver.c:184: break;
      00032D 02r04r77         [24] 1110 	ljmp	00150$
                                   1111 ;	Receiver.c:186: case 3:	if(timerCount2%4){main_out1=1;main_out2=1;}
      000330                       1112 00111$:
      000330 75*00 04         [24] 1113 	mov	__modsint_PARM_2,#0x04
      000333 75*01 00         [24] 1114 	mov	(__modsint_PARM_2 + 1),#0x00
      000336 85*06 82         [24] 1115 	mov	dpl,_timerCount2
      000339 85*07 83         [24] 1116 	mov	dph,(_timerCount2 + 1)
      00033C 12r00r00         [24] 1117 	lcall	__modsint
      00033F E5 82            [12] 1118 	mov	a,dpl
      000341 85 83 F0         [24] 1119 	mov	b,dph
      000344 45 F0            [12] 1120 	orl	a,b
      000346 60 07            [24] 1121 	jz	00113$
                                   1122 ;	assignBit
      000348 D2 B6            [12] 1123 	setb	_P3_6
                                   1124 ;	assignBit
      00034A D2 B7            [12] 1125 	setb	_P3_7
      00034C 02r04r77         [24] 1126 	ljmp	00150$
      00034F                       1127 00113$:
                                   1128 ;	Receiver.c:187: else {main_out1=0;main_out2=1;}
                                   1129 ;	assignBit
      00034F C2 B6            [12] 1130 	clr	_P3_6
                                   1131 ;	assignBit
      000351 D2 B7            [12] 1132 	setb	_P3_7
                                   1133 ;	Receiver.c:188: break;
      000353 02r04r77         [24] 1134 	ljmp	00150$
                                   1135 ;	Receiver.c:190: case 4:	if(timerCount2%4){main_out1=1;main_out2=1;}
      000356                       1136 00115$:
      000356 75*00 04         [24] 1137 	mov	__modsint_PARM_2,#0x04
      000359 75*01 00         [24] 1138 	mov	(__modsint_PARM_2 + 1),#0x00
      00035C 85*06 82         [24] 1139 	mov	dpl,_timerCount2
      00035F 85*07 83         [24] 1140 	mov	dph,(_timerCount2 + 1)
      000362 12r00r00         [24] 1141 	lcall	__modsint
      000365 E5 82            [12] 1142 	mov	a,dpl
      000367 85 83 F0         [24] 1143 	mov	b,dph
      00036A 45 F0            [12] 1144 	orl	a,b
      00036C 60 07            [24] 1145 	jz	00117$
                                   1146 ;	assignBit
      00036E D2 B6            [12] 1147 	setb	_P3_6
                                   1148 ;	assignBit
      000370 D2 B7            [12] 1149 	setb	_P3_7
      000372 02r04r77         [24] 1150 	ljmp	00150$
      000375                       1151 00117$:
                                   1152 ;	Receiver.c:191: else {main_out1=1;main_out2=0;}
                                   1153 ;	assignBit
      000375 D2 B6            [12] 1154 	setb	_P3_6
                                   1155 ;	assignBit
      000377 C2 B7            [12] 1156 	clr	_P3_7
                                   1157 ;	Receiver.c:192: break;
      000379 02r04r77         [24] 1158 	ljmp	00150$
                                   1159 ;	Receiver.c:194: case 5:	if(timerCount2%4){main_out1=1;main_out2=1;}
      00037C                       1160 00119$:
      00037C 75*00 04         [24] 1161 	mov	__modsint_PARM_2,#0x04
      00037F 75*01 00         [24] 1162 	mov	(__modsint_PARM_2 + 1),#0x00
      000382 85*06 82         [24] 1163 	mov	dpl,_timerCount2
      000385 85*07 83         [24] 1164 	mov	dph,(_timerCount2 + 1)
      000388 12r00r00         [24] 1165 	lcall	__modsint
      00038B E5 82            [12] 1166 	mov	a,dpl
      00038D 85 83 F0         [24] 1167 	mov	b,dph
      000390 45 F0            [12] 1168 	orl	a,b
      000392 60 07            [24] 1169 	jz	00121$
                                   1170 ;	assignBit
      000394 D2 B6            [12] 1171 	setb	_P3_6
                                   1172 ;	assignBit
      000396 D2 B7            [12] 1173 	setb	_P3_7
      000398 02r04r77         [24] 1174 	ljmp	00150$
      00039B                       1175 00121$:
                                   1176 ;	Receiver.c:195: else {main_out1=1;main_out2=0;}
                                   1177 ;	assignBit
      00039B D2 B6            [12] 1178 	setb	_P3_6
                                   1179 ;	assignBit
      00039D C2 B7            [12] 1180 	clr	_P3_7
                                   1181 ;	Receiver.c:196: break;
      00039F 02r04r77         [24] 1182 	ljmp	00150$
                                   1183 ;	Receiver.c:199: }}
      0003A2                       1184 00147$:
                                   1185 ;	Receiver.c:201: else if(timerCount2<2000)
      0003A2 C3               [12] 1186 	clr	c
      0003A3 E5*06            [12] 1187 	mov	a,_timerCount2
      0003A5 94 D0            [12] 1188 	subb	a,#0xd0
      0003A7 E5*07            [12] 1189 	mov	a,(_timerCount2 + 1)
      0003A9 64 80            [12] 1190 	xrl	a,#0x80
      0003AB 94 87            [12] 1191 	subb	a,#0x87
      0003AD 40 03            [24] 1192 	jc	00255$
      0003AF 02r04r72         [24] 1193 	ljmp	00144$
      0003B2                       1194 00255$:
                                   1195 ;	Receiver.c:203: switch(state)
      0003B2 74 02            [12] 1196 	mov	a,#0x02
      0003B4 B5*12 06         [24] 1197 	cjne	a,_state,00256$
      0003B7 E4               [12] 1198 	clr	a
      0003B8 B5*13 02         [24] 1199 	cjne	a,(_state + 1),00256$
      0003BB 80 24            [24] 1200 	sjmp	00125$
      0003BD                       1201 00256$:
      0003BD 74 03            [12] 1202 	mov	a,#0x03
      0003BF B5*12 06         [24] 1203 	cjne	a,_state,00257$
      0003C2 E4               [12] 1204 	clr	a
      0003C3 B5*13 02         [24] 1205 	cjne	a,(_state + 1),00257$
      0003C6 80 3E            [24] 1206 	sjmp	00129$
      0003C8                       1207 00257$:
      0003C8 74 04            [12] 1208 	mov	a,#0x04
      0003CA B5*12 06         [24] 1209 	cjne	a,_state,00258$
      0003CD E4               [12] 1210 	clr	a
      0003CE B5*13 02         [24] 1211 	cjne	a,(_state + 1),00258$
      0003D1 80 57            [24] 1212 	sjmp	00133$
      0003D3                       1213 00258$:
      0003D3 74 05            [12] 1214 	mov	a,#0x05
      0003D5 B5*12 06         [24] 1215 	cjne	a,_state,00259$
      0003D8 E4               [12] 1216 	clr	a
      0003D9 B5*13 02         [24] 1217 	cjne	a,(_state + 1),00259$
      0003DC 80 70            [24] 1218 	sjmp	00137$
      0003DE                       1219 00259$:
      0003DE 02r04r77         [24] 1220 	ljmp	00150$
                                   1221 ;	Receiver.c:205: case 2:	if(timerCount2%10){main_out1=1;main_out2=1;}
      0003E1                       1222 00125$:
      0003E1 75*00 0A         [24] 1223 	mov	__modsint_PARM_2,#0x0a
      0003E4 75*01 00         [24] 1224 	mov	(__modsint_PARM_2 + 1),#0x00
      0003E7 85*06 82         [24] 1225 	mov	dpl,_timerCount2
      0003EA 85*07 83         [24] 1226 	mov	dph,(_timerCount2 + 1)
      0003ED 12r00r00         [24] 1227 	lcall	__modsint
      0003F0 E5 82            [12] 1228 	mov	a,dpl
      0003F2 85 83 F0         [24] 1229 	mov	b,dph
      0003F5 45 F0            [12] 1230 	orl	a,b
      0003F7 60 07            [24] 1231 	jz	00127$
                                   1232 ;	assignBit
      0003F9 D2 B6            [12] 1233 	setb	_P3_6
                                   1234 ;	assignBit
      0003FB D2 B7            [12] 1235 	setb	_P3_7
      0003FD 02r04r77         [24] 1236 	ljmp	00150$
      000400                       1237 00127$:
                                   1238 ;	Receiver.c:206: else {main_out1=0;main_out2=1;}
                                   1239 ;	assignBit
      000400 C2 B6            [12] 1240 	clr	_P3_6
                                   1241 ;	assignBit
      000402 D2 B7            [12] 1242 	setb	_P3_7
                                   1243 ;	Receiver.c:207: break;
                                   1244 ;	Receiver.c:209: case 3:	if(timerCount2%10){main_out1=1;main_out2=1;}
      000404 80 71            [24] 1245 	sjmp	00150$
      000406                       1246 00129$:
      000406 75*00 0A         [24] 1247 	mov	__modsint_PARM_2,#0x0a
      000409 75*01 00         [24] 1248 	mov	(__modsint_PARM_2 + 1),#0x00
      00040C 85*06 82         [24] 1249 	mov	dpl,_timerCount2
      00040F 85*07 83         [24] 1250 	mov	dph,(_timerCount2 + 1)
      000412 12r00r00         [24] 1251 	lcall	__modsint
      000415 E5 82            [12] 1252 	mov	a,dpl
      000417 85 83 F0         [24] 1253 	mov	b,dph
      00041A 45 F0            [12] 1254 	orl	a,b
      00041C 60 06            [24] 1255 	jz	00131$
                                   1256 ;	assignBit
      00041E D2 B6            [12] 1257 	setb	_P3_6
                                   1258 ;	assignBit
      000420 D2 B7            [12] 1259 	setb	_P3_7
      000422 80 53            [24] 1260 	sjmp	00150$
      000424                       1261 00131$:
                                   1262 ;	Receiver.c:210: else {main_out1=0;main_out2=1;}
                                   1263 ;	assignBit
      000424 C2 B6            [12] 1264 	clr	_P3_6
                                   1265 ;	assignBit
      000426 D2 B7            [12] 1266 	setb	_P3_7
                                   1267 ;	Receiver.c:211: break;
                                   1268 ;	Receiver.c:213: case 4:	if(timerCount2%10){main_out1=1;main_out2=1;}
      000428 80 4D            [24] 1269 	sjmp	00150$
      00042A                       1270 00133$:
      00042A 75*00 0A         [24] 1271 	mov	__modsint_PARM_2,#0x0a
      00042D 75*01 00         [24] 1272 	mov	(__modsint_PARM_2 + 1),#0x00
      000430 85*06 82         [24] 1273 	mov	dpl,_timerCount2
      000433 85*07 83         [24] 1274 	mov	dph,(_timerCount2 + 1)
      000436 12r00r00         [24] 1275 	lcall	__modsint
      000439 E5 82            [12] 1276 	mov	a,dpl
      00043B 85 83 F0         [24] 1277 	mov	b,dph
      00043E 45 F0            [12] 1278 	orl	a,b
      000440 60 06            [24] 1279 	jz	00135$
                                   1280 ;	assignBit
      000442 D2 B6            [12] 1281 	setb	_P3_6
                                   1282 ;	assignBit
      000444 D2 B7            [12] 1283 	setb	_P3_7
      000446 80 2F            [24] 1284 	sjmp	00150$
      000448                       1285 00135$:
                                   1286 ;	Receiver.c:214: else {main_out1=1;main_out2=0;}
                                   1287 ;	assignBit
      000448 D2 B6            [12] 1288 	setb	_P3_6
                                   1289 ;	assignBit
      00044A C2 B7            [12] 1290 	clr	_P3_7
                                   1291 ;	Receiver.c:215: break;
                                   1292 ;	Receiver.c:217: case 5:	if(timerCount2%10){main_out1=1;main_out2=1;}
      00044C 80 29            [24] 1293 	sjmp	00150$
      00044E                       1294 00137$:
      00044E 75*00 0A         [24] 1295 	mov	__modsint_PARM_2,#0x0a
      000451 75*01 00         [24] 1296 	mov	(__modsint_PARM_2 + 1),#0x00
      000454 85*06 82         [24] 1297 	mov	dpl,_timerCount2
      000457 85*07 83         [24] 1298 	mov	dph,(_timerCount2 + 1)
      00045A 12r00r00         [24] 1299 	lcall	__modsint
      00045D E5 82            [12] 1300 	mov	a,dpl
      00045F 85 83 F0         [24] 1301 	mov	b,dph
      000462 45 F0            [12] 1302 	orl	a,b
      000464 60 06            [24] 1303 	jz	00139$
                                   1304 ;	assignBit
      000466 D2 B6            [12] 1305 	setb	_P3_6
                                   1306 ;	assignBit
      000468 D2 B7            [12] 1307 	setb	_P3_7
      00046A 80 0B            [24] 1308 	sjmp	00150$
      00046C                       1309 00139$:
                                   1310 ;	Receiver.c:218: else {main_out1=1;main_out2=0;}
                                   1311 ;	assignBit
      00046C D2 B6            [12] 1312 	setb	_P3_6
                                   1313 ;	assignBit
      00046E C2 B7            [12] 1314 	clr	_P3_7
                                   1315 ;	Receiver.c:219: break;
                                   1316 ;	Receiver.c:222: }}
      000470 80 05            [24] 1317 	sjmp	00150$
      000472                       1318 00144$:
                                   1319 ;	Receiver.c:224: else timerCount2=0;	
      000472 E4               [12] 1320 	clr	a
      000473 F5*06            [12] 1321 	mov	_timerCount2,a
      000475 F5*07            [12] 1322 	mov	(_timerCount2 + 1),a
      000477                       1323 00150$:
                                   1324 ;	Receiver.c:228: if(timerCount2>4000)timerCount2=0;
      000477 C3               [12] 1325 	clr	c
      000478 74 A0            [12] 1326 	mov	a,#0xa0
      00047A 95*06            [12] 1327 	subb	a,_timerCount2
      00047C 74 8F            [12] 1328 	mov	a,#(0x0f ^ 0x80)
      00047E 85*07 F0         [24] 1329 	mov	b,(_timerCount2 + 1)
      000481 63 F0 80         [24] 1330 	xrl	b,#0x80
      000484 95 F0            [12] 1331 	subb	a,b
      000486 50 05            [24] 1332 	jnc	00153$
      000488 E4               [12] 1333 	clr	a
      000489 F5*06            [12] 1334 	mov	_timerCount2,a
      00048B F5*07            [12] 1335 	mov	(_timerCount2 + 1),a
      00048D                       1336 00153$:
                                   1337 ;	Receiver.c:230: }//end timer2
      00048D D0 D0            [24] 1338 	pop	psw
      00048F D0 00            [24] 1339 	pop	(0+0)
      000491 D0 01            [24] 1340 	pop	(0+1)
      000493 D0 02            [24] 1341 	pop	(0+2)
      000495 D0 03            [24] 1342 	pop	(0+3)
      000497 D0 04            [24] 1343 	pop	(0+4)
      000499 D0 05            [24] 1344 	pop	(0+5)
      00049B D0 06            [24] 1345 	pop	(0+6)
      00049D D0 07            [24] 1346 	pop	(0+7)
      00049F D0 83            [24] 1347 	pop	dph
      0004A1 D0 82            [24] 1348 	pop	dpl
      0004A3 D0 F0            [24] 1349 	pop	b
      0004A5 D0 E0            [24] 1350 	pop	acc
      0004A7 D0*00            [24] 1351 	pop	bits
      0004A9 32               [24] 1352 	reti
                                   1353 ;------------------------------------------------------------
                                   1354 ;Allocation info for local variables in function 'main'
                                   1355 ;------------------------------------------------------------
                                   1356 ;	Receiver.c:234: void main()
                                   1357 ;	-----------------------------------------
                                   1358 ;	 function main
                                   1359 ;	-----------------------------------------
      0004AA                       1360 _main:
                                   1361 ;	Receiver.c:236: state=20;
      0004AA 75*12 14         [24] 1362 	mov	_state,#0x14
      0004AD 75*13 00         [24] 1363 	mov	(_state + 1),#0x00
                                   1364 ;	Receiver.c:237: pwr_out=0;
                                   1365 ;	assignBit
      0004B0 C2 87            [12] 1366 	clr	_P0_7
                                   1367 ;	Receiver.c:241: T2CON = 0x80;                /* 10000000 */
      0004B2 75 C8 80         [24] 1368 	mov	_T2CON,#0x80
                                   1369 ;	Receiver.c:246: RCAP2L = 0x18;
      0004B5 75 CA 18         [24] 1370 	mov	_RCAP2L,#0x18
                                   1371 ;	Receiver.c:247: RCAP2H = 0xFE;
      0004B8 75 CB FE         [24] 1372 	mov	_RCAP2H,#0xfe
                                   1373 ;	Receiver.c:249: TL2 = RCAP2L;
      0004BB 85 CA CC         [24] 1374 	mov	_TL2,_RCAP2L
                                   1375 ;	Receiver.c:250: TH2 = RCAP2H;
      0004BE 85 CB CD         [24] 1376 	mov	_TH2,_RCAP2H
                                   1377 ;	Receiver.c:254: ET2 = 1;                      /* Enable Timer 2 Interrupts */
                                   1378 ;	assignBit
      0004C1 D2 AD            [12] 1379 	setb	_ET2
                                   1380 ;	Receiver.c:255: TR2 = 1;                      /* Start Timer 2 Running */
                                   1381 ;	assignBit
      0004C3 D2 CA            [12] 1382 	setb	_TR2
                                   1383 ;	Receiver.c:258: InitTimer0();
      0004C5 12r07r10         [24] 1384 	lcall	_InitTimer0
                                   1385 ;	Receiver.c:259: EA=1;
                                   1386 ;	assignBit
      0004C8 D2 AF            [12] 1387 	setb	_EA
                                   1388 ;	Receiver.c:260: startup();
      0004CA 12r04rE0         [24] 1389 	lcall	_startup
                                   1390 ;	Receiver.c:261: start=1;
      0004CD 75*00 01         [24] 1391 	mov	_start,#0x01
                                   1392 ;	Receiver.c:262: UART_Init();
      0004D0 12r05r66         [24] 1393 	lcall	_UART_Init
                                   1394 ;	Receiver.c:263: handshake();
      0004D3 12r05r79         [24] 1395 	lcall	_handshake
                                   1396 ;	Receiver.c:264: ES  = 1;      // Enable Serial INterrupt
                                   1397 ;	assignBit
      0004D6 D2 AC            [12] 1398 	setb	_ES
                                   1399 ;	Receiver.c:266: while(1)
      0004D8                       1400 00102$:
                                   1401 ;	Receiver.c:268: check_switches();
      0004D8 12r07r1E         [24] 1402 	lcall	_check_switches
                                   1403 ;	Receiver.c:269: check_data();
      0004DB 12r05rA2         [24] 1404 	lcall	_check_data
                                   1405 ;	Receiver.c:271: } //main
      0004DE 80 F8            [24] 1406 	sjmp	00102$
                                   1407 ;------------------------------------------------------------
                                   1408 ;Allocation info for local variables in function 'startup'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	Receiver.c:274: void startup()
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function startup
                                   1413 ;	-----------------------------------------
      0004E0                       1414 _startup:
                                   1415 ;	Receiver.c:276: pwr_key=1;
                                   1416 ;	assignBit
      0004E0 D2 97            [12] 1417 	setb	_P1_7
                                   1418 ;	Receiver.c:277: dim_key=1;
                                   1419 ;	assignBit
      0004E2 D2 94            [12] 1420 	setb	_P1_4
                                   1421 ;	Receiver.c:278: ac_key=1;
                                   1422 ;	assignBit
      0004E4 D2 93            [12] 1423 	setb	_P1_3
                                   1424 ;	Receiver.c:279: auto_key=1;
                                   1425 ;	assignBit
      0004E6 D2 92            [12] 1426 	setb	_P1_2
                                   1427 ;	Receiver.c:280: manual_up_key=1;
                                   1428 ;	assignBit
      0004E8 D2 90            [12] 1429 	setb	_P1_0
                                   1430 ;	Receiver.c:281: manual_down_key=1;
                                   1431 ;	assignBit
      0004EA D2 91            [12] 1432 	setb	_P1_1
                                   1433 ;	Receiver.c:283: main_out1=0;
                                   1434 ;	assignBit
      0004EC C2 B6            [12] 1435 	clr	_P3_6
                                   1436 ;	Receiver.c:284: main_out2=0;
                                   1437 ;	assignBit
      0004EE C2 B7            [12] 1438 	clr	_P3_7
                                   1439 ;	Receiver.c:285: pwr_out=0;
                                   1440 ;	assignBit
      0004F0 C2 87            [12] 1441 	clr	_P0_7
                                   1442 ;	Receiver.c:286: rst_out=0;
                                   1443 ;	assignBit
      0004F2 C2 96            [12] 1444 	clr	_P1_6
                                   1445 ;	Receiver.c:287: dim_out=0;
                                   1446 ;	assignBit
      0004F4 C2 82            [12] 1447 	clr	_P0_2
                                   1448 ;	Receiver.c:288: pwr_led=0;
                                   1449 ;	assignBit
      0004F6 C2 A0            [12] 1450 	clr	_P2_0
                                   1451 ;	Receiver.c:289: auto_led=0;
                                   1452 ;	assignBit
      0004F8 C2 A1            [12] 1453 	clr	_P2_1
                                   1454 ;	Receiver.c:290: ac_led_up=0;
                                   1455 ;	assignBit
      0004FA C2 A2            [12] 1456 	clr	_P2_2
                                   1457 ;	Receiver.c:291: ac_led_down=0;
                                   1458 ;	assignBit
      0004FC C2 A3            [12] 1459 	clr	_P2_3
                                   1460 ;	Receiver.c:292: up_led=0;
                                   1461 ;	assignBit
      0004FE C2 A7            [12] 1462 	clr	_P2_7
                                   1463 ;	Receiver.c:293: down_led=0;
                                   1464 ;	assignBit
      000500 C2 A4            [12] 1465 	clr	_P2_4
                                   1466 ;	Receiver.c:295: main_out1=1;
                                   1467 ;	assignBit
      000502 D2 B6            [12] 1468 	setb	_P3_6
                                   1469 ;	Receiver.c:296: main_out2=1;
                                   1470 ;	assignBit
      000504 D2 B7            [12] 1471 	setb	_P3_7
                                   1472 ;	Receiver.c:297: pwr_led=1;
                                   1473 ;	assignBit
      000506 D2 A0            [12] 1474 	setb	_P2_0
                                   1475 ;	Receiver.c:298: auto_led=0;
                                   1476 ;	assignBit
      000508 C2 A1            [12] 1477 	clr	_P2_1
                                   1478 ;	Receiver.c:299: ac_led_up=1;ac_led_down=0;
                                   1479 ;	assignBit
      00050A D2 A2            [12] 1480 	setb	_P2_2
                                   1481 ;	assignBit
      00050C C2 A3            [12] 1482 	clr	_P2_3
                                   1483 ;	Receiver.c:300: auto_flag = 0;
                                   1484 ;	assignBit
      00050E C2*00            [12] 1485 	clr	_auto_flag
                                   1486 ;	Receiver.c:301: dim_out=1;
                                   1487 ;	assignBit
      000510 D2 82            [12] 1488 	setb	_P0_2
                                   1489 ;	Receiver.c:302: up_led_main =0;center_led =0;down_led_main=1;
                                   1490 ;	assignBit
      000512 C2 81            [12] 1491 	clr	_P0_1
                                   1492 ;	assignBit
      000514 C2 80            [12] 1493 	clr	_P0_0
                                   1494 ;	assignBit
      000516 D2 A6            [12] 1495 	setb	_P2_6
                                   1496 ;	Receiver.c:303: delay();delay();
      000518 12r05r3D         [24] 1497 	lcall	_delay
      00051B 12r05r3D         [24] 1498 	lcall	_delay
                                   1499 ;	Receiver.c:304: up_led_main =0;center_led =1;down_led_main=0;
                                   1500 ;	assignBit
      00051E C2 81            [12] 1501 	clr	_P0_1
                                   1502 ;	assignBit
      000520 D2 80            [12] 1503 	setb	_P0_0
                                   1504 ;	assignBit
      000522 C2 A6            [12] 1505 	clr	_P2_6
                                   1506 ;	Receiver.c:305: delay();delay();
      000524 12r05r3D         [24] 1507 	lcall	_delay
      000527 12r05r3D         [24] 1508 	lcall	_delay
                                   1509 ;	Receiver.c:306: up_led_main =1;center_led =0;down_led_main=0;
                                   1510 ;	assignBit
      00052A D2 81            [12] 1511 	setb	_P0_1
                                   1512 ;	assignBit
      00052C C2 80            [12] 1513 	clr	_P0_0
                                   1514 ;	assignBit
      00052E C2 A6            [12] 1515 	clr	_P2_6
                                   1516 ;	Receiver.c:307: delay();delay();
      000530 12r05r3D         [24] 1517 	lcall	_delay
      000533 12r05r3D         [24] 1518 	lcall	_delay
                                   1519 ;	Receiver.c:308: up_led_main =0;center_led =0;down_led_main=0;
                                   1520 ;	assignBit
      000536 C2 81            [12] 1521 	clr	_P0_1
                                   1522 ;	assignBit
      000538 C2 80            [12] 1523 	clr	_P0_0
                                   1524 ;	assignBit
      00053A C2 A6            [12] 1525 	clr	_P2_6
                                   1526 ;	Receiver.c:309: }
      00053C 22               [24] 1527 	ret
                                   1528 ;------------------------------------------------------------
                                   1529 ;Allocation info for local variables in function 'delay'
                                   1530 ;------------------------------------------------------------
                                   1531 ;i                         Allocated to registers r6 r7 
                                   1532 ;j                         Allocated to registers r4 r5 
                                   1533 ;------------------------------------------------------------
                                   1534 ;	Receiver.c:311: void delay()
                                   1535 ;	-----------------------------------------
                                   1536 ;	 function delay
                                   1537 ;	-----------------------------------------
      00053D                       1538 _delay:
                                   1539 ;	Receiver.c:314: for(i=0;i<0x33;i++)
      00053D 7E 00            [12] 1540 	mov	r6,#0x00
      00053F 7F 00            [12] 1541 	mov	r7,#0x00
      000541                       1542 00106$:
                                   1543 ;	Receiver.c:315: for(j=0;j<0xff;j++);
      000541 7C FF            [12] 1544 	mov	r4,#0xff
      000543 7D 00            [12] 1545 	mov	r5,#0x00
      000545                       1546 00105$:
      000545 EC               [12] 1547 	mov	a,r4
      000546 24 FF            [12] 1548 	add	a,#0xff
      000548 FA               [12] 1549 	mov	r2,a
      000549 ED               [12] 1550 	mov	a,r5
      00054A 34 FF            [12] 1551 	addc	a,#0xff
      00054C FB               [12] 1552 	mov	r3,a
      00054D 8A 04            [24] 1553 	mov	ar4,r2
      00054F 8B 05            [24] 1554 	mov	ar5,r3
      000551 EA               [12] 1555 	mov	a,r2
      000552 4B               [12] 1556 	orl	a,r3
      000553 70 F0            [24] 1557 	jnz	00105$
                                   1558 ;	Receiver.c:314: for(i=0;i<0x33;i++)
      000555 0E               [12] 1559 	inc	r6
      000556 BE 00 01         [24] 1560 	cjne	r6,#0x00,00124$
      000559 0F               [12] 1561 	inc	r7
      00055A                       1562 00124$:
      00055A C3               [12] 1563 	clr	c
      00055B EE               [12] 1564 	mov	a,r6
      00055C 94 33            [12] 1565 	subb	a,#0x33
      00055E EF               [12] 1566 	mov	a,r7
      00055F 64 80            [12] 1567 	xrl	a,#0x80
      000561 94 80            [12] 1568 	subb	a,#0x80
      000563 40 DC            [24] 1569 	jc	00106$
                                   1570 ;	Receiver.c:316: }
      000565 22               [24] 1571 	ret
                                   1572 ;------------------------------------------------------------
                                   1573 ;Allocation info for local variables in function 'UART_Init'
                                   1574 ;------------------------------------------------------------
                                   1575 ;	Receiver.c:319: void UART_Init()
                                   1576 ;	-----------------------------------------
                                   1577 ;	 function UART_Init
                                   1578 ;	-----------------------------------------
      000566                       1579 _UART_Init:
                                   1580 ;	Receiver.c:321: TMOD = 0x20;		/* Timer 1, 8-bit auto reload mode */
      000566 75 89 20         [24] 1581 	mov	_TMOD,#0x20
                                   1582 ;	Receiver.c:322: TH1 = 0xFD;		/* Load value for 9600 baud rate */
      000569 75 8D FD         [24] 1583 	mov	_TH1,#0xfd
                                   1584 ;	Receiver.c:323: SCON = 0x50;		/* Mode 1, reception enable */
      00056C 75 98 50         [24] 1585 	mov	_SCON,#0x50
                                   1586 ;	Receiver.c:324: TR1 = 1;		/* Start timer 1 */
                                   1587 ;	assignBit
      00056F D2 8E            [12] 1588 	setb	_TR1
                                   1589 ;	Receiver.c:325: }
      000571 22               [24] 1590 	ret
                                   1591 ;------------------------------------------------------------
                                   1592 ;Allocation info for local variables in function 'Transmit_data'
                                   1593 ;------------------------------------------------------------
                                   1594 ;tx_data                   Allocated to registers 
                                   1595 ;------------------------------------------------------------
                                   1596 ;	Receiver.c:328: void Transmit_data(char tx_data)
                                   1597 ;	-----------------------------------------
                                   1598 ;	 function Transmit_data
                                   1599 ;	-----------------------------------------
      000572                       1600 _Transmit_data:
      000572 85 82 99         [24] 1601 	mov	_SBUF,dpl
                                   1602 ;	Receiver.c:331: while (TI==0);		/* Wait until stop bit transmit */
      000575                       1603 00101$:
      000575 30 99 FD         [24] 1604 	jnb	_TI,00101$
                                   1605 ;	Receiver.c:332: }
      000578 22               [24] 1606 	ret
                                   1607 ;------------------------------------------------------------
                                   1608 ;Allocation info for local variables in function 'handshake'
                                   1609 ;------------------------------------------------------------
                                   1610 ;	Receiver.c:335: void handshake()
                                   1611 ;	-----------------------------------------
                                   1612 ;	 function handshake
                                   1613 ;	-----------------------------------------
      000579                       1614 _handshake:
                                   1615 ;	Receiver.c:337: while(data_r!='y')
      000579                       1616 00101$:
      000579 74 79            [12] 1617 	mov	a,#0x79
      00057B B5*01 02         [24] 1618 	cjne	a,_data_r,00114$
      00057E 80 19            [24] 1619 	sjmp	00103$
      000580                       1620 00114$:
                                   1621 ;	Receiver.c:339: state=20;
      000580 75*12 14         [24] 1622 	mov	_state,#0x14
      000583 75*13 00         [24] 1623 	mov	(_state + 1),#0x00
                                   1624 ;	Receiver.c:340: delay();
      000586 12r05r3D         [24] 1625 	lcall	_delay
                                   1626 ;	Receiver.c:341: delay();
      000589 12r05r3D         [24] 1627 	lcall	_delay
                                   1628 ;	Receiver.c:342: Transmit_data('x');
      00058C 75 82 78         [24] 1629 	mov	dpl,#0x78
      00058F 12r05r72         [24] 1630 	lcall	_Transmit_data
                                   1631 ;	Receiver.c:343: data_r=SBUF;
      000592 85 99*01         [24] 1632 	mov	_data_r,_SBUF
                                   1633 ;	Receiver.c:344: RI = 0;
                                   1634 ;	assignBit
      000595 C2 98            [12] 1635 	clr	_RI
      000597 80 E0            [24] 1636 	sjmp	00101$
      000599                       1637 00103$:
                                   1638 ;	Receiver.c:346: delay();
      000599 12r05r3D         [24] 1639 	lcall	_delay
                                   1640 ;	Receiver.c:347: Transmit_data('m');
      00059C 75 82 6D         [24] 1641 	mov	dpl,#0x6d
                                   1642 ;	Receiver.c:348: }
      00059F 02r05r72         [24] 1643 	ljmp	_Transmit_data
                                   1644 ;------------------------------------------------------------
                                   1645 ;Allocation info for local variables in function 'check_data'
                                   1646 ;------------------------------------------------------------
                                   1647 ;	Receiver.c:350: void check_data()
                                   1648 ;	-----------------------------------------
                                   1649 ;	 function check_data
                                   1650 ;	-----------------------------------------
      0005A2                       1651 _check_data:
                                   1652 ;	Receiver.c:352: switch(data_r)
      0005A2 AF*01            [24] 1653 	mov	r7,_data_r
      0005A4 BF 61 02         [24] 1654 	cjne	r7,#0x61,00226$
      0005A7 80 44            [24] 1655 	sjmp	00102$
      0005A9                       1656 00226$:
      0005A9 BF 62 02         [24] 1657 	cjne	r7,#0x62,00227$
      0005AC 80 56            [24] 1658 	sjmp	00105$
      0005AE                       1659 00227$:
      0005AE BF 63 02         [24] 1660 	cjne	r7,#0x63,00228$
      0005B1 80 68            [24] 1661 	sjmp	00108$
      0005B3                       1662 00228$:
      0005B3 BF 64 02         [24] 1663 	cjne	r7,#0x64,00229$
      0005B6 80 7A            [24] 1664 	sjmp	00111$
      0005B8                       1665 00229$:
      0005B8 BF 65 03         [24] 1666 	cjne	r7,#0x65,00230$
      0005BB 02r06r49         [24] 1667 	ljmp	00114$
      0005BE                       1668 00230$:
      0005BE BF 66 03         [24] 1669 	cjne	r7,#0x66,00231$
      0005C1 02r06r60         [24] 1670 	ljmp	00117$
      0005C4                       1671 00231$:
      0005C4 BF 67 03         [24] 1672 	cjne	r7,#0x67,00232$
      0005C7 02r06r77         [24] 1673 	ljmp	00120$
      0005CA                       1674 00232$:
      0005CA BF 6C 02         [24] 1675 	cjne	r7,#0x6c,00233$
      0005CD 80 0F            [24] 1676 	sjmp	00101$
      0005CF                       1677 00233$:
      0005CF BF 6E 03         [24] 1678 	cjne	r7,#0x6e,00234$
      0005D2 02r06r8A         [24] 1679 	ljmp	00123$
      0005D5                       1680 00234$:
      0005D5 BF 75 03         [24] 1681 	cjne	r7,#0x75,00235$
      0005D8 02r06r9D         [24] 1682 	ljmp	00126$
      0005DB                       1683 00235$:
      0005DB 02r06rB0         [24] 1684 	ljmp	00129$
                                   1685 ;	Receiver.c:354: case 'l':time_delay=30;state = 0;auto_led=0;break;
      0005DE                       1686 00101$:
      0005DE 75*08 1E         [24] 1687 	mov	_time_delay,#0x1e
      0005E1 E4               [12] 1688 	clr	a
      0005E2 F5*09            [12] 1689 	mov	(_time_delay + 1),a
      0005E4 F5*12            [12] 1690 	mov	_state,a
      0005E6 F5*13            [12] 1691 	mov	(_state + 1),a
                                   1692 ;	assignBit
      0005E8 C2 A1            [12] 1693 	clr	_P2_1
      0005EA 02r06rF6         [24] 1694 	ljmp	00133$
                                   1695 ;	Receiver.c:356: case 'a':time_delay=20;state = 1;	
      0005ED                       1696 00102$:
      0005ED 75*08 14         [24] 1697 	mov	_time_delay,#0x14
      0005F0 75*09 00         [24] 1698 	mov	(_time_delay + 1),#0x00
      0005F3 75*12 01         [24] 1699 	mov	_state,#0x01
      0005F6 75*13 00         [24] 1700 	mov	(_state + 1),#0x00
                                   1701 ;	Receiver.c:357: if(auto_flag)auto_led=1;break;
      0005F9 20*00 03         [24] 1702 	jb	_auto_flag,00236$
      0005FC 02r06rF6         [24] 1703 	ljmp	00133$
      0005FF                       1704 00236$:
                                   1705 ;	assignBit
      0005FF D2 A1            [12] 1706 	setb	_P2_1
      000601 02r06rF6         [24] 1707 	ljmp	00133$
                                   1708 ;	Receiver.c:359: case 'b':time_delay=10;state = 2;
      000604                       1709 00105$:
      000604 75*08 0A         [24] 1710 	mov	_time_delay,#0x0a
      000607 75*09 00         [24] 1711 	mov	(_time_delay + 1),#0x00
      00060A 75*12 02         [24] 1712 	mov	_state,#0x02
      00060D 75*13 00         [24] 1713 	mov	(_state + 1),#0x00
                                   1714 ;	Receiver.c:360: if(auto_flag)auto_led=1;break;
      000610 20*00 03         [24] 1715 	jb	_auto_flag,00237$
      000613 02r06rF6         [24] 1716 	ljmp	00133$
      000616                       1717 00237$:
                                   1718 ;	assignBit
      000616 D2 A1            [12] 1719 	setb	_P2_1
      000618 02r06rF6         [24] 1720 	ljmp	00133$
                                   1721 ;	Receiver.c:362: case 'c':time_delay=7 ;state = 3;
      00061B                       1722 00108$:
      00061B 75*08 07         [24] 1723 	mov	_time_delay,#0x07
      00061E 75*09 00         [24] 1724 	mov	(_time_delay + 1),#0x00
      000621 75*12 03         [24] 1725 	mov	_state,#0x03
      000624 75*13 00         [24] 1726 	mov	(_state + 1),#0x00
                                   1727 ;	Receiver.c:363: if(auto_flag)auto_led=1;break;
      000627 20*00 03         [24] 1728 	jb	_auto_flag,00238$
      00062A 02r06rF6         [24] 1729 	ljmp	00133$
      00062D                       1730 00238$:
                                   1731 ;	assignBit
      00062D D2 A1            [12] 1732 	setb	_P2_1
      00062F 02r06rF6         [24] 1733 	ljmp	00133$
                                   1734 ;	Receiver.c:365: case 'd':time_delay=7 ;state = 7;
      000632                       1735 00111$:
      000632 75*08 07         [24] 1736 	mov	_time_delay,#0x07
      000635 75*09 00         [24] 1737 	mov	(_time_delay + 1),#0x00
      000638 75*12 07         [24] 1738 	mov	_state,#0x07
      00063B 75*13 00         [24] 1739 	mov	(_state + 1),#0x00
                                   1740 ;	Receiver.c:366: if(auto_flag)auto_led=1;break;
      00063E 20*00 03         [24] 1741 	jb	_auto_flag,00239$
      000641 02r06rF6         [24] 1742 	ljmp	00133$
      000644                       1743 00239$:
                                   1744 ;	assignBit
      000644 D2 A1            [12] 1745 	setb	_P2_1
      000646 02r06rF6         [24] 1746 	ljmp	00133$
                                   1747 ;	Receiver.c:368: case 'e':time_delay=7 ;state = 4;
      000649                       1748 00114$:
      000649 75*08 07         [24] 1749 	mov	_time_delay,#0x07
      00064C 75*09 00         [24] 1750 	mov	(_time_delay + 1),#0x00
      00064F 75*12 04         [24] 1751 	mov	_state,#0x04
      000652 75*13 00         [24] 1752 	mov	(_state + 1),#0x00
                                   1753 ;	Receiver.c:369: if(auto_flag)auto_led=1;break;
      000655 20*00 03         [24] 1754 	jb	_auto_flag,00240$
      000658 02r06rF6         [24] 1755 	ljmp	00133$
      00065B                       1756 00240$:
                                   1757 ;	assignBit
      00065B D2 A1            [12] 1758 	setb	_P2_1
      00065D 02r06rF6         [24] 1759 	ljmp	00133$
                                   1760 ;	Receiver.c:371: case 'f':time_delay=10;state = 5;
      000660                       1761 00117$:
      000660 75*08 0A         [24] 1762 	mov	_time_delay,#0x0a
      000663 75*09 00         [24] 1763 	mov	(_time_delay + 1),#0x00
      000666 75*12 05         [24] 1764 	mov	_state,#0x05
      000669 75*13 00         [24] 1765 	mov	(_state + 1),#0x00
                                   1766 ;	Receiver.c:372: if(auto_flag)auto_led=1;break;
      00066C 20*00 03         [24] 1767 	jb	_auto_flag,00241$
      00066F 02r06rF6         [24] 1768 	ljmp	00133$
      000672                       1769 00241$:
                                   1770 ;	assignBit
      000672 D2 A1            [12] 1771 	setb	_P2_1
      000674 02r06rF6         [24] 1772 	ljmp	00133$
                                   1773 ;	Receiver.c:374: case 'g':time_delay=20;state = 6;
      000677                       1774 00120$:
      000677 75*08 14         [24] 1775 	mov	_time_delay,#0x14
      00067A 75*09 00         [24] 1776 	mov	(_time_delay + 1),#0x00
      00067D 75*12 06         [24] 1777 	mov	_state,#0x06
      000680 75*13 00         [24] 1778 	mov	(_state + 1),#0x00
                                   1779 ;	Receiver.c:375: if(auto_flag)auto_led=1;break;
      000683 30*00 70         [24] 1780 	jnb	_auto_flag,00133$
                                   1781 ;	assignBit
      000686 D2 A1            [12] 1782 	setb	_P2_1
                                   1783 ;	Receiver.c:377: case 'n':time_delay=15;state = 8;
      000688 80 6C            [24] 1784 	sjmp	00133$
      00068A                       1785 00123$:
      00068A 75*08 0F         [24] 1786 	mov	_time_delay,#0x0f
      00068D 75*09 00         [24] 1787 	mov	(_time_delay + 1),#0x00
      000690 75*12 08         [24] 1788 	mov	_state,#0x08
      000693 75*13 00         [24] 1789 	mov	(_state + 1),#0x00
                                   1790 ;	Receiver.c:378: if(auto_flag)auto_led=1;break;
      000696 30*00 5D         [24] 1791 	jnb	_auto_flag,00133$
                                   1792 ;	assignBit
      000699 D2 A1            [12] 1793 	setb	_P2_1
                                   1794 ;	Receiver.c:380: case 'u':time_delay=15;state = 9;
      00069B 80 59            [24] 1795 	sjmp	00133$
      00069D                       1796 00126$:
      00069D 75*08 0F         [24] 1797 	mov	_time_delay,#0x0f
      0006A0 75*09 00         [24] 1798 	mov	(_time_delay + 1),#0x00
      0006A3 75*12 09         [24] 1799 	mov	_state,#0x09
      0006A6 75*13 00         [24] 1800 	mov	(_state + 1),#0x00
                                   1801 ;	Receiver.c:381: if(auto_flag)auto_led=1;break;
      0006A9 30*00 4A         [24] 1802 	jnb	_auto_flag,00133$
                                   1803 ;	assignBit
      0006AC D2 A1            [12] 1804 	setb	_P2_1
                                   1805 ;	Receiver.c:383: default :ES=0;
      0006AE 80 46            [24] 1806 	sjmp	00133$
      0006B0                       1807 00129$:
                                   1808 ;	assignBit
      0006B0 C2 AC            [12] 1809 	clr	_ES
                                   1810 ;	Receiver.c:384: serialCount=0;
      0006B2 E4               [12] 1811 	clr	a
      0006B3 F5*04            [12] 1812 	mov	_serialCount,a
      0006B5 F5*05            [12] 1813 	mov	(_serialCount + 1),a
                                   1814 ;	Receiver.c:385: state=20;
      0006B7 75*12 14         [24] 1815 	mov	_state,#0x14
                                   1816 ;	1-genFromRTrack replaced	mov	(_state + 1),#0x00
      0006BA F5*13            [12] 1817 	mov	(_state + 1),a
                                   1818 ;	Receiver.c:386: timerCount=0;
      0006BC F5*02            [12] 1819 	mov	_timerCount,a
      0006BE F5*03            [12] 1820 	mov	(_timerCount + 1),a
                                   1821 ;	Receiver.c:387: P0_1 =0;
                                   1822 ;	assignBit
      0006C0 C2 81            [12] 1823 	clr	_P0_1
                                   1824 ;	Receiver.c:388: P0_0 =0;
                                   1825 ;	assignBit
      0006C2 C2 80            [12] 1826 	clr	_P0_0
                                   1827 ;	Receiver.c:389: P2_6=0;
                                   1828 ;	assignBit
      0006C4 C2 A6            [12] 1829 	clr	_P2_6
                                   1830 ;	Receiver.c:390: up_led=0;
                                   1831 ;	assignBit
      0006C6 C2 A7            [12] 1832 	clr	_P2_7
                                   1833 ;	Receiver.c:391: down_led=0;
                                   1834 ;	assignBit
      0006C8 C2 A4            [12] 1835 	clr	_P2_4
                                   1836 ;	Receiver.c:393: Transmit_data('x');
      0006CA 75 82 78         [24] 1837 	mov	dpl,#0x78
      0006CD 12r05r72         [24] 1838 	lcall	_Transmit_data
                                   1839 ;	Receiver.c:394: __asm nop __endasm;
      0006D0 00               [12] 1840 	nop	
                                   1841 ;	Receiver.c:395: __asm nop __endasm;
      0006D1 00               [12] 1842 	nop	
                                   1843 ;	Receiver.c:396: __asm nop __endasm;
      0006D2 00               [12] 1844 	nop	
                                   1845 ;	Receiver.c:397: __asm nop __endasm;
      0006D3 00               [12] 1846 	nop	
                                   1847 ;	Receiver.c:398: while(data_r!='y')
      0006D4                       1848 00130$:
      0006D4 74 79            [12] 1849 	mov	a,#0x79
      0006D6 B5*01 02         [24] 1850 	cjne	a,_data_r,00245$
      0006D9 80 19            [24] 1851 	sjmp	00132$
      0006DB                       1852 00245$:
                                   1853 ;	Receiver.c:400: state=20;
      0006DB 75*12 14         [24] 1854 	mov	_state,#0x14
      0006DE 75*13 00         [24] 1855 	mov	(_state + 1),#0x00
                                   1856 ;	Receiver.c:401: delay();
      0006E1 12r05r3D         [24] 1857 	lcall	_delay
                                   1858 ;	Receiver.c:402: delay();
      0006E4 12r05r3D         [24] 1859 	lcall	_delay
                                   1860 ;	Receiver.c:403: Transmit_data('x');
      0006E7 75 82 78         [24] 1861 	mov	dpl,#0x78
      0006EA 12r05r72         [24] 1862 	lcall	_Transmit_data
                                   1863 ;	Receiver.c:404: data_r=SBUF;
      0006ED 85 99*01         [24] 1864 	mov	_data_r,_SBUF
                                   1865 ;	Receiver.c:405: RI = 0;
                                   1866 ;	assignBit
      0006F0 C2 98            [12] 1867 	clr	_RI
      0006F2 80 E0            [24] 1868 	sjmp	00130$
      0006F4                       1869 00132$:
                                   1870 ;	Receiver.c:407: ES=1;
                                   1871 ;	assignBit
      0006F4 D2 AC            [12] 1872 	setb	_ES
                                   1873 ;	Receiver.c:408: }//switch end
      0006F6                       1874 00133$:
                                   1875 ;	Receiver.c:411: if(serialCount>4000)
      0006F6 C3               [12] 1876 	clr	c
      0006F7 74 A0            [12] 1877 	mov	a,#0xa0
      0006F9 95*04            [12] 1878 	subb	a,_serialCount
      0006FB 74 8F            [12] 1879 	mov	a,#(0x0f ^ 0x80)
      0006FD 85*05 F0         [24] 1880 	mov	b,(_serialCount + 1)
      000700 63 F0 80         [24] 1881 	xrl	b,#0x80
      000703 95 F0            [12] 1882 	subb	a,b
      000705 50 08            [24] 1883 	jnc	00136$
                                   1884 ;	Receiver.c:412: {serialCount=0;data_r='q';}
      000707 E4               [12] 1885 	clr	a
      000708 F5*04            [12] 1886 	mov	_serialCount,a
      00070A F5*05            [12] 1887 	mov	(_serialCount + 1),a
      00070C 75*01 71         [24] 1888 	mov	_data_r,#0x71
      00070F                       1889 00136$:
                                   1890 ;	Receiver.c:413: }
      00070F 22               [24] 1891 	ret
                                   1892 ;------------------------------------------------------------
                                   1893 ;Allocation info for local variables in function 'InitTimer0'
                                   1894 ;------------------------------------------------------------
                                   1895 ;	Receiver.c:415: void InitTimer0(void)
                                   1896 ;	-----------------------------------------
                                   1897 ;	 function InitTimer0
                                   1898 ;	-----------------------------------------
      000710                       1899 _InitTimer0:
                                   1900 ;	Receiver.c:417: TMOD |= 0x01;    // Set timer0 in mode 1
      000710 43 89 01         [24] 1901 	orl	_TMOD,#0x01
                                   1902 ;	Receiver.c:418: TH0 = 0xee;      // 5 msec reloading time
      000713 75 8C EE         [24] 1903 	mov	_TH0,#0xee
                                   1904 ;	Receiver.c:419: TL0 = 0x00;      // First time value
      000716 75 8A 00         [24] 1905 	mov	_TL0,#0x00
                                   1906 ;	Receiver.c:420: TR0 = 1;         // Start Timer 1
                                   1907 ;	assignBit
      000719 D2 8C            [12] 1908 	setb	_TR0
                                   1909 ;	Receiver.c:421: ET0 = 1;         // Enable Timer1 interrupts	
                                   1910 ;	assignBit
      00071B D2 A9            [12] 1911 	setb	_ET0
                                   1912 ;	Receiver.c:422: }
      00071D 22               [24] 1913 	ret
                                   1914 ;------------------------------------------------------------
                                   1915 ;Allocation info for local variables in function 'check_switches'
                                   1916 ;------------------------------------------------------------
                                   1917 ;	Receiver.c:424: void check_switches()
                                   1918 ;	-----------------------------------------
                                   1919 ;	 function check_switches
                                   1920 ;	-----------------------------------------
      00071E                       1921 _check_switches:
                                   1922 ;	Receiver.c:426: if(!ac_key)
      00071E 20 93 4F         [24] 1923 	jb	_P1_3,00111$
                                   1924 ;	Receiver.c:428: if(!ac_key)
      000721 20 93 4C         [24] 1925 	jb	_P1_3,00111$
                                   1926 ;	Receiver.c:430: delay();
      000724 12r05r3D         [24] 1927 	lcall	_delay
                                   1928 ;	Receiver.c:431: ac_state++;		
      000727 05*16            [12] 1929 	inc	_ac_state
                                   1930 ;	Receiver.c:432: if(ac_state==3)
      000729 74 03            [12] 1931 	mov	a,#0x03
      00072B B5*16 03         [24] 1932 	cjne	a,_ac_state,00102$
                                   1933 ;	Receiver.c:433: ac_state=0;
      00072E 75*16 00         [24] 1934 	mov	_ac_state,#0x00
      000731                       1935 00102$:
                                   1936 ;	Receiver.c:434: switch(ac_state)
      000731 E4               [12] 1937 	clr	a
      000732 B5*16 02         [24] 1938 	cjne	a,_ac_state,00191$
      000735 80 0E            [24] 1939 	sjmp	00103$
      000737                       1940 00191$:
      000737 74 01            [12] 1941 	mov	a,#0x01
      000739 B5*16 02         [24] 1942 	cjne	a,_ac_state,00192$
      00073C 80 16            [24] 1943 	sjmp	00104$
      00073E                       1944 00192$:
      00073E 74 02            [12] 1945 	mov	a,#0x02
                                   1946 ;	Receiver.c:436: case 0:Transmit_data('l');ac_led_up=1;ac_led_down=1;delay();break;
      000740 B5*16 2D         [24] 1947 	cjne	a,_ac_state,00111$
      000743 80 1E            [24] 1948 	sjmp	00105$
      000745                       1949 00103$:
      000745 75 82 6C         [24] 1950 	mov	dpl,#0x6c
      000748 12r05r72         [24] 1951 	lcall	_Transmit_data
                                   1952 ;	assignBit
      00074B D2 A2            [12] 1953 	setb	_P2_2
                                   1954 ;	assignBit
      00074D D2 A3            [12] 1955 	setb	_P2_3
      00074F 12r05r3D         [24] 1956 	lcall	_delay
                                   1957 ;	Receiver.c:437: case 1:Transmit_data('m');ac_led_up=1;ac_led_down=0;delay();break;
      000752 80 1C            [24] 1958 	sjmp	00111$
      000754                       1959 00104$:
      000754 75 82 6D         [24] 1960 	mov	dpl,#0x6d
      000757 12r05r72         [24] 1961 	lcall	_Transmit_data
                                   1962 ;	assignBit
      00075A D2 A2            [12] 1963 	setb	_P2_2
                                   1964 ;	assignBit
      00075C C2 A3            [12] 1965 	clr	_P2_3
      00075E 12r05r3D         [24] 1966 	lcall	_delay
                                   1967 ;	Receiver.c:438: case 2:Transmit_data('h');ac_led_up=0;ac_led_down=1;delay();break;
      000761 80 0D            [24] 1968 	sjmp	00111$
      000763                       1969 00105$:
      000763 75 82 68         [24] 1970 	mov	dpl,#0x68
      000766 12r05r72         [24] 1971 	lcall	_Transmit_data
                                   1972 ;	assignBit
      000769 C2 A2            [12] 1973 	clr	_P2_2
                                   1974 ;	assignBit
      00076B D2 A3            [12] 1975 	setb	_P2_3
      00076D 12r05r3D         [24] 1976 	lcall	_delay
                                   1977 ;	Receiver.c:440: }//switch end
      000770                       1978 00111$:
                                   1979 ;	Receiver.c:443: if(!dim_key)
      000770 20 94 37         [24] 1980 	jb	_P1_4,00115$
                                   1981 ;	Receiver.c:445: delay();
      000773 12r05r3D         [24] 1982 	lcall	_delay
                                   1983 ;	Receiver.c:447: dim_val = dim_val + 10;
      000776 74 0A            [12] 1984 	mov	a,#0x0a
      000778 25*0A            [12] 1985 	add	a,_dim_val
      00077A F5*0A            [12] 1986 	mov	_dim_val,a
      00077C E4               [12] 1987 	clr	a
      00077D 35*0B            [12] 1988 	addc	a,(_dim_val + 1)
      00077F F5*0B            [12] 1989 	mov	(_dim_val + 1),a
                                   1990 ;	Receiver.c:448: dim_val2=50-dim_val;
      000781 74 32            [12] 1991 	mov	a,#0x32
      000783 C3               [12] 1992 	clr	c
      000784 95*0A            [12] 1993 	subb	a,_dim_val
      000786 F5*0C            [12] 1994 	mov	_dim_val2,a
      000788 E4               [12] 1995 	clr	a
      000789 95*0B            [12] 1996 	subb	a,(_dim_val + 1)
      00078B F5*0D            [12] 1997 	mov	(_dim_val2 + 1),a
                                   1998 ;	Receiver.c:449: if(dim_val>50){dim_val=1;dim_val2=50;}
      00078D C3               [12] 1999 	clr	c
      00078E 74 32            [12] 2000 	mov	a,#0x32
      000790 95*0A            [12] 2001 	subb	a,_dim_val
      000792 74 80            [12] 2002 	mov	a,#(0x00 ^ 0x80)
      000794 85*0B F0         [24] 2003 	mov	b,(_dim_val + 1)
      000797 63 F0 80         [24] 2004 	xrl	b,#0x80
      00079A 95 F0            [12] 2005 	subb	a,b
      00079C 50 0C            [24] 2006 	jnc	00115$
      00079E 75*0A 01         [24] 2007 	mov	_dim_val,#0x01
      0007A1 75*0B 00         [24] 2008 	mov	(_dim_val + 1),#0x00
      0007A4 75*0C 32         [24] 2009 	mov	_dim_val2,#0x32
      0007A7 75*0D 00         [24] 2010 	mov	(_dim_val2 + 1),#0x00
      0007AA                       2011 00115$:
                                   2012 ;	Receiver.c:452: if(!auto_key)
      0007AA 20 92 05         [24] 2013 	jb	_P1_2,00117$
                                   2014 ;	Receiver.c:454: delay();
      0007AD 12r05r3D         [24] 2015 	lcall	_delay
                                   2016 ;	Receiver.c:455: auto_flag=!auto_flag;
      0007B0 B2*00            [12] 2017 	cpl	_auto_flag
      0007B2                       2018 00117$:
                                   2019 ;	Receiver.c:458: if(!pwr_key)
      0007B2 20 97 28         [24] 2020 	jb	_P1_7,00122$
                                   2021 ;	Receiver.c:460: delay();
      0007B5 12r05r3D         [24] 2022 	lcall	_delay
                                   2023 ;	Receiver.c:461: delay();
      0007B8 12r05r3D         [24] 2024 	lcall	_delay
                                   2025 ;	Receiver.c:462: delay();
      0007BB 12r05r3D         [24] 2026 	lcall	_delay
                                   2027 ;	Receiver.c:463: if(!pwr_key)
      0007BE 20 97 1C         [24] 2028 	jb	_P1_7,00122$
                                   2029 ;	Receiver.c:465: pwr_led=0;up_led_main =0;center_led =0;down_led_main=0;ac_led_up=0;ac_led_down=0;auto_led=0;
                                   2030 ;	assignBit
      0007C1 C2 A0            [12] 2031 	clr	_P2_0
                                   2032 ;	assignBit
      0007C3 C2 81            [12] 2033 	clr	_P0_1
                                   2034 ;	assignBit
      0007C5 C2 80            [12] 2035 	clr	_P0_0
                                   2036 ;	assignBit
      0007C7 C2 A6            [12] 2037 	clr	_P2_6
                                   2038 ;	assignBit
      0007C9 C2 A2            [12] 2039 	clr	_P2_2
                                   2040 ;	assignBit
      0007CB C2 A3            [12] 2041 	clr	_P2_3
                                   2042 ;	assignBit
      0007CD C2 A1            [12] 2043 	clr	_P2_1
                                   2044 ;	Receiver.c:466: TR0 = 0;         // Stop Timer 1
                                   2045 ;	assignBit
      0007CF C2 8C            [12] 2046 	clr	_TR0
                                   2047 ;	Receiver.c:467: ET0 = 0;         // Enable Timer1 interrupts	
                                   2048 ;	assignBit
      0007D1 C2 A9            [12] 2049 	clr	_ET0
                                   2050 ;	Receiver.c:468: delay();delay();
      0007D3 12r05r3D         [24] 2051 	lcall	_delay
      0007D6 12r05r3D         [24] 2052 	lcall	_delay
                                   2053 ;	Receiver.c:469: pwr_out=1;
                                   2054 ;	assignBit
      0007D9 D2 87            [12] 2055 	setb	_P0_7
                                   2056 ;	Receiver.c:470: shutdown:
      0007DB                       2057 00118$:
                                   2058 ;	Receiver.c:471: goto shutdown;
      0007DB 80 FE            [24] 2059 	sjmp	00118$
      0007DD                       2060 00122$:
                                   2061 ;	Receiver.c:476: if(!manual_up_key)
      0007DD 20 90 0D         [24] 2062 	jb	_P1_0,00127$
                                   2063 ;	Receiver.c:478: up_led=1;
                                   2064 ;	assignBit
      0007E0 D2 A7            [12] 2065 	setb	_P2_7
                                   2066 ;	Receiver.c:479: down_led=0;
                                   2067 ;	assignBit
      0007E2 C2 A4            [12] 2068 	clr	_P2_4
                                   2069 ;	Receiver.c:480: up_led_main=1;
                                   2070 ;	assignBit
      0007E4 D2 81            [12] 2071 	setb	_P0_1
                                   2072 ;	Receiver.c:481: center_led=0;
                                   2073 ;	assignBit
      0007E6 C2 80            [12] 2074 	clr	_P0_0
                                   2075 ;	Receiver.c:482: down_led_main=0;
                                   2076 ;	assignBit
      0007E8 C2 A6            [12] 2077 	clr	_P2_6
                                   2078 ;	Receiver.c:483: TR0=0;
                                   2079 ;	assignBit
      0007EA C2 8C            [12] 2080 	clr	_TR0
      0007EC 22               [24] 2081 	ret
      0007ED                       2082 00127$:
                                   2083 ;	Receiver.c:486: else if(!manual_down_key)
      0007ED 20 91 0D         [24] 2084 	jb	_P1_1,00124$
                                   2085 ;	Receiver.c:488: up_led=0;
                                   2086 ;	assignBit
      0007F0 C2 A7            [12] 2087 	clr	_P2_7
                                   2088 ;	Receiver.c:489: down_led=1;
                                   2089 ;	assignBit
      0007F2 D2 A4            [12] 2090 	setb	_P2_4
                                   2091 ;	Receiver.c:490: up_led_main=0;
                                   2092 ;	assignBit
      0007F4 C2 81            [12] 2093 	clr	_P0_1
                                   2094 ;	Receiver.c:491: center_led=0;
                                   2095 ;	assignBit
      0007F6 C2 80            [12] 2096 	clr	_P0_0
                                   2097 ;	Receiver.c:492: down_led_main=1;
                                   2098 ;	assignBit
      0007F8 D2 A6            [12] 2099 	setb	_P2_6
                                   2100 ;	Receiver.c:493: TR0=0;
                                   2101 ;	assignBit
      0007FA C2 8C            [12] 2102 	clr	_TR0
      0007FC 22               [24] 2103 	ret
      0007FD                       2104 00124$:
                                   2105 ;	Receiver.c:498: TR0=1;
                                   2106 ;	assignBit
      0007FD D2 8C            [12] 2107 	setb	_TR0
                                   2108 ;	Receiver.c:501: }
      0007FF 22               [24] 2109 	ret
                                   2110 	.area CSEG    (CODE)
                                   2111 	.area CONST   (CODE)
                                   2112 	.area XINIT   (CODE)
                                   2113 	.area CABS    (ABS,CODE)
