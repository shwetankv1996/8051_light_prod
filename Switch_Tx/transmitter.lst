                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.4 #11418 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module transmitter
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _isr_timer0
                                     13 	.globl _TF2
                                     14 	.globl _EXF2
                                     15 	.globl _RCLK
                                     16 	.globl _TCLK
                                     17 	.globl _EXEN2
                                     18 	.globl _TR2
                                     19 	.globl _C_T2
                                     20 	.globl _CP_RL2
                                     21 	.globl _T2CON_7
                                     22 	.globl _T2CON_6
                                     23 	.globl _T2CON_5
                                     24 	.globl _T2CON_4
                                     25 	.globl _T2CON_3
                                     26 	.globl _T2CON_2
                                     27 	.globl _T2CON_1
                                     28 	.globl _T2CON_0
                                     29 	.globl _PT2
                                     30 	.globl _ET2
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ES
                                     62 	.globl _ET1
                                     63 	.globl _EX1
                                     64 	.globl _ET0
                                     65 	.globl _EX0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _SM0
                                     75 	.globl _SM1
                                     76 	.globl _SM2
                                     77 	.globl _REN
                                     78 	.globl _TB8
                                     79 	.globl _RB8
                                     80 	.globl _TI
                                     81 	.globl _RI
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _TH2
                                    107 	.globl _TL2
                                    108 	.globl _RCAP2H
                                    109 	.globl _RCAP2L
                                    110 	.globl _T2CON
                                    111 	.globl _B
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _IP
                                    115 	.globl _P3
                                    116 	.globl _IE
                                    117 	.globl _P2
                                    118 	.globl _SBUF
                                    119 	.globl _SCON
                                    120 	.globl _P1
                                    121 	.globl _TH1
                                    122 	.globl _TH0
                                    123 	.globl _TL1
                                    124 	.globl _TL0
                                    125 	.globl _TMOD
                                    126 	.globl _TCON
                                    127 	.globl _PCON
                                    128 	.globl _DPH
                                    129 	.globl _DPL
                                    130 	.globl _SP
                                    131 	.globl _P0
                                    132 	.globl _button
                                    133 	.globl _time_delay
                                    134 	.globl _timerCount
                                    135 	.globl _received
                                    136 	.globl _data_r
                                    137 	.globl _state_was
                                    138 	.globl _state
                                    139 	.globl _delay
                                    140 	.globl _UART_Init
                                    141 	.globl _handshake
                                    142 	.globl _Transmit_data
                                    143 	.globl _check_x
                                    144 	.globl _startup
                                    145 	.globl _InitTimer1
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000D0   169 _PSW	=	0x00d0
                           0000E0   170 _ACC	=	0x00e0
                           0000F0   171 _B	=	0x00f0
                           0000C8   172 _T2CON	=	0x00c8
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000098   206 _RI	=	0x0098
                           000099   207 _TI	=	0x0099
                           00009A   208 _RB8	=	0x009a
                           00009B   209 _TB8	=	0x009b
                           00009C   210 _REN	=	0x009c
                           00009D   211 _SM2	=	0x009d
                           00009E   212 _SM1	=	0x009e
                           00009F   213 _SM0	=	0x009f
                           0000A0   214 _P2_0	=	0x00a0
                           0000A1   215 _P2_1	=	0x00a1
                           0000A2   216 _P2_2	=	0x00a2
                           0000A3   217 _P2_3	=	0x00a3
                           0000A4   218 _P2_4	=	0x00a4
                           0000A5   219 _P2_5	=	0x00a5
                           0000A6   220 _P2_6	=	0x00a6
                           0000A7   221 _P2_7	=	0x00a7
                           0000A8   222 _EX0	=	0x00a8
                           0000A9   223 _ET0	=	0x00a9
                           0000AA   224 _EX1	=	0x00aa
                           0000AB   225 _ET1	=	0x00ab
                           0000AC   226 _ES	=	0x00ac
                           0000AF   227 _EA	=	0x00af
                           0000B0   228 _P3_0	=	0x00b0
                           0000B1   229 _P3_1	=	0x00b1
                           0000B2   230 _P3_2	=	0x00b2
                           0000B3   231 _P3_3	=	0x00b3
                           0000B4   232 _P3_4	=	0x00b4
                           0000B5   233 _P3_5	=	0x00b5
                           0000B6   234 _P3_6	=	0x00b6
                           0000B7   235 _P3_7	=	0x00b7
                           0000B0   236 _RXD	=	0x00b0
                           0000B1   237 _TXD	=	0x00b1
                           0000B2   238 _INT0	=	0x00b2
                           0000B3   239 _INT1	=	0x00b3
                           0000B4   240 _T0	=	0x00b4
                           0000B5   241 _T1	=	0x00b5
                           0000B6   242 _WR	=	0x00b6
                           0000B7   243 _RD	=	0x00b7
                           0000B8   244 _PX0	=	0x00b8
                           0000B9   245 _PT0	=	0x00b9
                           0000BA   246 _PX1	=	0x00ba
                           0000BB   247 _PT1	=	0x00bb
                           0000BC   248 _PS	=	0x00bc
                           0000D0   249 _P	=	0x00d0
                           0000D1   250 _F1	=	0x00d1
                           0000D2   251 _OV	=	0x00d2
                           0000D3   252 _RS0	=	0x00d3
                           0000D4   253 _RS1	=	0x00d4
                           0000D5   254 _F0	=	0x00d5
                           0000D6   255 _AC	=	0x00d6
                           0000D7   256 _CY	=	0x00d7
                           0000AD   257 _ET2	=	0x00ad
                           0000BD   258 _PT2	=	0x00bd
                           0000C8   259 _T2CON_0	=	0x00c8
                           0000C9   260 _T2CON_1	=	0x00c9
                           0000CA   261 _T2CON_2	=	0x00ca
                           0000CB   262 _T2CON_3	=	0x00cb
                           0000CC   263 _T2CON_4	=	0x00cc
                           0000CD   264 _T2CON_5	=	0x00cd
                           0000CE   265 _T2CON_6	=	0x00ce
                           0000CF   266 _T2CON_7	=	0x00cf
                           0000C8   267 _CP_RL2	=	0x00c8
                           0000C9   268 _C_T2	=	0x00c9
                           0000CA   269 _TR2	=	0x00ca
                           0000CB   270 _EXEN2	=	0x00cb
                           0000CC   271 _TCLK	=	0x00cc
                           0000CD   272 _RCLK	=	0x00cd
                           0000CE   273 _EXF2	=	0x00ce
                           0000CF   274 _TF2	=	0x00cf
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable register banks
                                    277 ;--------------------------------------------------------
                                    278 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable bit register bank
                                    282 ;--------------------------------------------------------
                                    283 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        284 bits:
      000000                        285 	.ds 1
                           008000   286 	b0 = bits[0]
                           008100   287 	b1 = bits[1]
                           008200   288 	b2 = bits[2]
                           008300   289 	b3 = bits[3]
                           008400   290 	b4 = bits[4]
                           008500   291 	b5 = bits[5]
                           008600   292 	b6 = bits[6]
                           008700   293 	b7 = bits[7]
                                    294 ;--------------------------------------------------------
                                    295 ; internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area DSEG    (DATA)
      000000                        298 _state::
      000000                        299 	.ds 2
      000002                        300 _state_was::
      000002                        301 	.ds 2
      000004                        302 _data_r::
      000004                        303 	.ds 1
      000005                        304 _received::
      000005                        305 	.ds 1
      000006                        306 _timerCount::
      000006                        307 	.ds 2
      000008                        308 _time_delay::
      000008                        309 	.ds 2
      00000A                        310 _button::
      00000A                        311 	.ds 1
                                    312 ;--------------------------------------------------------
                                    313 ; overlayable items in internal ram 
                                    314 ;--------------------------------------------------------
                                    315 	.area	OSEG    (OVR,DATA)
                                    316 	.area	OSEG    (OVR,DATA)
                                    317 ;--------------------------------------------------------
                                    318 ; Stack segment in internal ram 
                                    319 ;--------------------------------------------------------
                                    320 	.area	SSEG
      000000                        321 __start__stack:
      000000                        322 	.ds	1
                                    323 
                                    324 ;--------------------------------------------------------
                                    325 ; indirectly addressable internal ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area ISEG    (DATA)
                                    328 ;--------------------------------------------------------
                                    329 ; absolute internal ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area IABS    (ABS,DATA)
                                    332 	.area IABS    (ABS,DATA)
                                    333 ;--------------------------------------------------------
                                    334 ; bit data
                                    335 ;--------------------------------------------------------
                                    336 	.area BSEG    (BIT)
                                    337 ;--------------------------------------------------------
                                    338 ; paged external ram data
                                    339 ;--------------------------------------------------------
                                    340 	.area PSEG    (PAG,XDATA)
                                    341 ;--------------------------------------------------------
                                    342 ; external ram data
                                    343 ;--------------------------------------------------------
                                    344 	.area XSEG    (XDATA)
                                    345 ;--------------------------------------------------------
                                    346 ; absolute external ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area XABS    (ABS,XDATA)
                                    349 ;--------------------------------------------------------
                                    350 ; external initialized ram data
                                    351 ;--------------------------------------------------------
                                    352 	.area XISEG   (XDATA)
                                    353 	.area HOME    (CODE)
                                    354 	.area GSINIT0 (CODE)
                                    355 	.area GSINIT1 (CODE)
                                    356 	.area GSINIT2 (CODE)
                                    357 	.area GSINIT3 (CODE)
                                    358 	.area GSINIT4 (CODE)
                                    359 	.area GSINIT5 (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area CSEG    (CODE)
                                    363 ;--------------------------------------------------------
                                    364 ; interrupt vector 
                                    365 ;--------------------------------------------------------
                                    366 	.area HOME    (CODE)
      000000                        367 __interrupt_vect:
      000000 02r00r00         [24]  368 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  369 	reti
      000004                        370 	.ds	7
      00000B 02r00r00         [24]  371 	ljmp	_isr_timer0
                                    372 ;--------------------------------------------------------
                                    373 ; global & static initialisations
                                    374 ;--------------------------------------------------------
                                    375 	.area HOME    (CODE)
                                    376 	.area GSINIT  (CODE)
                                    377 	.area GSFINAL (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.globl __sdcc_gsinit_startup
                                    380 	.globl __sdcc_program_startup
                                    381 	.globl __start__stack
                                    382 	.globl __mcs51_genXINIT
                                    383 	.globl __mcs51_genXRAMCLEAR
                                    384 	.globl __mcs51_genRAMCLEAR
                                    385 ;	transmitter.c:3: volatile int state = 0;
      000000 E4               [12]  386 	clr	a
      000001 F5*00            [12]  387 	mov	_state,a
      000003 F5*01            [12]  388 	mov	(_state + 1),a
                                    389 ;	transmitter.c:4: volatile int state_was = 0;
      000005 F5*02            [12]  390 	mov	_state_was,a
      000007 F5*03            [12]  391 	mov	(_state_was + 1),a
                                    392 ;	transmitter.c:15: char data_r=0;
                                    393 ;	1-genFromRTrack replaced	mov	_data_r,#0x00
      000009 F5*04            [12]  394 	mov	_data_r,a
                                    395 ;	transmitter.c:16: char received=1;
      00000B 75*05 01         [24]  396 	mov	_received,#0x01
                                    397 ;	transmitter.c:17: volatile int timerCount = 0;
      00000E F5*06            [12]  398 	mov	_timerCount,a
      000010 F5*07            [12]  399 	mov	(_timerCount + 1),a
                                    400 ;	transmitter.c:18: volatile int time_delay = 15;
      000012 75*08 0F         [24]  401 	mov	_time_delay,#0x0f
                                    402 ;	1-genFromRTrack replaced	mov	(_time_delay + 1),#0x00
      000015 F5*09            [12]  403 	mov	(_time_delay + 1),a
                                    404 ;	transmitter.c:19: char button='l';
      000017 75*0A 6C         [24]  405 	mov	_button,#0x6c
                                    406 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  407 	ljmp	__sdcc_program_startup
                                    408 ;--------------------------------------------------------
                                    409 ; Home
                                    410 ;--------------------------------------------------------
                                    411 	.area HOME    (CODE)
                                    412 	.area HOME    (CODE)
      00000E                        413 __sdcc_program_startup:
      00000E 02r02r62         [24]  414 	ljmp	_main
                                    415 ;	return from main will return to caller
                                    416 ;--------------------------------------------------------
                                    417 ; code
                                    418 ;--------------------------------------------------------
                                    419 	.area CSEG    (CODE)
                                    420 ;------------------------------------------------------------
                                    421 ;Allocation info for local variables in function 'isr_timer0'
                                    422 ;------------------------------------------------------------
                                    423 ;	transmitter.c:21: void isr_timer0(void) __interrupt 1   // It is called after every 5msec
                                    424 ;	-----------------------------------------
                                    425 ;	 function isr_timer0
                                    426 ;	-----------------------------------------
      000000                        427 _isr_timer0:
                           000007   428 	ar7 = 0x07
                           000006   429 	ar6 = 0x06
                           000005   430 	ar5 = 0x05
                           000004   431 	ar4 = 0x04
                           000003   432 	ar3 = 0x03
                           000002   433 	ar2 = 0x02
                           000001   434 	ar1 = 0x01
                           000000   435 	ar0 = 0x00
      000000 C0*00            [24]  436 	push	bits
      000002 C0 E0            [24]  437 	push	acc
      000004 C0 F0            [24]  438 	push	b
      000006 C0 82            [24]  439 	push	dpl
      000008 C0 83            [24]  440 	push	dph
      00000A C0 07            [24]  441 	push	(0+7)
      00000C C0 06            [24]  442 	push	(0+6)
      00000E C0 05            [24]  443 	push	(0+5)
      000010 C0 04            [24]  444 	push	(0+4)
      000012 C0 03            [24]  445 	push	(0+3)
      000014 C0 02            [24]  446 	push	(0+2)
      000016 C0 01            [24]  447 	push	(0+1)
      000018 C0 00            [24]  448 	push	(0+0)
      00001A C0 D0            [24]  449 	push	psw
      00001C 75 D0 00         [24]  450 	mov	psw,#0x00
                                    451 ;	transmitter.c:23: TH0  = 0Xee;         // ReLoad the timer value for 5ms
      00001F 75 8C EE         [24]  452 	mov	_TH0,#0xee
                                    453 ;	transmitter.c:24: TL0  = 0X00;
      000022 75 8A 00         [24]  454 	mov	_TL0,#0x00
                                    455 ;	transmitter.c:25: timerCount++;
      000025 AE*06            [24]  456 	mov	r6,_timerCount
      000027 AF*07            [24]  457 	mov	r7,(_timerCount + 1)
      000029 74 01            [12]  458 	mov	a,#0x01
      00002B 2E               [12]  459 	add	a,r6
      00002C F5*06            [12]  460 	mov	_timerCount,a
      00002E E4               [12]  461 	clr	a
      00002F 3F               [12]  462 	addc	a,r7
      000030 F5*07            [12]  463 	mov	(_timerCount + 1),a
                                    464 ;	transmitter.c:26: switch(P1)
      000032 AF 90            [24]  465 	mov	r7,_P1
      000034 BF 1F 03         [24]  466 	cjne	r7,#0x1f,00251$
      000037 02r00rFE         [24]  467 	ljmp	00113$
      00003A                        468 00251$:
      00003A BF 2F 03         [24]  469 	cjne	r7,#0x2f,00252$
      00003D 02r00rEA         [24]  470 	ljmp	00112$
      000040                        471 00252$:
      000040 BF 37 03         [24]  472 	cjne	r7,#0x37,00253$
      000043 02r00rBE         [24]  473 	ljmp	00108$
      000046                        474 00253$:
      000046 BF 3B 02         [24]  475 	cjne	r7,#0x3b,00254$
      000049 80 47            [24]  476 	sjmp	00104$
      00004B                        477 00254$:
      00004B BF 3D 02         [24]  478 	cjne	r7,#0x3d,00255$
      00004E 80 2D            [24]  479 	sjmp	00103$
      000050                        480 00255$:
      000050 BF 3E 02         [24]  481 	cjne	r7,#0x3e,00256$
      000053 80 10            [24]  482 	sjmp	00102$
      000055                        483 00256$:
      000055 BF 3F 02         [24]  484 	cjne	r7,#0x3f,00257$
      000058 80 03            [24]  485 	sjmp	00258$
      00005A                        486 00257$:
      00005A 02r01r13         [24]  487 	ljmp	00115$
      00005D                        488 00258$:
                                    489 ;	transmitter.c:31: state = 0;
      00005D E4               [12]  490 	clr	a
      00005E F5*00            [12]  491 	mov	_state,a
      000060 F5*01            [12]  492 	mov	(_state + 1),a
                                    493 ;	transmitter.c:33: break;
      000062 02r01r13         [24]  494 	ljmp	00115$
                                    495 ;	transmitter.c:35: case 0x3e:
      000065                        496 00102$:
                                    497 ;	transmitter.c:36: Transmit_data('a');
      000065 75 82 61         [24]  498 	mov	dpl,#0x61
      000068 12r02rF9         [24]  499 	lcall	_Transmit_data
                                    500 ;	transmitter.c:37: time_delay=10;
      00006B 75*08 0A         [24]  501 	mov	_time_delay,#0x0a
      00006E 75*09 00         [24]  502 	mov	(_time_delay + 1),#0x00
                                    503 ;	transmitter.c:38: state = 1;
      000071 75*00 01         [24]  504 	mov	_state,#0x01
      000074 75*01 00         [24]  505 	mov	(_state + 1),#0x00
                                    506 ;	transmitter.c:39: button = 'a';
      000077 75*0A 61         [24]  507 	mov	_button,#0x61
                                    508 ;	transmitter.c:40: break;
      00007A 02r01r13         [24]  509 	ljmp	00115$
                                    510 ;	transmitter.c:42: case 0x3d:
      00007D                        511 00103$:
                                    512 ;	transmitter.c:43: Transmit_data('b');
      00007D 75 82 62         [24]  513 	mov	dpl,#0x62
      000080 12r02rF9         [24]  514 	lcall	_Transmit_data
                                    515 ;	transmitter.c:44: state = 2;
      000083 75*00 02         [24]  516 	mov	_state,#0x02
      000086 75*01 00         [24]  517 	mov	(_state + 1),#0x00
                                    518 ;	transmitter.c:45: P2 =0x80;
      000089 75 A0 80         [24]  519 	mov	_P2,#0x80
                                    520 ;	transmitter.c:46: button = 'b';
      00008C 75*0A 62         [24]  521 	mov	_button,#0x62
                                    522 ;	transmitter.c:47: break;
      00008F 02r01r13         [24]  523 	ljmp	00115$
                                    524 ;	transmitter.c:49: case 0x3b:
      000092                        525 00104$:
                                    526 ;	transmitter.c:50: if(received)
      000092 E5*05            [12]  527 	mov	a,_received
      000094 60 11            [24]  528 	jz	00106$
                                    529 ;	transmitter.c:51: {Transmit_data('d');
      000096 75 82 64         [24]  530 	mov	dpl,#0x64
      000099 12r02rF9         [24]  531 	lcall	_Transmit_data
                                    532 ;	transmitter.c:52: state = 7;
      00009C 75*00 07         [24]  533 	mov	_state,#0x07
      00009F 75*01 00         [24]  534 	mov	(_state + 1),#0x00
                                    535 ;	transmitter.c:53: button = 'd';
      0000A2 75*0A 64         [24]  536 	mov	_button,#0x64
      0000A5 80 0F            [24]  537 	sjmp	00107$
      0000A7                        538 00106$:
                                    539 ;	transmitter.c:56: {Transmit_data('c');
      0000A7 75 82 63         [24]  540 	mov	dpl,#0x63
      0000AA 12r02rF9         [24]  541 	lcall	_Transmit_data
                                    542 ;	transmitter.c:57: state = 3;
      0000AD 75*00 03         [24]  543 	mov	_state,#0x03
      0000B0 75*01 00         [24]  544 	mov	(_state + 1),#0x00
                                    545 ;	transmitter.c:58: button = 'c';
      0000B3 75*0A 63         [24]  546 	mov	_button,#0x63
      0000B6                        547 00107$:
                                    548 ;	transmitter.c:60: time_delay=10;
      0000B6 75*08 0A         [24]  549 	mov	_time_delay,#0x0a
      0000B9 75*09 00         [24]  550 	mov	(_time_delay + 1),#0x00
                                    551 ;	transmitter.c:61: break;
                                    552 ;	transmitter.c:63: case 0x37:
      0000BC 80 55            [24]  553 	sjmp	00115$
      0000BE                        554 00108$:
                                    555 ;	transmitter.c:64: if(received)
      0000BE E5*05            [12]  556 	mov	a,_received
      0000C0 60 11            [24]  557 	jz	00110$
                                    558 ;	transmitter.c:65: {Transmit_data('d');
      0000C2 75 82 64         [24]  559 	mov	dpl,#0x64
      0000C5 12r02rF9         [24]  560 	lcall	_Transmit_data
                                    561 ;	transmitter.c:66: state = 7;
      0000C8 75*00 07         [24]  562 	mov	_state,#0x07
      0000CB 75*01 00         [24]  563 	mov	(_state + 1),#0x00
                                    564 ;	transmitter.c:67: button = 'd';
      0000CE 75*0A 64         [24]  565 	mov	_button,#0x64
      0000D1 80 0F            [24]  566 	sjmp	00111$
      0000D3                        567 00110$:
                                    568 ;	transmitter.c:70: {Transmit_data('e');
      0000D3 75 82 65         [24]  569 	mov	dpl,#0x65
      0000D6 12r02rF9         [24]  570 	lcall	_Transmit_data
                                    571 ;	transmitter.c:71: state = 4;
      0000D9 75*00 04         [24]  572 	mov	_state,#0x04
      0000DC 75*01 00         [24]  573 	mov	(_state + 1),#0x00
                                    574 ;	transmitter.c:72: button = 'e';
      0000DF 75*0A 65         [24]  575 	mov	_button,#0x65
      0000E2                        576 00111$:
                                    577 ;	transmitter.c:74: time_delay=10;
      0000E2 75*08 0A         [24]  578 	mov	_time_delay,#0x0a
      0000E5 75*09 00         [24]  579 	mov	(_time_delay + 1),#0x00
                                    580 ;	transmitter.c:75: break;
                                    581 ;	transmitter.c:77: case 0x2f:
      0000E8 80 29            [24]  582 	sjmp	00115$
      0000EA                        583 00112$:
                                    584 ;	transmitter.c:78: Transmit_data('f');
      0000EA 75 82 66         [24]  585 	mov	dpl,#0x66
      0000ED 12r02rF9         [24]  586 	lcall	_Transmit_data
                                    587 ;	transmitter.c:79: state = 5;
      0000F0 75*00 05         [24]  588 	mov	_state,#0x05
      0000F3 75*01 00         [24]  589 	mov	(_state + 1),#0x00
                                    590 ;	transmitter.c:80: P2 =0x20;
      0000F6 75 A0 20         [24]  591 	mov	_P2,#0x20
                                    592 ;	transmitter.c:81: button = 'f';
      0000F9 75*0A 66         [24]  593 	mov	_button,#0x66
                                    594 ;	transmitter.c:82: break;
                                    595 ;	transmitter.c:84: case 0x1f:
      0000FC 80 15            [24]  596 	sjmp	00115$
      0000FE                        597 00113$:
                                    598 ;	transmitter.c:85: Transmit_data('g');
      0000FE 75 82 67         [24]  599 	mov	dpl,#0x67
      000101 12r02rF9         [24]  600 	lcall	_Transmit_data
                                    601 ;	transmitter.c:86: state = 6;
      000104 75*00 06         [24]  602 	mov	_state,#0x06
      000107 75*01 00         [24]  603 	mov	(_state + 1),#0x00
                                    604 ;	transmitter.c:87: button = 'g';
      00010A 75*0A 67         [24]  605 	mov	_button,#0x67
                                    606 ;	transmitter.c:88: time_delay=10;
      00010D 75*08 0A         [24]  607 	mov	_time_delay,#0x0a
      000110 75*09 00         [24]  608 	mov	(_time_delay + 1),#0x00
                                    609 ;	transmitter.c:92: }
      000113                        610 00115$:
                                    611 ;	transmitter.c:94: if(timerCount == 60)
      000113 74 3C            [12]  612 	mov	a,#0x3c
      000115 B5*06 06         [24]  613 	cjne	a,_timerCount,00261$
      000118 E4               [12]  614 	clr	a
      000119 B5*07 02         [24]  615 	cjne	a,(_timerCount + 1),00261$
      00011C 80 02            [24]  616 	sjmp	00262$
      00011E                        617 00261$:
      00011E 80 06            [24]  618 	sjmp	00117$
      000120                        619 00262$:
                                    620 ;	transmitter.c:95: Transmit_data(button);
      000120 85*0A 82         [24]  621 	mov	dpl,_button
      000123 12r02rF9         [24]  622 	lcall	_Transmit_data
      000126                        623 00117$:
                                    624 ;	transmitter.c:97: if(((state_was==2)||(state_was==5))&&(state_was!=state))
      000126 74 02            [12]  625 	mov	a,#0x02
      000128 B5*02 06         [24]  626 	cjne	a,_state_was,00263$
      00012B E4               [12]  627 	clr	a
      00012C B5*03 02         [24]  628 	cjne	a,(_state_was + 1),00263$
      00012F 80 0D            [24]  629 	sjmp	00121$
      000131                        630 00263$:
      000131 74 05            [12]  631 	mov	a,#0x05
      000133 B5*02 06         [24]  632 	cjne	a,_state_was,00264$
      000136 E4               [12]  633 	clr	a
      000137 B5*03 02         [24]  634 	cjne	a,(_state_was + 1),00264$
      00013A 80 02            [24]  635 	sjmp	00265$
      00013C                        636 00264$:
      00013C 80 15            [24]  637 	sjmp	00119$
      00013E                        638 00265$:
      00013E                        639 00121$:
      00013E E5*00            [12]  640 	mov	a,_state
      000140 B5*02 07         [24]  641 	cjne	a,_state_was,00266$
      000143 E5*01            [12]  642 	mov	a,(_state + 1)
      000145 B5*03 02         [24]  643 	cjne	a,(_state_was + 1),00266$
      000148 80 09            [24]  644 	sjmp	00119$
      00014A                        645 00266$:
                                    646 ;	transmitter.c:98: {state = 8;button='u';}
      00014A 75*00 08         [24]  647 	mov	_state,#0x08
      00014D 75*01 00         [24]  648 	mov	(_state + 1),#0x00
      000150 75*0A 75         [24]  649 	mov	_button,#0x75
      000153                        650 00119$:
                                    651 ;	transmitter.c:99: if(timerCount < (time_delay*10)) // count for LED-ON delay
      000153 85*08*00         [24]  652 	mov	__mulint_PARM_2,_time_delay
      000156 85*09*01         [24]  653 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      000159 90 00 0A         [24]  654 	mov	dptr,#0x000a
      00015C 12r00r00         [24]  655 	lcall	__mulint
      00015F AE 82            [24]  656 	mov	r6,dpl
      000161 AF 83            [24]  657 	mov	r7,dph
      000163 C3               [12]  658 	clr	c
      000164 E5*06            [12]  659 	mov	a,_timerCount
      000166 9E               [12]  660 	subb	a,r6
      000167 E5*07            [12]  661 	mov	a,(_timerCount + 1)
      000169 64 80            [12]  662 	xrl	a,#0x80
      00016B 8F F0            [24]  663 	mov	b,r7
      00016D 63 F0 80         [24]  664 	xrl	b,#0x80
      000170 95 F0            [12]  665 	subb	a,b
      000172 50 5B            [24]  666 	jnc	00143$
                                    667 ;	transmitter.c:101: switch(state)
      000174 AE*00            [24]  668 	mov	r6,_state
      000176 AF*01            [24]  669 	mov	r7,(_state + 1)
      000178 BE 01 05         [24]  670 	cjne	r6,#0x01,00268$
      00017B BF 00 02         [24]  671 	cjne	r7,#0x00,00268$
      00017E 80 2B            [24]  672 	sjmp	00122$
      000180                        673 00268$:
      000180 BE 03 05         [24]  674 	cjne	r6,#0x03,00269$
      000183 BF 00 02         [24]  675 	cjne	r7,#0x00,00269$
      000186 80 29            [24]  676 	sjmp	00123$
      000188                        677 00269$:
      000188 BE 04 05         [24]  678 	cjne	r6,#0x04,00270$
      00018B BF 00 02         [24]  679 	cjne	r7,#0x00,00270$
      00018E 80 27            [24]  680 	sjmp	00124$
      000190                        681 00270$:
      000190 BE 06 05         [24]  682 	cjne	r6,#0x06,00271$
      000193 BF 00 02         [24]  683 	cjne	r7,#0x00,00271$
      000196 80 25            [24]  684 	sjmp	00125$
      000198                        685 00271$:
      000198 BE 07 05         [24]  686 	cjne	r6,#0x07,00272$
      00019B BF 00 02         [24]  687 	cjne	r7,#0x00,00272$
      00019E 80 23            [24]  688 	sjmp	00126$
      0001A0                        689 00272$:
      0001A0 BE 08 05         [24]  690 	cjne	r6,#0x08,00273$
      0001A3 BF 00 02         [24]  691 	cjne	r7,#0x00,00273$
      0001A6 80 21            [24]  692 	sjmp	00127$
      0001A8                        693 00273$:
      0001A8 02r02r3F         [24]  694 	ljmp	00144$
                                    695 ;	transmitter.c:104: case 1:	P2 =0x80;break;
      0001AB                        696 00122$:
      0001AB 75 A0 80         [24]  697 	mov	_P2,#0x80
      0001AE 02r02r3F         [24]  698 	ljmp	00144$
                                    699 ;	transmitter.c:106: case 3:	P2 =0xc0;break;
      0001B1                        700 00123$:
      0001B1 75 A0 C0         [24]  701 	mov	_P2,#0xc0
      0001B4 02r02r3F         [24]  702 	ljmp	00144$
                                    703 ;	transmitter.c:107: case 4:	P2 =0x60;break;
      0001B7                        704 00124$:
      0001B7 75 A0 60         [24]  705 	mov	_P2,#0x60
      0001BA 02r02r3F         [24]  706 	ljmp	00144$
                                    707 ;	transmitter.c:109: case 6:	P2 =0x20;break;
      0001BD                        708 00125$:
      0001BD 75 A0 20         [24]  709 	mov	_P2,#0x20
      0001C0 02r02r3F         [24]  710 	ljmp	00144$
                                    711 ;	transmitter.c:110: case 7:	P2 =0x40;break;
      0001C3                        712 00126$:
      0001C3 75 A0 40         [24]  713 	mov	_P2,#0x40
      0001C6 02r02r3F         [24]  714 	ljmp	00144$
                                    715 ;	transmitter.c:111: case 8:	P2 =0x80;break;
      0001C9                        716 00127$:
      0001C9 75 A0 80         [24]  717 	mov	_P2,#0x80
      0001CC 02r02r3F         [24]  718 	ljmp	00144$
                                    719 ;	transmitter.c:112: default:break;}
      0001CF                        720 00143$:
                                    721 ;	transmitter.c:116: else if((timerCount > time_delay) &&(timerCount<time_delay*20)) // count for LED-ON delay
      0001CF C3               [12]  722 	clr	c
      0001D0 E5*08            [12]  723 	mov	a,_time_delay
      0001D2 95*06            [12]  724 	subb	a,_timerCount
      0001D4 E5*09            [12]  725 	mov	a,(_time_delay + 1)
      0001D6 64 80            [12]  726 	xrl	a,#0x80
      0001D8 85*07 F0         [24]  727 	mov	b,(_timerCount + 1)
      0001DB 63 F0 80         [24]  728 	xrl	b,#0x80
      0001DE 95 F0            [12]  729 	subb	a,b
      0001E0 50 58            [24]  730 	jnc	00139$
      0001E2 85*08*00         [24]  731 	mov	__mulint_PARM_2,_time_delay
      0001E5 85*09*01         [24]  732 	mov	(__mulint_PARM_2 + 1),(_time_delay + 1)
      0001E8 90 00 14         [24]  733 	mov	dptr,#0x0014
      0001EB 12r00r00         [24]  734 	lcall	__mulint
      0001EE AE 82            [24]  735 	mov	r6,dpl
      0001F0 AF 83            [24]  736 	mov	r7,dph
      0001F2 C3               [12]  737 	clr	c
      0001F3 E5*06            [12]  738 	mov	a,_timerCount
      0001F5 9E               [12]  739 	subb	a,r6
      0001F6 E5*07            [12]  740 	mov	a,(_timerCount + 1)
      0001F8 64 80            [12]  741 	xrl	a,#0x80
      0001FA 8F F0            [24]  742 	mov	b,r7
      0001FC 63 F0 80         [24]  743 	xrl	b,#0x80
      0001FF 95 F0            [12]  744 	subb	a,b
      000201 50 37            [24]  745 	jnc	00139$
                                    746 ;	transmitter.c:118: switch(state)
      000203 AE*00            [24]  747 	mov	r6,_state
      000205 AF*01            [24]  748 	mov	r7,(_state + 1)
      000207 BE 01 05         [24]  749 	cjne	r6,#0x01,00276$
      00020A BF 00 02         [24]  750 	cjne	r7,#0x00,00276$
      00020D 80 26            [24]  751 	sjmp	00135$
      00020F                        752 00276$:
      00020F BE 03 05         [24]  753 	cjne	r6,#0x03,00277$
      000212 BF 00 02         [24]  754 	cjne	r7,#0x00,00277$
      000215 80 1E            [24]  755 	sjmp	00135$
      000217                        756 00277$:
      000217 BE 04 05         [24]  757 	cjne	r6,#0x04,00278$
      00021A BF 00 02         [24]  758 	cjne	r7,#0x00,00278$
      00021D 80 16            [24]  759 	sjmp	00135$
      00021F                        760 00278$:
      00021F BE 06 05         [24]  761 	cjne	r6,#0x06,00279$
      000222 BF 00 02         [24]  762 	cjne	r7,#0x00,00279$
      000225 80 0E            [24]  763 	sjmp	00135$
      000227                        764 00279$:
      000227 BE 07 05         [24]  765 	cjne	r6,#0x07,00280$
      00022A BF 00 02         [24]  766 	cjne	r7,#0x00,00280$
      00022D 80 06            [24]  767 	sjmp	00135$
      00022F                        768 00280$:
      00022F BE 08 0D         [24]  769 	cjne	r6,#0x08,00144$
      000232 BF 00 0A         [24]  770 	cjne	r7,#0x00,00144$
                                    771 ;	transmitter.c:126: case 8:P2 =0x00;break;
      000235                        772 00135$:
      000235 75 A0 00         [24]  773 	mov	_P2,#0x00
                                    774 ;	transmitter.c:129: default:break;}
      000238 80 05            [24]  775 	sjmp	00144$
      00023A                        776 00139$:
                                    777 ;	transmitter.c:133: timerCount = 0;
      00023A E4               [12]  778 	clr	a
      00023B F5*06            [12]  779 	mov	_timerCount,a
      00023D F5*07            [12]  780 	mov	(_timerCount + 1),a
      00023F                        781 00144$:
                                    782 ;	transmitter.c:136: state_was=state;
      00023F 85*00*02         [24]  783 	mov	_state_was,_state
      000242 85*01*03         [24]  784 	mov	(_state_was + 1),(_state + 1)
                                    785 ;	transmitter.c:137: }
      000245 D0 D0            [24]  786 	pop	psw
      000247 D0 00            [24]  787 	pop	(0+0)
      000249 D0 01            [24]  788 	pop	(0+1)
      00024B D0 02            [24]  789 	pop	(0+2)
      00024D D0 03            [24]  790 	pop	(0+3)
      00024F D0 04            [24]  791 	pop	(0+4)
      000251 D0 05            [24]  792 	pop	(0+5)
      000253 D0 06            [24]  793 	pop	(0+6)
      000255 D0 07            [24]  794 	pop	(0+7)
      000257 D0 83            [24]  795 	pop	dph
      000259 D0 82            [24]  796 	pop	dpl
      00025B D0 F0            [24]  797 	pop	b
      00025D D0 E0            [24]  798 	pop	acc
      00025F D0*00            [24]  799 	pop	bits
      000261 32               [24]  800 	reti
                                    801 ;------------------------------------------------------------
                                    802 ;Allocation info for local variables in function 'main'
                                    803 ;------------------------------------------------------------
                                    804 ;	transmitter.c:139: void main(void)
                                    805 ;	-----------------------------------------
                                    806 ;	 function main
                                    807 ;	-----------------------------------------
      000262                        808 _main:
                                    809 ;	transmitter.c:141: startup();
      000262 12r03r2D         [24]  810 	lcall	_startup
                                    811 ;	transmitter.c:143: UART_Init();
      000265 12r02rC7         [24]  812 	lcall	_UART_Init
                                    813 ;	transmitter.c:144: handshake();
      000268 12r02rD3         [24]  814 	lcall	_handshake
                                    815 ;	transmitter.c:146: InitTimer1();
      00026B 12r03r73         [24]  816 	lcall	_InitTimer1
                                    817 ;	transmitter.c:148: EA  = 1;         // Global interrupt enable
                                    818 ;	assignBit
      00026E D2 AF            [12]  819 	setb	_EA
                                    820 ;	transmitter.c:150: while(1)
      000270                        821 00105$:
                                    822 ;	transmitter.c:152: if(state)
      000270 E5*00            [12]  823 	mov	a,_state
      000272 45*01            [12]  824 	orl	a,(_state + 1)
      000274 60 05            [24]  825 	jz	00102$
                                    826 ;	transmitter.c:153: delay();
      000276 12r02r9E         [24]  827 	lcall	_delay
      000279 80 1E            [24]  828 	sjmp	00103$
      00027B                        829 00102$:
                                    830 ;	transmitter.c:156: button = 'l';
      00027B 75*0A 6C         [24]  831 	mov	_button,#0x6c
                                    832 ;	transmitter.c:157: delay();
      00027E 12r02r9E         [24]  833 	lcall	_delay
                                    834 ;	transmitter.c:158: P2=0x00;
      000281 75 A0 00         [24]  835 	mov	_P2,#0x00
                                    836 ;	transmitter.c:159: delay();
      000284 12r02r9E         [24]  837 	lcall	_delay
                                    838 ;	transmitter.c:160: delay();
      000287 12r02r9E         [24]  839 	lcall	_delay
                                    840 ;	transmitter.c:161: delay();
      00028A 12r02r9E         [24]  841 	lcall	_delay
                                    842 ;	transmitter.c:162: P2=0xA0;
      00028D 75 A0 A0         [24]  843 	mov	_P2,#0xa0
                                    844 ;	transmitter.c:163: delay();
      000290 12r02r9E         [24]  845 	lcall	_delay
                                    846 ;	transmitter.c:164: delay();
      000293 12r02r9E         [24]  847 	lcall	_delay
                                    848 ;	transmitter.c:165: delay();
      000296 12r02r9E         [24]  849 	lcall	_delay
      000299                        850 00103$:
                                    851 ;	transmitter.c:167: check_x();
      000299 12r03r02         [24]  852 	lcall	_check_x
                                    853 ;	transmitter.c:169: }
      00029C 80 D2            [24]  854 	sjmp	00105$
                                    855 ;------------------------------------------------------------
                                    856 ;Allocation info for local variables in function 'delay'
                                    857 ;------------------------------------------------------------
                                    858 ;i                         Allocated to registers r6 r7 
                                    859 ;j                         Allocated to registers r4 r5 
                                    860 ;------------------------------------------------------------
                                    861 ;	transmitter.c:172: void delay(void)
                                    862 ;	-----------------------------------------
                                    863 ;	 function delay
                                    864 ;	-----------------------------------------
      00029E                        865 _delay:
                                    866 ;	transmitter.c:175: for(i=0;i<0x33;i++)
      00029E 7E 00            [12]  867 	mov	r6,#0x00
      0002A0 7F 00            [12]  868 	mov	r7,#0x00
      0002A2                        869 00106$:
                                    870 ;	transmitter.c:176: for(j=0;j<0xff;j++);
      0002A2 7C FF            [12]  871 	mov	r4,#0xff
      0002A4 7D 00            [12]  872 	mov	r5,#0x00
      0002A6                        873 00105$:
      0002A6 EC               [12]  874 	mov	a,r4
      0002A7 24 FF            [12]  875 	add	a,#0xff
      0002A9 FA               [12]  876 	mov	r2,a
      0002AA ED               [12]  877 	mov	a,r5
      0002AB 34 FF            [12]  878 	addc	a,#0xff
      0002AD FB               [12]  879 	mov	r3,a
      0002AE 8A 04            [24]  880 	mov	ar4,r2
      0002B0 8B 05            [24]  881 	mov	ar5,r3
      0002B2 EA               [12]  882 	mov	a,r2
      0002B3 4B               [12]  883 	orl	a,r3
      0002B4 70 F0            [24]  884 	jnz	00105$
                                    885 ;	transmitter.c:175: for(i=0;i<0x33;i++)
      0002B6 0E               [12]  886 	inc	r6
      0002B7 BE 00 01         [24]  887 	cjne	r6,#0x00,00124$
      0002BA 0F               [12]  888 	inc	r7
      0002BB                        889 00124$:
      0002BB C3               [12]  890 	clr	c
      0002BC EE               [12]  891 	mov	a,r6
      0002BD 94 33            [12]  892 	subb	a,#0x33
      0002BF EF               [12]  893 	mov	a,r7
      0002C0 64 80            [12]  894 	xrl	a,#0x80
      0002C2 94 80            [12]  895 	subb	a,#0x80
      0002C4 40 DC            [24]  896 	jc	00106$
                                    897 ;	transmitter.c:177: }
      0002C6 22               [24]  898 	ret
                                    899 ;------------------------------------------------------------
                                    900 ;Allocation info for local variables in function 'UART_Init'
                                    901 ;------------------------------------------------------------
                                    902 ;	transmitter.c:180: void UART_Init()
                                    903 ;	-----------------------------------------
                                    904 ;	 function UART_Init
                                    905 ;	-----------------------------------------
      0002C7                        906 _UART_Init:
                                    907 ;	transmitter.c:182: TMOD = 0x20;		/* Timer 1, 8-bit auto reload mode */
      0002C7 75 89 20         [24]  908 	mov	_TMOD,#0x20
                                    909 ;	transmitter.c:183: TH1 = 0xFD;		/* Load value for 9600 baud rate */
      0002CA 75 8D FD         [24]  910 	mov	_TH1,#0xfd
                                    911 ;	transmitter.c:184: SCON = 0x50;		/* Mode 1, reception enable */
      0002CD 75 98 50         [24]  912 	mov	_SCON,#0x50
                                    913 ;	transmitter.c:185: TR1 = 1;		/* Start timer 1 */
                                    914 ;	assignBit
      0002D0 D2 8E            [12]  915 	setb	_TR1
                                    916 ;	transmitter.c:186: }
      0002D2 22               [24]  917 	ret
                                    918 ;------------------------------------------------------------
                                    919 ;Allocation info for local variables in function 'handshake'
                                    920 ;------------------------------------------------------------
                                    921 ;	transmitter.c:189: void handshake()
                                    922 ;	-----------------------------------------
                                    923 ;	 function handshake
                                    924 ;	-----------------------------------------
      0002D3                        925 _handshake:
                                    926 ;	transmitter.c:191: start:while(!data_r)
      0002D3                        927 00102$:
      0002D3 E5*04            [12]  928 	mov	a,_data_r
      0002D5 70 13            [24]  929 	jnz	00104$
                                    930 ;	transmitter.c:193: data_r=SBUF;
      0002D7 85 99*04         [24]  931 	mov	_data_r,_SBUF
                                    932 ;	transmitter.c:194: RI=0;
                                    933 ;	assignBit
      0002DA C2 98            [12]  934 	clr	_RI
                                    935 ;	transmitter.c:195: P2 = 0xA0; // Turn ON all LED's connected to Port1
      0002DC 75 A0 A0         [24]  936 	mov	_P2,#0xa0
                                    937 ;	transmitter.c:196: delay();
      0002DF 12r02r9E         [24]  938 	lcall	_delay
                                    939 ;	transmitter.c:197: P2 = 0x00; // Turn OFF all LED's connected to Port1
      0002E2 75 A0 00         [24]  940 	mov	_P2,#0x00
                                    941 ;	transmitter.c:198: delay();
      0002E5 12r02r9E         [24]  942 	lcall	_delay
      0002E8 80 E9            [24]  943 	sjmp	00102$
      0002EA                        944 00104$:
                                    945 ;	transmitter.c:201: if(data_r=='x')
      0002EA 74 78            [12]  946 	mov	a,#0x78
      0002EC B5*04 E4         [24]  947 	cjne	a,_data_r,00102$
                                    948 ;	transmitter.c:203: Transmit_data('y');
      0002EF 75 82 79         [24]  949 	mov	dpl,#0x79
      0002F2 12r02rF9         [24]  950 	lcall	_Transmit_data
                                    951 ;	transmitter.c:204: data_r=0;
      0002F5 75*04 00         [24]  952 	mov	_data_r,#0x00
                                    953 ;	transmitter.c:207: else goto start;
                                    954 ;	transmitter.c:208: }
      0002F8 22               [24]  955 	ret
                                    956 ;------------------------------------------------------------
                                    957 ;Allocation info for local variables in function 'Transmit_data'
                                    958 ;------------------------------------------------------------
                                    959 ;tx_data                   Allocated to registers 
                                    960 ;------------------------------------------------------------
                                    961 ;	transmitter.c:211: void Transmit_data(char tx_data)
                                    962 ;	-----------------------------------------
                                    963 ;	 function Transmit_data
                                    964 ;	-----------------------------------------
      0002F9                        965 _Transmit_data:
      0002F9 85 82 99         [24]  966 	mov	_SBUF,dpl
                                    967 ;	transmitter.c:214: while (TI==0);		/* Wait until stop bit transmit */
      0002FC                        968 00101$:
                                    969 ;	transmitter.c:215: TI = 0;			/* Clear TI flag */
                                    970 ;	assignBit
      0002FC 10 99 02         [24]  971 	jbc	_TI,00114$
      0002FF 80 FB            [24]  972 	sjmp	00101$
      000301                        973 00114$:
                                    974 ;	transmitter.c:216: }
      000301 22               [24]  975 	ret
                                    976 ;------------------------------------------------------------
                                    977 ;Allocation info for local variables in function 'check_x'
                                    978 ;------------------------------------------------------------
                                    979 ;	transmitter.c:220: void check_x()
                                    980 ;	-----------------------------------------
                                    981 ;	 function check_x
                                    982 ;	-----------------------------------------
      000302                        983 _check_x:
                                    984 ;	transmitter.c:223: TI=0;
                                    985 ;	assignBit
      000302 C2 99            [12]  986 	clr	_TI
                                    987 ;	transmitter.c:224: data_r = SBUF;		/* Load char in SBUF register */
      000304 85 99*04         [24]  988 	mov	_data_r,_SBUF
                                    989 ;	transmitter.c:225: RI = 0;			/* Clear TI flag */
                                    990 ;	assignBit
      000307 C2 98            [12]  991 	clr	_RI
                                    992 ;	transmitter.c:226: if(data_r=='x')
      000309 74 78            [12]  993 	mov	a,#0x78
      00030B B5*04 06         [24]  994 	cjne	a,_data_r,00108$
                                    995 ;	transmitter.c:227: Transmit_data('y');
      00030E 75 82 79         [24]  996 	mov	dpl,#0x79
      000311 02r02rF9         [24]  997 	ljmp	_Transmit_data
      000314                        998 00108$:
                                    999 ;	transmitter.c:228: else if((data_r=='m')||(data_r=='h'))
      000314 74 6D            [12] 1000 	mov	a,#0x6d
      000316 B5*04 02         [24] 1001 	cjne	a,_data_r,00126$
      000319 80 05            [24] 1002 	sjmp	00103$
      00031B                       1003 00126$:
      00031B 74 68            [12] 1004 	mov	a,#0x68
      00031D B5*04 04         [24] 1005 	cjne	a,_data_r,00104$
      000320                       1006 00103$:
                                   1007 ;	transmitter.c:229: received = 0;
      000320 75*05 00         [24] 1008 	mov	_received,#0x00
      000323 22               [24] 1009 	ret
      000324                       1010 00104$:
                                   1011 ;	transmitter.c:230: else if(data_r=='l')
      000324 74 6C            [12] 1012 	mov	a,#0x6c
      000326 B5*04 03         [24] 1013 	cjne	a,_data_r,00110$
                                   1014 ;	transmitter.c:231: received = 1;
      000329 75*05 01         [24] 1015 	mov	_received,#0x01
      00032C                       1016 00110$:
                                   1017 ;	transmitter.c:232: }
      00032C 22               [24] 1018 	ret
                                   1019 ;------------------------------------------------------------
                                   1020 ;Allocation info for local variables in function 'startup'
                                   1021 ;------------------------------------------------------------
                                   1022 ;	transmitter.c:235: void startup(void)
                                   1023 ;	-----------------------------------------
                                   1024 ;	 function startup
                                   1025 ;	-----------------------------------------
      00032D                       1026 _startup:
                                   1027 ;	transmitter.c:237: P1 = 0xff;
      00032D 75 90 FF         [24] 1028 	mov	_P1,#0xff
                                   1029 ;	transmitter.c:238: P2 = 0x00;
      000330 75 A0 00         [24] 1030 	mov	_P2,#0x00
                                   1031 ;	transmitter.c:239: P2 = 0x00;
      000333 75 A0 00         [24] 1032 	mov	_P2,#0x00
                                   1033 ;	transmitter.c:240: delay();delay();
      000336 12r02r9E         [24] 1034 	lcall	_delay
      000339 12r02r9E         [24] 1035 	lcall	_delay
                                   1036 ;	transmitter.c:241: P2 = 0xE0;
      00033C 75 A0 E0         [24] 1037 	mov	_P2,#0xe0
                                   1038 ;	transmitter.c:242: delay();
      00033F 12r02r9E         [24] 1039 	lcall	_delay
                                   1040 ;	transmitter.c:243: P2 = 0x80;
      000342 75 A0 80         [24] 1041 	mov	_P2,#0x80
                                   1042 ;	transmitter.c:244: delay();delay();delay();delay();
      000345 12r02r9E         [24] 1043 	lcall	_delay
      000348 12r02r9E         [24] 1044 	lcall	_delay
      00034B 12r02r9E         [24] 1045 	lcall	_delay
      00034E 12r02r9E         [24] 1046 	lcall	_delay
                                   1047 ;	transmitter.c:245: P2 = 0x40;
      000351 75 A0 40         [24] 1048 	mov	_P2,#0x40
                                   1049 ;	transmitter.c:246: delay();delay();delay();delay();
      000354 12r02r9E         [24] 1050 	lcall	_delay
      000357 12r02r9E         [24] 1051 	lcall	_delay
      00035A 12r02r9E         [24] 1052 	lcall	_delay
      00035D 12r02r9E         [24] 1053 	lcall	_delay
                                   1054 ;	transmitter.c:247: P2 = 0x20;
      000360 75 A0 20         [24] 1055 	mov	_P2,#0x20
                                   1056 ;	transmitter.c:248: delay();delay();delay();delay();
      000363 12r02r9E         [24] 1057 	lcall	_delay
      000366 12r02r9E         [24] 1058 	lcall	_delay
      000369 12r02r9E         [24] 1059 	lcall	_delay
      00036C 12r02r9E         [24] 1060 	lcall	_delay
                                   1061 ;	transmitter.c:249: P2 = 0x00;
      00036F 75 A0 00         [24] 1062 	mov	_P2,#0x00
                                   1063 ;	transmitter.c:250: }
      000372 22               [24] 1064 	ret
                                   1065 ;------------------------------------------------------------
                                   1066 ;Allocation info for local variables in function 'InitTimer1'
                                   1067 ;------------------------------------------------------------
                                   1068 ;	transmitter.c:254: void InitTimer1(void)
                                   1069 ;	-----------------------------------------
                                   1070 ;	 function InitTimer1
                                   1071 ;	-----------------------------------------
      000373                       1072 _InitTimer1:
                                   1073 ;	transmitter.c:256: TMOD |= 0x01;    // Set timer0 in mode 1
      000373 43 89 01         [24] 1074 	orl	_TMOD,#0x01
                                   1075 ;	transmitter.c:257: TH0 = 0xee;      // 5 msec reloading time
      000376 75 8C EE         [24] 1076 	mov	_TH0,#0xee
                                   1077 ;	transmitter.c:258: TL0 = 0x00;      // First time value
      000379 75 8A 00         [24] 1078 	mov	_TL0,#0x00
                                   1079 ;	transmitter.c:259: TR0 = 1;         // Start Timer 1
                                   1080 ;	assignBit
      00037C D2 8C            [12] 1081 	setb	_TR0
                                   1082 ;	transmitter.c:260: ET0 = 1;         // Enable Timer1 interrupts	
                                   1083 ;	assignBit
      00037E D2 A9            [12] 1084 	setb	_ET0
                                   1085 ;	transmitter.c:261: }
      000380 22               [24] 1086 	ret
                                   1087 	.area CSEG    (CODE)
                                   1088 	.area CONST   (CODE)
                                   1089 	.area XINIT   (CODE)
                                   1090 	.area CABS    (ABS,CODE)
