                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.4 #11418 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module transmitter
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TF2
                                     13 	.globl _EXF2
                                     14 	.globl _RCLK
                                     15 	.globl _TCLK
                                     16 	.globl _EXEN2
                                     17 	.globl _TR2
                                     18 	.globl _C_T2
                                     19 	.globl _CP_RL2
                                     20 	.globl _T2CON_7
                                     21 	.globl _T2CON_6
                                     22 	.globl _T2CON_5
                                     23 	.globl _T2CON_4
                                     24 	.globl _T2CON_3
                                     25 	.globl _T2CON_2
                                     26 	.globl _T2CON_1
                                     27 	.globl _T2CON_0
                                     28 	.globl _PT2
                                     29 	.globl _ET2
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _TH2
                                    106 	.globl _TL2
                                    107 	.globl _RCAP2H
                                    108 	.globl _RCAP2L
                                    109 	.globl _T2CON
                                    110 	.globl _B
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _IP
                                    114 	.globl _P3
                                    115 	.globl _IE
                                    116 	.globl _P2
                                    117 	.globl _SBUF
                                    118 	.globl _SCON
                                    119 	.globl _P1
                                    120 	.globl _TH1
                                    121 	.globl _TH0
                                    122 	.globl _TL1
                                    123 	.globl _TL0
                                    124 	.globl _TMOD
                                    125 	.globl _TCON
                                    126 	.globl _PCON
                                    127 	.globl _DPH
                                    128 	.globl _DPL
                                    129 	.globl _SP
                                    130 	.globl _P0
                                    131 	.globl _state
                                    132 	.globl _delay
                                    133 	.globl _UART_Init
                                    134 	.globl _Transmit_data
                                    135 	.globl _startup
                                    136 	.globl _touch
                                    137 ;--------------------------------------------------------
                                    138 ; special function registers
                                    139 ;--------------------------------------------------------
                                    140 	.area RSEG    (ABS,DATA)
      000000                        141 	.org 0x0000
                           000080   142 _P0	=	0x0080
                           000081   143 _SP	=	0x0081
                           000082   144 _DPL	=	0x0082
                           000083   145 _DPH	=	0x0083
                           000087   146 _PCON	=	0x0087
                           000088   147 _TCON	=	0x0088
                           000089   148 _TMOD	=	0x0089
                           00008A   149 _TL0	=	0x008a
                           00008B   150 _TL1	=	0x008b
                           00008C   151 _TH0	=	0x008c
                           00008D   152 _TH1	=	0x008d
                           000090   153 _P1	=	0x0090
                           000098   154 _SCON	=	0x0098
                           000099   155 _SBUF	=	0x0099
                           0000A0   156 _P2	=	0x00a0
                           0000A8   157 _IE	=	0x00a8
                           0000B0   158 _P3	=	0x00b0
                           0000B8   159 _IP	=	0x00b8
                           0000D0   160 _PSW	=	0x00d0
                           0000E0   161 _ACC	=	0x00e0
                           0000F0   162 _B	=	0x00f0
                           0000C8   163 _T2CON	=	0x00c8
                           0000CA   164 _RCAP2L	=	0x00ca
                           0000CB   165 _RCAP2H	=	0x00cb
                           0000CC   166 _TL2	=	0x00cc
                           0000CD   167 _TH2	=	0x00cd
                                    168 ;--------------------------------------------------------
                                    169 ; special function bits
                                    170 ;--------------------------------------------------------
                                    171 	.area RSEG    (ABS,DATA)
      000000                        172 	.org 0x0000
                           000080   173 _P0_0	=	0x0080
                           000081   174 _P0_1	=	0x0081
                           000082   175 _P0_2	=	0x0082
                           000083   176 _P0_3	=	0x0083
                           000084   177 _P0_4	=	0x0084
                           000085   178 _P0_5	=	0x0085
                           000086   179 _P0_6	=	0x0086
                           000087   180 _P0_7	=	0x0087
                           000088   181 _IT0	=	0x0088
                           000089   182 _IE0	=	0x0089
                           00008A   183 _IT1	=	0x008a
                           00008B   184 _IE1	=	0x008b
                           00008C   185 _TR0	=	0x008c
                           00008D   186 _TF0	=	0x008d
                           00008E   187 _TR1	=	0x008e
                           00008F   188 _TF1	=	0x008f
                           000090   189 _P1_0	=	0x0090
                           000091   190 _P1_1	=	0x0091
                           000092   191 _P1_2	=	0x0092
                           000093   192 _P1_3	=	0x0093
                           000094   193 _P1_4	=	0x0094
                           000095   194 _P1_5	=	0x0095
                           000096   195 _P1_6	=	0x0096
                           000097   196 _P1_7	=	0x0097
                           000098   197 _RI	=	0x0098
                           000099   198 _TI	=	0x0099
                           00009A   199 _RB8	=	0x009a
                           00009B   200 _TB8	=	0x009b
                           00009C   201 _REN	=	0x009c
                           00009D   202 _SM2	=	0x009d
                           00009E   203 _SM1	=	0x009e
                           00009F   204 _SM0	=	0x009f
                           0000A0   205 _P2_0	=	0x00a0
                           0000A1   206 _P2_1	=	0x00a1
                           0000A2   207 _P2_2	=	0x00a2
                           0000A3   208 _P2_3	=	0x00a3
                           0000A4   209 _P2_4	=	0x00a4
                           0000A5   210 _P2_5	=	0x00a5
                           0000A6   211 _P2_6	=	0x00a6
                           0000A7   212 _P2_7	=	0x00a7
                           0000A8   213 _EX0	=	0x00a8
                           0000A9   214 _ET0	=	0x00a9
                           0000AA   215 _EX1	=	0x00aa
                           0000AB   216 _ET1	=	0x00ab
                           0000AC   217 _ES	=	0x00ac
                           0000AF   218 _EA	=	0x00af
                           0000B0   219 _P3_0	=	0x00b0
                           0000B1   220 _P3_1	=	0x00b1
                           0000B2   221 _P3_2	=	0x00b2
                           0000B3   222 _P3_3	=	0x00b3
                           0000B4   223 _P3_4	=	0x00b4
                           0000B5   224 _P3_5	=	0x00b5
                           0000B6   225 _P3_6	=	0x00b6
                           0000B7   226 _P3_7	=	0x00b7
                           0000B0   227 _RXD	=	0x00b0
                           0000B1   228 _TXD	=	0x00b1
                           0000B2   229 _INT0	=	0x00b2
                           0000B3   230 _INT1	=	0x00b3
                           0000B4   231 _T0	=	0x00b4
                           0000B5   232 _T1	=	0x00b5
                           0000B6   233 _WR	=	0x00b6
                           0000B7   234 _RD	=	0x00b7
                           0000B8   235 _PX0	=	0x00b8
                           0000B9   236 _PT0	=	0x00b9
                           0000BA   237 _PX1	=	0x00ba
                           0000BB   238 _PT1	=	0x00bb
                           0000BC   239 _PS	=	0x00bc
                           0000D0   240 _P	=	0x00d0
                           0000D1   241 _F1	=	0x00d1
                           0000D2   242 _OV	=	0x00d2
                           0000D3   243 _RS0	=	0x00d3
                           0000D4   244 _RS1	=	0x00d4
                           0000D5   245 _F0	=	0x00d5
                           0000D6   246 _AC	=	0x00d6
                           0000D7   247 _CY	=	0x00d7
                           0000AD   248 _ET2	=	0x00ad
                           0000BD   249 _PT2	=	0x00bd
                           0000C8   250 _T2CON_0	=	0x00c8
                           0000C9   251 _T2CON_1	=	0x00c9
                           0000CA   252 _T2CON_2	=	0x00ca
                           0000CB   253 _T2CON_3	=	0x00cb
                           0000CC   254 _T2CON_4	=	0x00cc
                           0000CD   255 _T2CON_5	=	0x00cd
                           0000CE   256 _T2CON_6	=	0x00ce
                           0000CF   257 _T2CON_7	=	0x00cf
                           0000C8   258 _CP_RL2	=	0x00c8
                           0000C9   259 _C_T2	=	0x00c9
                           0000CA   260 _TR2	=	0x00ca
                           0000CB   261 _EXEN2	=	0x00cb
                           0000CC   262 _TCLK	=	0x00cc
                           0000CD   263 _RCLK	=	0x00cd
                           0000CE   264 _EXF2	=	0x00ce
                           0000CF   265 _TF2	=	0x00cf
                                    266 ;--------------------------------------------------------
                                    267 ; overlayable register banks
                                    268 ;--------------------------------------------------------
                                    269 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        270 	.ds 8
                                    271 ;--------------------------------------------------------
                                    272 ; internal ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area DSEG    (DATA)
      000000                        275 _state::
      000000                        276 	.ds 2
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable items in internal ram 
                                    279 ;--------------------------------------------------------
                                    280 	.area	OSEG    (OVR,DATA)
                                    281 	.area	OSEG    (OVR,DATA)
                                    282 ;--------------------------------------------------------
                                    283 ; Stack segment in internal ram 
                                    284 ;--------------------------------------------------------
                                    285 	.area	SSEG
      000000                        286 __start__stack:
      000000                        287 	.ds	1
                                    288 
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; absolute internal ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area IABS    (ABS,DATA)
                                    297 	.area IABS    (ABS,DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; bit data
                                    300 ;--------------------------------------------------------
                                    301 	.area BSEG    (BIT)
                                    302 ;--------------------------------------------------------
                                    303 ; paged external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area PSEG    (PAG,XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XSEG    (XDATA)
                                    310 ;--------------------------------------------------------
                                    311 ; absolute external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area XABS    (ABS,XDATA)
                                    314 ;--------------------------------------------------------
                                    315 ; external initialized ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area XISEG   (XDATA)
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT0 (CODE)
                                    320 	.area GSINIT1 (CODE)
                                    321 	.area GSINIT2 (CODE)
                                    322 	.area GSINIT3 (CODE)
                                    323 	.area GSINIT4 (CODE)
                                    324 	.area GSINIT5 (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.area GSFINAL (CODE)
                                    327 	.area CSEG    (CODE)
                                    328 ;--------------------------------------------------------
                                    329 ; interrupt vector 
                                    330 ;--------------------------------------------------------
                                    331 	.area HOME    (CODE)
      000000                        332 __interrupt_vect:
      000000 02r00r00         [24]  333 	ljmp	__sdcc_gsinit_startup
                                    334 ;--------------------------------------------------------
                                    335 ; global & static initialisations
                                    336 ;--------------------------------------------------------
                                    337 	.area HOME    (CODE)
                                    338 	.area GSINIT  (CODE)
                                    339 	.area GSFINAL (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 	.globl __sdcc_gsinit_startup
                                    342 	.globl __sdcc_program_startup
                                    343 	.globl __start__stack
                                    344 	.globl __mcs51_genXINIT
                                    345 	.globl __mcs51_genXRAMCLEAR
                                    346 	.globl __mcs51_genRAMCLEAR
                                    347 ;	transmitter.c:3: int state = 0;
      000000 E4               [12]  348 	clr	a
      000001 F5*00            [12]  349 	mov	_state,a
      000003 F5*01            [12]  350 	mov	(_state + 1),a
                                    351 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  352 	ljmp	__sdcc_program_startup
                                    353 ;--------------------------------------------------------
                                    354 ; Home
                                    355 ;--------------------------------------------------------
                                    356 	.area HOME    (CODE)
                                    357 	.area HOME    (CODE)
      000003                        358 __sdcc_program_startup:
      000003 02r00r00         [24]  359 	ljmp	_main
                                    360 ;	return from main will return to caller
                                    361 ;--------------------------------------------------------
                                    362 ; code
                                    363 ;--------------------------------------------------------
                                    364 	.area CSEG    (CODE)
                                    365 ;------------------------------------------------------------
                                    366 ;Allocation info for local variables in function 'main'
                                    367 ;------------------------------------------------------------
                                    368 ;	transmitter.c:11: void main(void)
                                    369 ;	-----------------------------------------
                                    370 ;	 function main
                                    371 ;	-----------------------------------------
      000000                        372 _main:
                           000007   373 	ar7 = 0x07
                           000006   374 	ar6 = 0x06
                           000005   375 	ar5 = 0x05
                           000004   376 	ar4 = 0x04
                           000003   377 	ar3 = 0x03
                           000002   378 	ar2 = 0x02
                           000001   379 	ar1 = 0x01
                           000000   380 	ar0 = 0x00
                                    381 ;	transmitter.c:13: P1 = 0xff;
      000000 75 90 FF         [24]  382 	mov	_P1,#0xff
                                    383 ;	transmitter.c:14: P2 = 0x00;
                                    384 ;	transmitter.c:15: state = 0;
      000003 E4               [12]  385 	clr	a
      000004 F5 A0            [12]  386 	mov	_P2,a
      000006 F5*00            [12]  387 	mov	_state,a
      000008 F5*01            [12]  388 	mov	(_state + 1),a
                                    389 ;	transmitter.c:16: UART_Init();
      00000A 12r00rF5         [24]  390 	lcall	_UART_Init
                                    391 ;	transmitter.c:17: startup();
      00000D 12r01r0A         [24]  392 	lcall	_startup
                                    393 ;	transmitter.c:24: Transmit_data('Y');
      000010 75 82 59         [24]  394 	mov	dpl,#0x59
      000013 12r01r01         [24]  395 	lcall	_Transmit_data
                                    396 ;	transmitter.c:26: while(1)
      000016                        397 00111$:
                                    398 ;	transmitter.c:28: touch();
      000016 12r01r28         [24]  399 	lcall	_touch
                                    400 ;	transmitter.c:29: switch(state)
      000019 E5*01            [12]  401 	mov	a,(_state + 1)
      00001B 20 E7 F8         [24]  402 	jb	acc.7,00111$
      00001E C3               [12]  403 	clr	c
      00001F 74 06            [12]  404 	mov	a,#0x06
      000021 95*00            [12]  405 	subb	a,_state
      000023 74 80            [12]  406 	mov	a,#(0x00 ^ 0x80)
      000025 85*01 F0         [24]  407 	mov	b,(_state + 1)
      000028 63 F0 80         [24]  408 	xrl	b,#0x80
      00002B 95 F0            [12]  409 	subb	a,b
      00002D 40 E7            [24]  410 	jc	00111$
      00002F E5*00            [12]  411 	mov	a,_state
      000031 75 F0 03         [24]  412 	mov	b,#0x03
      000034 A4               [48]  413 	mul	ab
      000035 90r00r39         [24]  414 	mov	dptr,#00129$
      000038 73               [24]  415 	jmp	@a+dptr
      000039                        416 00129$:
      000039 02r00r4E         [24]  417 	ljmp	00101$
      00003C 02r00r62         [24]  418 	ljmp	00102$
      00003F 02r00r6D         [24]  419 	ljmp	00103$
      000042 02r00r81         [24]  420 	ljmp	00104$
      000045 02r00r96         [24]  421 	ljmp	00105$
      000048 02r00rAB         [24]  422 	ljmp	00106$
      00004B 02r00rC0         [24]  423 	ljmp	00107$
                                    424 ;	transmitter.c:31: case 0: P2 = 0xA0; // Turn ON all LED's connected to Port1
      00004E                        425 00101$:
      00004E 75 A0 A0         [24]  426 	mov	_P2,#0xa0
                                    427 ;	transmitter.c:32: delay();
      000051 12r00rCC         [24]  428 	lcall	_delay
                                    429 ;	transmitter.c:33: P2 = 0x00; // Turn OFF all LED's connected to Port1
      000054 75 A0 00         [24]  430 	mov	_P2,#0x00
                                    431 ;	transmitter.c:34: delay();
      000057 12r00rCC         [24]  432 	lcall	_delay
                                    433 ;	transmitter.c:35: Transmit_data('l');
      00005A 75 82 6C         [24]  434 	mov	dpl,#0x6c
      00005D 12r01r01         [24]  435 	lcall	_Transmit_data
                                    436 ;	transmitter.c:36: break;
                                    437 ;	transmitter.c:37: case 1: P2 = 0x80; // Turn ON all LED's connected to Port1
      000060 80 B4            [24]  438 	sjmp	00111$
      000062                        439 00102$:
      000062 75 A0 80         [24]  440 	mov	_P2,#0x80
                                    441 ;	transmitter.c:38: Transmit_data('a');
      000065 75 82 61         [24]  442 	mov	dpl,#0x61
      000068 12r01r01         [24]  443 	lcall	_Transmit_data
                                    444 ;	transmitter.c:39: break;
                                    445 ;	transmitter.c:40: case 2: P2 = 0x80; // Turn ON all LED's connected to Port1
      00006B 80 A9            [24]  446 	sjmp	00111$
      00006D                        447 00103$:
      00006D 75 A0 80         [24]  448 	mov	_P2,#0x80
                                    449 ;	transmitter.c:41: delay();
      000070 12r00rCC         [24]  450 	lcall	_delay
                                    451 ;	transmitter.c:42: P2 = 0x00; // Turn OFF all LED's connected to Port1
      000073 75 A0 00         [24]  452 	mov	_P2,#0x00
                                    453 ;	transmitter.c:43: delay();
      000076 12r00rCC         [24]  454 	lcall	_delay
                                    455 ;	transmitter.c:44: Transmit_data('b');
      000079 75 82 62         [24]  456 	mov	dpl,#0x62
      00007C 12r01r01         [24]  457 	lcall	_Transmit_data
                                    458 ;	transmitter.c:45: break;
                                    459 ;	transmitter.c:46: case 3: P2 = 0xC0; // Turn ON all LED's connected to Port1
      00007F 80 95            [24]  460 	sjmp	00111$
      000081                        461 00104$:
      000081 75 A0 C0         [24]  462 	mov	_P2,#0xc0
                                    463 ;	transmitter.c:47: delay();
      000084 12r00rCC         [24]  464 	lcall	_delay
                                    465 ;	transmitter.c:48: P2 = 0x00; // Turn OFF all LED's connected to Port1
      000087 75 A0 00         [24]  466 	mov	_P2,#0x00
                                    467 ;	transmitter.c:49: delay();
      00008A 12r00rCC         [24]  468 	lcall	_delay
                                    469 ;	transmitter.c:50: Transmit_data('c');
      00008D 75 82 63         [24]  470 	mov	dpl,#0x63
      000090 12r01r01         [24]  471 	lcall	_Transmit_data
                                    472 ;	transmitter.c:51: break;
      000093 02r00r16         [24]  473 	ljmp	00111$
                                    474 ;	transmitter.c:52: case 4: P2 = 0x60; // Turn ON all LED's connected to Port1
      000096                        475 00105$:
      000096 75 A0 60         [24]  476 	mov	_P2,#0x60
                                    477 ;	transmitter.c:53: delay();
      000099 12r00rCC         [24]  478 	lcall	_delay
                                    479 ;	transmitter.c:54: P2 = 0x00; // Turn OFF all LED's connected to Port1
      00009C 75 A0 00         [24]  480 	mov	_P2,#0x00
                                    481 ;	transmitter.c:55: delay();
      00009F 12r00rCC         [24]  482 	lcall	_delay
                                    483 ;	transmitter.c:56: Transmit_data('e');
      0000A2 75 82 65         [24]  484 	mov	dpl,#0x65
      0000A5 12r01r01         [24]  485 	lcall	_Transmit_data
                                    486 ;	transmitter.c:57: break;
      0000A8 02r00r16         [24]  487 	ljmp	00111$
                                    488 ;	transmitter.c:58: case 5: P2 = 0x20; // Turn ON all LED's connected to Port1
      0000AB                        489 00106$:
      0000AB 75 A0 20         [24]  490 	mov	_P2,#0x20
                                    491 ;	transmitter.c:59: delay();
      0000AE 12r00rCC         [24]  492 	lcall	_delay
                                    493 ;	transmitter.c:60: P2 = 0x00; // Turn OFF all LED's connected to Port1
      0000B1 75 A0 00         [24]  494 	mov	_P2,#0x00
                                    495 ;	transmitter.c:61: delay();
      0000B4 12r00rCC         [24]  496 	lcall	_delay
                                    497 ;	transmitter.c:62: Transmit_data('f');
      0000B7 75 82 66         [24]  498 	mov	dpl,#0x66
      0000BA 12r01r01         [24]  499 	lcall	_Transmit_data
                                    500 ;	transmitter.c:63: break;
      0000BD 02r00r16         [24]  501 	ljmp	00111$
                                    502 ;	transmitter.c:64: case 6: P2 = 0x20; // Turn ON all LED's connected to Port1
      0000C0                        503 00107$:
      0000C0 75 A0 20         [24]  504 	mov	_P2,#0x20
                                    505 ;	transmitter.c:65: Transmit_data('g');
      0000C3 75 82 67         [24]  506 	mov	dpl,#0x67
      0000C6 12r01r01         [24]  507 	lcall	_Transmit_data
                                    508 ;	transmitter.c:66: break;
                                    509 ;	transmitter.c:68: }
                                    510 ;	transmitter.c:70: }
      0000C9 02r00r16         [24]  511 	ljmp	00111$
                                    512 ;------------------------------------------------------------
                                    513 ;Allocation info for local variables in function 'delay'
                                    514 ;------------------------------------------------------------
                                    515 ;i                         Allocated to registers r6 r7 
                                    516 ;j                         Allocated to registers r4 r5 
                                    517 ;------------------------------------------------------------
                                    518 ;	transmitter.c:73: void delay(void)
                                    519 ;	-----------------------------------------
                                    520 ;	 function delay
                                    521 ;	-----------------------------------------
      0000CC                        522 _delay:
                                    523 ;	transmitter.c:76: for(i=0;i<0xff;i++)
      0000CC 7E 00            [12]  524 	mov	r6,#0x00
      0000CE 7F 00            [12]  525 	mov	r7,#0x00
      0000D0                        526 00106$:
                                    527 ;	transmitter.c:77: for(j=0;j<0xff;j++);
      0000D0 7C FF            [12]  528 	mov	r4,#0xff
      0000D2 7D 00            [12]  529 	mov	r5,#0x00
      0000D4                        530 00105$:
      0000D4 EC               [12]  531 	mov	a,r4
      0000D5 24 FF            [12]  532 	add	a,#0xff
      0000D7 FA               [12]  533 	mov	r2,a
      0000D8 ED               [12]  534 	mov	a,r5
      0000D9 34 FF            [12]  535 	addc	a,#0xff
      0000DB FB               [12]  536 	mov	r3,a
      0000DC 8A 04            [24]  537 	mov	ar4,r2
      0000DE 8B 05            [24]  538 	mov	ar5,r3
      0000E0 EA               [12]  539 	mov	a,r2
      0000E1 4B               [12]  540 	orl	a,r3
      0000E2 70 F0            [24]  541 	jnz	00105$
                                    542 ;	transmitter.c:76: for(i=0;i<0xff;i++)
      0000E4 0E               [12]  543 	inc	r6
      0000E5 BE 00 01         [24]  544 	cjne	r6,#0x00,00124$
      0000E8 0F               [12]  545 	inc	r7
      0000E9                        546 00124$:
      0000E9 C3               [12]  547 	clr	c
      0000EA EE               [12]  548 	mov	a,r6
      0000EB 94 FF            [12]  549 	subb	a,#0xff
      0000ED EF               [12]  550 	mov	a,r7
      0000EE 64 80            [12]  551 	xrl	a,#0x80
      0000F0 94 80            [12]  552 	subb	a,#0x80
      0000F2 40 DC            [24]  553 	jc	00106$
                                    554 ;	transmitter.c:78: }
      0000F4 22               [24]  555 	ret
                                    556 ;------------------------------------------------------------
                                    557 ;Allocation info for local variables in function 'UART_Init'
                                    558 ;------------------------------------------------------------
                                    559 ;	transmitter.c:80: void UART_Init()
                                    560 ;	-----------------------------------------
                                    561 ;	 function UART_Init
                                    562 ;	-----------------------------------------
      0000F5                        563 _UART_Init:
                                    564 ;	transmitter.c:82: TMOD = 0x20;		/* Timer 1, 8-bit auto reload mode */
      0000F5 75 89 20         [24]  565 	mov	_TMOD,#0x20
                                    566 ;	transmitter.c:83: TH1 = 0xFD;		/* Load value for 9600 baud rate */
      0000F8 75 8D FD         [24]  567 	mov	_TH1,#0xfd
                                    568 ;	transmitter.c:84: SCON = 0x50;		/* Mode 1, reception enable */
      0000FB 75 98 50         [24]  569 	mov	_SCON,#0x50
                                    570 ;	transmitter.c:85: TR1 = 1;		/* Start timer 1 */
                                    571 ;	assignBit
      0000FE D2 8E            [12]  572 	setb	_TR1
                                    573 ;	transmitter.c:86: }
      000100 22               [24]  574 	ret
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'Transmit_data'
                                    577 ;------------------------------------------------------------
                                    578 ;tx_data                   Allocated to registers 
                                    579 ;------------------------------------------------------------
                                    580 ;	transmitter.c:88: void Transmit_data(char tx_data)
                                    581 ;	-----------------------------------------
                                    582 ;	 function Transmit_data
                                    583 ;	-----------------------------------------
      000101                        584 _Transmit_data:
      000101 85 82 99         [24]  585 	mov	_SBUF,dpl
                                    586 ;	transmitter.c:91: while (TI==0);		/* Wait until stop bit transmit */
      000104                        587 00101$:
                                    588 ;	transmitter.c:92: TI = 0;			/* Clear TI flag */
                                    589 ;	assignBit
      000104 10 99 02         [24]  590 	jbc	_TI,00114$
      000107 80 FB            [24]  591 	sjmp	00101$
      000109                        592 00114$:
                                    593 ;	transmitter.c:93: }
      000109 22               [24]  594 	ret
                                    595 ;------------------------------------------------------------
                                    596 ;Allocation info for local variables in function 'startup'
                                    597 ;------------------------------------------------------------
                                    598 ;	transmitter.c:95: void startup(void)
                                    599 ;	-----------------------------------------
                                    600 ;	 function startup
                                    601 ;	-----------------------------------------
      00010A                        602 _startup:
                                    603 ;	transmitter.c:97: P2 = 0x00;
      00010A 75 A0 00         [24]  604 	mov	_P2,#0x00
                                    605 ;	transmitter.c:98: delay();
      00010D 12r00rCC         [24]  606 	lcall	_delay
                                    607 ;	transmitter.c:99: P2 = 0xE0;
      000110 75 A0 E0         [24]  608 	mov	_P2,#0xe0
                                    609 ;	transmitter.c:100: delay();
      000113 12r00rCC         [24]  610 	lcall	_delay
                                    611 ;	transmitter.c:101: P2 = 0x80;
      000116 75 A0 80         [24]  612 	mov	_P2,#0x80
                                    613 ;	transmitter.c:102: delay();
      000119 12r00rCC         [24]  614 	lcall	_delay
                                    615 ;	transmitter.c:103: P2 = 0x40;
      00011C 75 A0 40         [24]  616 	mov	_P2,#0x40
                                    617 ;	transmitter.c:104: delay();
      00011F 12r00rCC         [24]  618 	lcall	_delay
                                    619 ;	transmitter.c:105: P2 = 0x20;
      000122 75 A0 20         [24]  620 	mov	_P2,#0x20
                                    621 ;	transmitter.c:106: delay();
                                    622 ;	transmitter.c:107: }
      000125 02r00rCC         [24]  623 	ljmp	_delay
                                    624 ;------------------------------------------------------------
                                    625 ;Allocation info for local variables in function 'touch'
                                    626 ;------------------------------------------------------------
                                    627 ;	transmitter.c:109: void touch(void)
                                    628 ;	-----------------------------------------
                                    629 ;	 function touch
                                    630 ;	-----------------------------------------
      000128                        631 _touch:
                                    632 ;	transmitter.c:111: if(P1 == 0x3e)state = 1;
      000128 74 3E            [12]  633 	mov	a,#0x3e
      00012A B5 90 07         [24]  634 	cjne	a,_P1,00117$
      00012D 75*00 01         [24]  635 	mov	_state,#0x01
      000130 75*01 00         [24]  636 	mov	(_state + 1),#0x00
      000133 22               [24]  637 	ret
      000134                        638 00117$:
                                    639 ;	transmitter.c:113: else if(P1 == 0x3d)state = 2;
      000134 74 3D            [12]  640 	mov	a,#0x3d
      000136 B5 90 07         [24]  641 	cjne	a,_P1,00114$
      000139 75*00 02         [24]  642 	mov	_state,#0x02
      00013C 75*01 00         [24]  643 	mov	(_state + 1),#0x00
      00013F 22               [24]  644 	ret
      000140                        645 00114$:
                                    646 ;	transmitter.c:115: else if(P1 == 0x3b)state = 3;
      000140 74 3B            [12]  647 	mov	a,#0x3b
      000142 B5 90 07         [24]  648 	cjne	a,_P1,00111$
      000145 75*00 03         [24]  649 	mov	_state,#0x03
      000148 75*01 00         [24]  650 	mov	(_state + 1),#0x00
      00014B 22               [24]  651 	ret
      00014C                        652 00111$:
                                    653 ;	transmitter.c:117: else if(P1 == 0x37)state = 4;
      00014C 74 37            [12]  654 	mov	a,#0x37
      00014E B5 90 07         [24]  655 	cjne	a,_P1,00108$
      000151 75*00 04         [24]  656 	mov	_state,#0x04
      000154 75*01 00         [24]  657 	mov	(_state + 1),#0x00
      000157 22               [24]  658 	ret
      000158                        659 00108$:
                                    660 ;	transmitter.c:119: else if(P1 == 0x2f)state = 5;
      000158 74 2F            [12]  661 	mov	a,#0x2f
      00015A B5 90 07         [24]  662 	cjne	a,_P1,00105$
      00015D 75*00 05         [24]  663 	mov	_state,#0x05
      000160 75*01 00         [24]  664 	mov	(_state + 1),#0x00
      000163 22               [24]  665 	ret
      000164                        666 00105$:
                                    667 ;	transmitter.c:121: else if(P1 == 0x1f)state = 6;
      000164 74 1F            [12]  668 	mov	a,#0x1f
      000166 B5 90 07         [24]  669 	cjne	a,_P1,00102$
      000169 75*00 06         [24]  670 	mov	_state,#0x06
      00016C 75*01 00         [24]  671 	mov	(_state + 1),#0x00
      00016F 22               [24]  672 	ret
      000170                        673 00102$:
                                    674 ;	transmitter.c:123: else state = 0;
      000170 E4               [12]  675 	clr	a
      000171 F5*00            [12]  676 	mov	_state,a
      000173 F5*01            [12]  677 	mov	(_state + 1),a
                                    678 ;	transmitter.c:124: }
      000175 22               [24]  679 	ret
                                    680 	.area CSEG    (CODE)
                                    681 	.area CONST   (CODE)
                                    682 	.area XINIT   (CODE)
                                    683 	.area CABS    (ABS,CODE)
